{"pageProps":{"frontMatter":{"title":"Java | 関数型インターフェースとラムダ式","date":"2022.04.06","description":"Java | 関数型インターフェースとラムダ式","categories":["Java"]},"content":"<p>ラムダ式については色々勉強してきましたが、ここで一度振り返ってみます。</p>\n<h2>@FunctionalInterface</h2>\n<ul>\n<li>明示的に関数型インターフェースであることを宣言できる</li>\n<li>アノテーションが無くても動作上問題ない</li>\n<li>アノテーションを付けることで関数型インターフェースの条件を満たさない場合にコンパイルエラーになる</li>\n</ul>\n<p>関数型インターフェースを引数に取るメソッドを例に動きを確認します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//　戻り値なし引数なしのメソッドを持つインターフェースです</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// Sample型　sampleはメソッド参照型変数という概念</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sample</span> sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sample<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 引数無しのvoidメソッドであれば、それはSampleに適合できる</span>\n        <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"御坂美琴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Sampleという関数型インターフェースは、引数無し戻り値無しの関数が適合します。→メソッドの型が適合する今回はラムダ式で実現しています。</p>\n<ul>\n<li>メソッドの型は以下の要素で決まります\n<ul>\n<li>引数列の型</li>\n<li>戻り値の型</li>\n</ul>\n</li>\n</ul>\n<p>よくある標準関数型インターフェースというのも、メソッドの型さえ合えばそれに適合できます。</p>\n<p>以下の例はConsumerという関数型インターフェースを利用したものです。このメソッドの型は以下のようになっています</p>\n<ul>\n<li>T型の引数を一つとる</li>\n<li>戻り値なしの関数</li>\n</ul>\n<p>よく使うSystem.out.println(String arg)はまさにこれに適合できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 引数無しのvoidメソッドであれば、それはSampleに適合できる</span>\n        <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"白井黒子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これはメソッド参照です</p>\n<ul>\n<li>メソッド単体を取り出している</li>\n<li>メソッド参照を受取る型はオブジェクト参照（インターフェースの型）で受け取っている</li>\n</ul>\n<p>以下のようにすることも可能です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> func <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span><span class=\"token string\">\"御坂妹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>System.out::printlnがConsumer型のオブジェクト参照になっているのがわかります。</p>\n<h2>ラムダ式</h2>\n<ul>\n<li>メソッドを式として記述できる</li>\n<li>メソッド単体の参照を変数に代入できる</li>\n<li>評価値は関数型インターフェース</li>\n</ul>\n<p>先ほどの例をラムダ式で書き換えると以下のようになる</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span>arg <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Consumerは、任意の引数が1つと戻り値無しの関数なので、渡すラムダ式も同じ型にします。ここが適合できないとエラーになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arg <span class=\"token operator\">+</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"mikoto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以下のような関数型インターフェースがあればこのメソッドは成功します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TwoArg</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFunc2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TwoArg</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">testFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arg <span class=\"token operator\">+</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"mikoto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ラムダ式が関数型インターフェースとして評価されているのがわかります。</p>\n<h4>メソッドに型パラメータは持てない</h4>\n<p>関数インターフェイスのメソッドが型パラメータを持つ場合、関数インターフェイスにラムダ式を使用することはできません</p>\n<p>以下のような場合はエラーになる</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TwoArg</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFunc2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TwoArg</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">testFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arg <span class=\"token operator\">+</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"mikoto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Target method is generic</code></pre></div>\n<h4>ラムダ式のthis</h4>\n<p>JavaScriptでもラムダ式はthisを束縛するとかありますが、Javaの場合クラスメソッド内のラムダ式ではthisが使えない</p>\n<p>以下はthisが利用できる例</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> printer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// thisが使える</span>\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        print<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"点です\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以下はthisが利用できない例</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// このラムダはクラスメソッドに相当する</span>\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>ローカル変数とラムダ式</h4>\n<p>ラムダ式の中から、ラムダ式の外側のメソッドの実質finalのローカル変数にアクセスできる</p>\n<ul>\n<li>アクセスできる変数\n<ul>\n<li>実質finalのローカル変数</li>\n<li>実質finalのパラメータ変数</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> paramValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> localValue <span class=\"token operator\">=</span> <span class=\"token string\">\"目薬\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">=</span> <span class=\"token string\">\"一方通行\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ラムダ式内の変数なので再代入できる</span>\n            <span class=\"token comment\">//localValue = \"再代入\"; // ここはエラー</span>\n            <span class=\"token comment\">// paramValue = \"ダークマター\"; // 同じくエラー</span>\n            <span class=\"token comment\">// Variable used in lambda expression should be final or effectively final</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> localValue <span class=\"token operator\">+</span> paramValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//参照は可能</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        print<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"点でした\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>クロージャ</h4>\n<p>その昔、JavaScriptでprivate変数を作るのにクロージャを使っていたそうですが、メソッド内に定義するメソッドという意味ではラムダ式も同じです。</p>\n<p>JavaScriptではクロージャの外側の関数で定義したローカル変数を書き換えて、privateを模倣しますが、Javaはそれができません。</p>\n<p>先ほどもあげたように、外側の関数で定義されている変数は実質finalとなるためです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">IntSupplier</span> supplier <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IntSupplier</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 実質finalなので再代入不可</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>参照先オブジェクトを利用することで実現できます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">IntSupplier</span> supplier <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IntSupplier</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> count<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">0\r\n1\r\n2</code></pre></div>\n<h2>関数合成</h2>\n<ul>\n<li>関数合成\n<ul>\n<li>関数型インターフェースを合成して新しい関数型インターフェースを作成すること</li>\n<li>Function系、Consumer系andThenメソッドで合成</li>\n<li>Predicate系and、or、negateメソッドで合成\n<ul>\n<li>andThenメソッドで合成</li>\n<li>and、or、negateメソッドで合成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> writeLog <span class=\"token operator\">=</span> msg <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log : \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sendEmail <span class=\"token operator\">=</span> msg <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Send : \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> notifMenber <span class=\"token operator\">=</span> msg <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Notif : \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">newFuncTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> event <span class=\"token operator\">=</span> writeLog<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>notifMenber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超重要な処理が完了しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Log : 超重要な処理が完了しました\r\r\nSend : 超重要な処理が完了しました\r\r\nNotif : 超重要な処理が完了しました</code></pre></div>\n<h2>参考書籍</h2>\n<p>改訂2版　パーフェクトJava</p>\n<p>Javaの参考書としては十分な内容だと思います。変な本を買うくらいならコレって感じです。</p>","slug":"p1919"},"__N_SSG":true}