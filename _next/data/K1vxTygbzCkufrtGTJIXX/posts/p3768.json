{"pageProps":{"frontMatter":{"title":"Spring | @ModelAttributeを攻略したい | Java","date":"2022.09.19","description":"Spring | @ModelAttributeを攻略したい | Java","categories":["Spring"]},"content":"<p>@ModelAttributeはメソッドのアノテーションとして使う場合と、引数のアノテーションとして使う場合があります。両方を組み合わせて利用する場合もあります。</p>\n<p>一体なんなんだ？と頭が混乱しましたので整理しました。</p>\n<p>@ModelAttributeの正体はモデル(Model)からオブジェクトを取得するという処理です。これを徐々に紐解いていきます。</p>\n<p>というわけで、今回は以下のオブジェクトをコントローラーの実行前に取得してみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"id = \"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\" name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>何もせずに取得する</h2>\n<p>実は特段何も記載しなくても取得することができます。取得するにはクエリパラメータとクラスのプロパティ名を合わせて送信します。</p>\n<p>ここでのポイントは以下です</p>\n<ul>\n<li>引数で事前に生成したクラスのオブジェクトを受け取る</li>\n<li>クエリパラメータにクラスのプロパティ名と合った値を設定して送信する</li>\n<li>@ModelAttributeを利用していない</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/att\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span><span class=\"token string\">\"product must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>リクエスト例：http://localhost:8080/att?id=1&#x26;name=ドリル</p>\n<p><img src=\"/3768/1.png\" alt=\"画像\"></p>\n<p>ModelAttributeアノテーションを付けなくてもコントローラーのオブジェクトが生成されていることがわかりました。</p>\n<h2>Modelに付与されるModelAttribute</h2>\n<p>実はこの時ModelオブジェクトにModelAttributeオブジェクトとして登録されている。Modelオブジェクトを見るとProductクラスのオブジェクトが格納されていることがわかる</p>\n<p><img src=\"/3768/2.png\" alt=\"画像\"></p>\n<p>この時クラス名を小文字にしたものがオブジェクトの名前になっているが、@ModelAttributeを利用してこれを変更できる</p>\n<p>以下はproductという名前からmyProductという名前に変更する例です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/att\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myProduct\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span><span class=\"token string\">\"product must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3768/3.png\" alt=\"画像\"></p>\n<p>ちなみに以下のようなクエリパラメータを利用しない場合のURIテンプレートでも利用できる</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/att/productId/{id}/productName/{name}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sample2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span><span class=\"token string\">\"product must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以下のURLでアクセス：http://localhost:8080/att/productId/2/productName/ドラゴンボール</p>\n<p><img src=\"/3768/4.png\" alt=\"画像\"></p>\n<p>しっかりとProductオブジェクトが作成されています</p>\n<h2>メソッドに付けて事前処理を行う</h2>\n<p>じゃあ結局ModelAttributeアノテーションって何なんだ？という話の前に、メソッドに付けて実行させるパターンを見てみます。</p>\n<p>ポイントは以下です</p>\n<ul>\n<li>メソッドの前に@ModelAttribute</li>\n<li>コントローラーのGetメソッドでは特に何もしてない\n<ul>\n<li>Modelだけ受け取っている</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myAtt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Model</span> <span class=\"token function\">preExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"テスト製品\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myProduct\"</span><span class=\"token punctuation\">,</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> model<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpre\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testpre</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3768/5.png\" alt=\"画像\"></p>\n<p>modelにはmyProductというProductのオブジェクトが格納されており、アノテーションのnameで指定したmyAttというオブジェクトも格納されていることがわかります。</p>\n<p>Productのオブジェクトは事前に用意したテスト製品が設定されています。</p>\n<p>メソッドの前に@ModelAttributeを付けると、事前に処理を行いそれをModelに設定しておくことができます。</p>\n<p>では、このままですよ？このまま引数だけ変更してProductを利用してみます。</p>\n<ul>\n<li>引数のModelを除去して直接Productを受け取ってみます</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpre\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testpre</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>しかし実行するとエラーになる</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Resolved [org.springframework.web.method.annotation.ModelAttributeMethodProcessor$1: org.springframework.validation.BeanPropertyBindingResult: 1 errors&#x26;lt;EOL&#x26;gt;Field error in object &#x26;#39;product&#x26;#39; on field &#x26;#39;id&#x26;#39;: rejected value [null]; codes [typeMismatch.product.id,typeMismatch.id,typeMismatch.int,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.id,id]; arguments []; default message [id]]; default message [Failed to convert value of type &#x26;#39;null&#x26;#39; to required type &#x26;#39;int&#x26;#39;; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [null] to type [int] for value &#x26;#39;null&#x26;#39;; nested exception is java.lang.IllegalArgumentException: A null value cannot be assigned to a primitive type]]</code></pre></div>\n<p>ここで@ModelAttributeアノテーションを利用してみましょう。そして名前を事前に設定したkeyであるmyProductを指定します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpre\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testpre</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myProduct\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3768/6.png\" alt=\"画像\"></p>\n<p>なんと取得できていました。これで@ModelAttributeの動きがなんとなく見えてきたのではないでしょうか？</p>\n<p>では次keyを指定せずに実行してみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpre\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testpre</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span> <span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これはさっきと同じエラーになります。事前処理のkey名を指定してあげないと取得できないようですね。</p>\n<p>では事前処理を修正してみます。クラス名を小文字にしたデフォルト名にします</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myAtt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Model</span> <span class=\"token function\">preExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"テスト製品\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product\"</span><span class=\"token punctuation\">,</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> model<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3768/7.png\" alt=\"画像\"></p>\n<p>今度は取得できました。</p>\n<p>これでわかったように、ModelAttributeがやっていることはモデルからオブジェクトの取り出しです。</p>\n<h2>最終確認</h2>\n<ul>\n<li>ModelAttributeはモデルからオブジェクトを取り出している</li>\n<li>key名が指定されているオブジェクトの場合は、そのkeyを指定する必要がある</li>\n<li>デフォルトではクラス名を小文字にしたものである</li>\n</ul>\n<p>最初の「何もせずに取得する」で確認したように、そもそもURLのパターンやパラメータによって引数に指定したクラスは生成されてモデルに格納されます。</p>\n<p>なので引数にModelAttributeを付ける動機はモデルからの取得です。もしも、そもそもモデルに事前設定してない場合はアノテーションをつける必要は無さそうです。→パラメータで指定した値でオブジェクトを生成するためにModelAttributeというのは間違い</p>\n<p>ただしViewに返却するモデルに対して指定の名称を付けたい場合は@ModelAttribute(“name”)としてkeyを指定する必要があります</p>\n<p>既にモデルにproductという名前でオブジェクトが登録されているときに、ModelAttributeでmyProductというオブジェクトを取得しようとすると、myProductは取得できないので新しく生成されてモデルに格納されることになります</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/att\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myProduct\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span><span class=\"token string\">\"product must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3768/8.png\" alt=\"画像\"></p>\n<h2>エラーになるについての捕捉</h2>\n<p>ちなみに何度かエラーになることを確認していますが、デフォルトコンストラクタを利用すればエラーになることはありませんが、何の値も設定されていないオブジェクトが生成されます。</p>\n<p>事前に@ModelAttributeによってモデルに何も設定しておらず、以下のメソッドでProductを取得しようとした時に、取得できない場合は生成されますがデフォルトコンストラクタがあればそれが実行されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpre\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testpre</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span> <span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>デフォルトコンストラクタを定義</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"デフォルト\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"id = \"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\" name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3768/9.png\" alt=\"画像\"></p>\n<p>Productにはデフォルトコンストラクタで生成されたオブジェクトが設定されています。この時は@ModelAttributeは不要です</p>\n<p><img src=\"/3768/10.png\" alt=\"画像\"></p>\n<p>もちろん事前メソッドがあり既にモデルにオブジェクトが設定されている場合は、そのオブジェクトを取得します</p>\n<p><img src=\"/3768/11.png\" alt=\"画像\"></p>\n<p>注意点として@ModelAttributeが引数にない場合でも、事前に設定している場合はそれを取得します。</p>\n<p><img src=\"/3768/12.png\" alt=\"画像\"></p>\n<p>登録されてないkey名を指定すれば、取得できずに新しく生成することになります</p>\n<p><img src=\"/3768/13.png\" alt=\"画像\"></p>\n<p>動き的にはメソッドの引数にはデフォルトで名前の指定がない@ModelAttributeが付与されているように見える。。</p>\n<p>ただこれでModelAttributeが出てきてもビビることはなくなったと思います。</p>","slug":"p3768"},"__N_SSG":true}