{"pageProps":{"frontMatter":{"title":"Java | Callableを使ってみる","date":"2022.02.12","description":"Java | Callableを使ってみる","categories":["Java"]},"content":"<p>JavaのCallableについての勉強記録です。</p>\n<p>シンプルな例でStringを戻り値になる関数を受取るCallableを作成してみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\nimport java.util.concurrent.Callable;\n\npublic class ReadValue {\n\n\tpublic static String getValue(Callable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>String</span><span class=\"token punctuation\">></span></span> func) throws MyException \n\t{\n\t\ttry {\n\t\t\treturn func.call();\n\t\t} catch (Exception e) {\n\t\t\tthrow new MyException();\n\t\t}\n\t}\n}\n\n</code></pre></div>\n<p>callメソッドで渡ってきた関数を実行します。これを利用してみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws MyException{\n\t\tString v = ReadValue.getValue(() -> {\n\t\t\t// ここでなんか処理\n\t\t\t// String result = hogeLogic.getValue();\n\t\t\tString result = \"result\";\n\t\t\treturn result;\n\t\t});\n\t\tSystem.out.println(v);\n\t}\n}\n\n</code></pre></div>\n<p>結果</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">result\n</code></pre></div>\n<p>型をT型にして試してみます。こうするとStringに決め打ちせずに本来あるべきCallableを利用できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\nimport java.util.concurrent.Callable;\n\npublic class ReadValue {\n\n\tpublic static <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>T</span><span class=\"token punctuation\">></span></span> T getValue(Callable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>T</span><span class=\"token punctuation\">></span></span> func) throws MyException \n\t{\n\t\ttry {\n\t\t\treturn func.call();\n\t\t} catch (Exception e) {\n\t\t\tthrow new MyException();\n\t\t}\n\t}\n}\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws MyException{\n\t\tboolean v = ReadValue.getValue(() -> {\n\t\t\t// ここでなんか処理\n\t\t\t// boolean result = hogeLogic.getValue();\n\t\t\tboolean result = true;\n\t\t\treturn result;\n\t\t});\n\t\tSystem.out.println(v);\n\t}\n}\n\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">true\n</code></pre></div>\n<h2>実践する</h2>\n<p>上記知識を踏まえてすごい簡単ですが実践してみます。</p>\n<p>ValidationResultに関するクラスを返すCallableのメソッドを受取り、その結果からメッセージを返却するクラスです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\nimport java.util.concurrent.Callable;\n\nimport aaaaa.validation.ValidationResult;\n\n\npublic class StoreSample {\n\n\tpublic static <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>T</span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">ValidationResult</span><span class=\"token punctuation\">></span></span> String storeData(Callable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>T</span><span class=\"token punctuation\">></span></span> func) throws MyException \n\t{\n\t\ttry {\n\t\t\tT result = func.call();\n\t\t\tif(result.getResult()) {\n\t\t\t\treturn result.getMessage();\n\t\t\t}\n\t\t\treturn \"登録しました\";\n\t\t} catch (Exception e) {\n\t\t\tthrow new MyException();\n\t\t}\n\t}\n}\n\n</code></pre></div>\n<p>ValidationResultインターフェースです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa.validation;\n\npublic interface ValidationResult {\n\tvoid setResult(String message);\n\tString getMessage();\n\tboolean getResult();\n}\n\n</code></pre></div>\n<p>実装クラスです。メッセージ文字列と、結果の真偽値を持っています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa.validation;\n\npublic class RegisterValidationResult implements ValidationResult{\n\t\n\tprivate boolean result = false;\n\t\n\tprivate String message = \"\";\n\n\tpublic void setResult(String message) {\n\t\tthis.message = message;\n\t\tthis.result = true;\n\t}\n\n\t@Override\n\tpublic boolean getResult() {\n\t\treturn this.result;\n\t}\n\n\t@Override\n\tpublic String getMessage() {\n\t\treturn this.message;\n\t}\n\n}\n</code></pre></div>\n<p>もう一つの実装クラスです。メッセージをセットするときに＜更新＞という文字列を付与します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa.validation;\n\npublic class UpdateValidationResult implements ValidationResult{\n\t\n\tprivate String message = \"\";\n\tprivate boolean result = false;\n\t\n\tpublic void setResult(String message) {\n\t\tthis.message = \"＜更新＞\" + message;\n\t\tthis.result = true;\n\t}\n\n\t@Override\n\tpublic boolean getResult() {\n\t\treturn this.result;\n\t}\n\n\t@Override\n\tpublic String getMessage() {\n\t\treturn this.message;\n\t}\n\n}\n\n</code></pre></div>\n<p>テストしてみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nimport aaaaa.validation.RegisterValidationResult;\nimport aaaaa.validation.UpdateValidationResult;\n\nclass StoreSampleTest {\n\n\t@Test\n\tvoid test_パラメータ不足() throws MyException {\n\t\tString result = StoreSample.storeData(() -> {\n\t\t\tRegisterValidationResult registResult = new RegisterValidationResult();\n\t\t\t// なんかチェック処理\n\t\t\t// checkLogic(regisResult);\n\t\t\tregistResult.setResult(\"登録に必要なパラメータが不足しています。\");\n\t\t\treturn registResult;\n\t\t});\n\t\tassertEquals(\"登録に必要なパラメータが不足しています。\", result);\n\t}\n\t\n\t@Test\n\tvoid test_正常登録() throws MyException {\n\t\tString result = StoreSample.storeData(() -> {\n\t\t\tRegisterValidationResult registResult = new RegisterValidationResult();\n\t\t\t// なんかチェック処理でエラーがない場合\n\t\t\t// checkLogic(regisResult);\n\t\t\treturn registResult;\n\t\t});\n\t\tassertEquals(\"登録しました\", result);\n\t}\n\t\n\t@Test\n\tvoid test_別の実装クラス() throws MyException {\n\t\tString result = StoreSample.storeData(() -> {\n\t\t\tUpdateValidationResult updateResult = new UpdateValidationResult();\n\t\t\tupdateResult.setResult(\"レコードが既に存在しています\");\n\t\t\treturn updateResult;\n\t\t});\n\t\tassertEquals(\"＜更新＞レコードが既に存在しています\", result);\t\n\t}\n\n}\n\n</code></pre></div>\n<p>なかなか面白いので使える場面も多そう？</p>","slug":"p1037"},"__N_SSG":true}