{"pageProps":{"frontMatter":{"title":"LaravelでAPI開発","date":"2022.03.16","description":"LaravelでAPI開発","categories":["Laravel"]},"content":"<p>これと同じようなことをしています。</p>\n<p><a href=\"/posts/p1557\">リンク</a></p>\n<p>Laravelのバージョンは9でしたが、新機能とか使ってないので8でも問題ありません。</p>\n<h2>リクエスト</h2>\n<p>リクエストはパラメータを付与してあげると、Requestを経由して取得できますのでその方法で行いました。</p>\n<p><img src=\"/1568/1.png\" alt=\"画像\"></p>\n<p>コントローラーは以下のようになっています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// 実際のusersテーブルを利用しますが、認証処理を行いません。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// requestのバリデーションは省略しています。</span>\n\n        <span class=\"token comment\">// ユーザーIDは本来認証情報から取得します。</span>\n        <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">gachaService</span><span class=\"token operator\">-></span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token property\">user_id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token property\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 結果はjsonで返却する</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token operator\">-></span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>レスポンス</h2>\n<p>response()->jsonで返してあげるとjson形式になります。この時連想配列の形式にしてあげると良いのでtoArray()メソッドを実装しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public function toArray() : array{\n      \n        // response->json()に適合させるために連想配列に変換します。\n        return array_map(function(CharacterData $character){\n            return [\n                'lank' => $character->getLank(),\n                'name' => $character->getName(),\n            ];\n        },$this->characters);\n\n    }\n</code></pre></div>\n<p>これを確実に保証するためにArrayableインターフェースを実装してあげるといいです。※後で入れたので戻り値の型がCharacterListになっています。コントローラーからはtoArrayメソッドしか呼ぶ必要がないので、戻り値の型をArrayableに変更して良いです</p>\n<h2>データアクセス</h2>\n<p>正しいかわかりませんが挑戦という形で、今回はEloquentモデルはRepository内だけで利用するようにしました。なんとなくDAO的な立ち位置に持ってきたようだったので、ロジックを含めないほうが良いと判断しました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UserDataRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDataRepository</span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$user_id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">UserData</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$mapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDataMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$mapper</span><span class=\"token operator\">-></span><span class=\"token function\">toUserData</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">UserData</span> <span class=\"token variable\">$userData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userData</span><span class=\"token operator\">-></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$user</span><span class=\"token operator\">-></span><span class=\"token property\">stone_amt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$userData</span><span class=\"token operator\">-></span><span class=\"token function\">getStoneAmt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$user</span><span class=\"token operator\">-></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>リスト</h2>\n<p>PHPの配列は便利な高階関数がいくつか用意されているので扱いは便利ですが、型を意識できないのが少し貧弱だなと思ってしまいます。</p>\n<p>そのため専用のクラスを作って管理できるようにしました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">CharacterList</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Arrayable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// キャラクターのリスト</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token variable\">$characters</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getCharactersList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characters</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>配列の型を指定するにはarray_mapなどの高階関数を利用すると便利です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     * Cahracterのリストを全てCharacterDataに変換してリストに追加します</span>\n<span class=\"token doc-comment comment\">     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">addCharactersToData</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$characters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$mapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterDataMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n        <span class=\"token variable\">$list</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Character</span> <span class=\"token variable\">$character</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">use</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$mapper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$mapper</span><span class=\"token operator\">-></span><span class=\"token function\">toCharacterData</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$character</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$characters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characters</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characters</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>array_mapの第一引数は関数で、引数には配列の要素が入ってきます。この時に型を指定してあげれば要素の型が異なる配列を排除できます。</p>\n<h2>DTO</h2>\n<p>DTOクラスを用意してもよかったのかもしれませんが、最終的にtoArrayメソッドで配列になるのでそこは省略しちゃいました。</p>\n<h2>エラーハンドリング</h2>\n<ul>\n<li>独自の例外クラスを作成して、その例外クラスをスローするようにしました。</li>\n<li>例外クラスはコマンドで作成可能です。\n<ul>\n<li>php artisan make:exception ApiException</li>\n</ul>\n</li>\n<li>例外発生時にrenderメソッドが呼ばれます</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ApiException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token variable\">$messages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$messages</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">messages</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$messages</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">messages</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>コンストラクタの引数でメッセージの配列を受取っています。これは連想配列にします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$userData</span><span class=\"token operator\">-></span><span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// error</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'result'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'ガチャ石が足りません'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre></div>","slug":"p1568"},"__N_SSG":true}