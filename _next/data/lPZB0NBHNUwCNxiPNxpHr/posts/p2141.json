{"pageProps":{"frontMatter":{"title":"Java | クラスローダとファイルの走査","date":"2022.04.18","description":"Java | クラスローダとファイルの走査","categories":["Java"]},"content":"<p>前回アノテーションとリフレクションを利用することで、異種コンテナを作成しました。その際にファイル一覧を取得するのにクラスローダを利用しました。</p>\n<p>今回はそのクラスローダについてちょっぴり勉強してみました。</p>\n<p>前回の記事</p>\n<p><a href=\"/posts/p2132\">リンク</a></p>\n<h2>クラスオブジェクト</h2>\n<p>クラスオブジェクトの参照を取得するには、パーフェクトJavaによると以下の方法がある</p>\n<ul>\n<li>クラスリテラル</li>\n<li>ObjectクラスのgetClassメソッド</li>\n<li>ClassクラスのforNameクラスメソッド</li>\n<li>その他(ClassクラスやClassLoaderクラスのメソッド経由)</li>\n</ul>\n<p>ただし内部的にはクラスローダが保持するClassオブジェクト群からの検索になる。</p>\n<h2>クラスローダー</h2>\n<ul>\n<li>ブートストラップ・クラスローダ\n<ul>\n<li>Java仮想マシンにある。</li>\n<li>Javaアプリケーション起動時に最初に読み込まれる</li>\n<li>Java仮想マシンの拡張ディレクトリ「jre/lib/ext」に置かれたjarファイルにあるクラスしかロードできない</li>\n</ul>\n</li>\n<li>システム・クラスローダ\n<ul>\n<li>CLASSPATHからクラスのロードやリソースの検索を行う</li>\n<li>ブートストラップ・クラスローダの子クラスローダ</li>\n</ul>\n</li>\n</ul>\n<p>作成したクラスが独自のクラスローダによってロードされていないのであれば、システムクラスローダが利用されている。</p>\n<p>参考</p>\n<p>https://www.techscore.com/tech/Java/JavaEE/Servlet/supplement-1/</p>\n<p>https://teratail.com/questions/15456</p>\n<p>特定のパッケージ(vol)下のファイルやフォルダの一覧をコンソールに出力するには以下のようになった</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token class-name\">ClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token class-name\">URL</span> resource <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token class-name\">File</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file <span class=\"token operator\">:</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>しかし利用するクラスローダがシステムクラスローダならば以下のような記載でも同じクラスローダが取得できるため結果が同じになる。Userクラスは自分で定義したJavaのクラスで、Userクラスはシステムクラスローダにてロードされているはず</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t  <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token comment\">// ClassLoader loader = ClassLoader.getSystemClassLoader();</span>\n\t    <span class=\"token class-name\">URL</span> resource <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token class-name\">File</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file <span class=\"token operator\">:</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>出力結果は同じでした。</p>\n<h2>getResourceメソッド</h2>\n<p>https://docs.oracle.com/javase/jp/8/docs/api/java/lang/ClassLoader.html#getResource-java.lang.String-</p>\n<p>上記のコードではnameにvolが渡っています。parentはブートストラップクラスローダなのでparent.getResource(“vol”)に処理が渡ります。</p>\n<p>次にブートストラップクラスローダはparentがnullなのでBootLoader.findResourceに処理が移ります。最終的にはurlがnullでfindResourceに回ってました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">URL</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            url <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            url <span class=\"token operator\">=</span> <span class=\"token class-name\">BootLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">findResource</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            url <span class=\"token operator\">=</span> <span class=\"token function\">findResource</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>システムクラスローダでの呼出し</li>\n</ul>\n<p><img src=\"/2141/1.png\" alt=\"画像\"></p>\n<ul>\n<li>ブートストラップクラスローダでの呼出し</li>\n</ul>\n<p><img src=\"/2141/2.png\" alt=\"画像\"></p>\n<h3>URLオブジェクト</h3>\n<p>findResourceメソッドはURLオブジェクトを取得します。URLオブジェクトはパスなどの情報を持っています</p>\n<p>volというパッケージを渡したので、そこまでのパスが格納されていました。</p>\n<p><img src=\"/2141/3.png\" alt=\"画像\"></p>\n<h3>Fileオブジェクト</h3>\n<p>URLオブジェクトのpathは、volパッケージのパスが文字列で格納されております。その文字列を引数にFileオブジェクトを作成します。</p>\n<p>listメソッドとfor文を合わせて使うことで、volパッケージにあるファイルを文字列で走査することができます。</p>\n<h2>終わりに</h2>\n<p>クラスローダはどのファイルをどのクラスローダでロードしたのかというのを知っておくと、使い始めることができそうです。</p>\n<p>自作でクラスローダを作ることもできるようですが、よほどのことが無い限り作る必要はなさそうに思えます。</p>\n<p>http://blog.livedoor.jp/lalha_java/archives/50741760.html</p>","slug":"p2141"},"__N_SSG":true}