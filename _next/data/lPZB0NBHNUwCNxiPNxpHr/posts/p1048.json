{"pageProps":{"frontMatter":{"title":"Java | Supplierを使ってみる","date":"2022.02.12","description":"Java | Supplierを使ってみる","categories":["Java"]},"content":"<p>以前使った例</p>\n<p><a href=\"/posts/p854\">リンク</a></p>\n<p>今回はこの型を受取るメソッドを定義して、わかりやすい形で使ってみます。</p>\n<p>こんな簡単なクラスとメソッドがあります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\nimport java.util.function.Supplier;\n\npublic class TextCreator {\n\n\tpublic static String getStr(Supplier<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>String</span><span class=\"token punctuation\">></span></span> func) {\n\t\treturn func.get() + \"!\";\n\t}\n}\n\n</code></pre></div>\n<p>テストしてみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class TextCreatorTest {\n\n\t@Test\n\tpublic void test_basicSupplier() {\n\t\tString result = TextCreator.getStr(()-> \"Java\");\n\t\tassertEquals(\"Java!\", result);\n\t}\n}\n\n</code></pre></div>\n<p>getメソッドでラムダ式の結果が取得できています。</p>\n<h3>単純な遅延</h3>\n<p>前回のおさらいのような感じで遅延実行を行ってみます。</p>\n<p>例えば以下のようにフラグに応じて処理を切り替えるパターンです</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public static String getLazyStr(boolean doFlag, Supplier<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>String</span><span class=\"token punctuation\">></span></span> func) {\n\t\tString result = \"\";\n\t\tif(doFlag) {\n\t\t\tresult = func.get();\n\t\t}\n\t\treturn result;\n\t}\n</code></pre></div>\n<p>func.getはとても時間のかかる重たい処理だと仮定します。</p>\n<p>func.getで得られる結果を最初から取得してこの関数に渡してしまえば、必ず重たい処理を通ることになりますが、このSupplier.getを使えば処理の遅延ができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">@Test\n\tpublic void test_lazy() {\n\t\tString result = TextCreator.getLazyStr(true, () -> {\n\t\t\tSystem.out.println(\"とても重い処理を行って取得します\");\n\t\t\treturn \"soHeavy\";\n\t\t});\n\t\tassertEquals(\"soHeavy\", result);\n\t}\n\t\n\t@Test\n\tpublic void test_lazy2() {\n\t\tString result = TextCreator.getLazyStr(false, () -> {\n\t\t\tSystem.out.println(\"とても重い処理を行って取得します\");\n\t\t\treturn \"soHeavy\";\n\t\t});\n\t\tassertEquals(\"\", result);\n\t}\n</code></pre></div>\n<p>上のテストはdoFlagがtrueなので重たい処理が走りますが、下のテストfalseなので重たい処理が呼ばれることはありません。</p>\n<p>コンソールを確認すると、下のテストでは「とても重い処理を行って取得します」というログが出力されません。</p>\n<h2>Optionalで利用</h2>\n<p>orElseGetは引数にSupplierを受取ります。これを利用してみます。</p>\n<p>こんなUserクラスを作成します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">package aaaaa;\npublic class User {\n\t\n\tprivate String name;\n\n\tpublic User(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\t\n}\n</code></pre></div>\n<p>getUserNameはUserが渡ってくればそのユーザー名を返して、もしもnullが渡ってきたら新規Userを作成してそのユーザー名を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public static String getUserName(User user) {\n\t\tOptional<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>User</span><span class=\"token punctuation\">></span></span> opt = Optional.ofNullable(user);\n\t\tUser initUser = opt.orElseGet(() -> {\n\t\t\tUser newUser = new User(\"御坂美琴\");\n\t\t\treturn newUser;\n\t\t});\n\t\treturn initUser.getName();\n\t}\n</code></pre></div>\n<p>これをテストしてみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">@Test\n\tpublic void test_user() {\n\t\tUser user = new User(\"白井黒子\");\n\t\tString result = TextCreator.getUserName(user);\n\t\tassertEquals(\"白井黒子\", result);\n\t}\n\t\n\t@Test\n\tpublic void test_user2() {\n\t\tString result = TextCreator.getUserName(null);\n\t\tassertEquals(\"御坂美琴\", result);\n\t}\n</code></pre></div>\n<p>下のテストはnullをメソッドに渡していますので、getUserNameで御坂美琴が設定されます。</p>","slug":"p1048"},"__N_SSG":true}