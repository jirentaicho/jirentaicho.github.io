{"pageProps":{"frontMatter":{"title":"C# | yamlファイルに書き込む","date":"2021.10.02","description":"C# | yamlファイルに書き込む","categories":["WPF"]},"content":"<p>前回はデシアライズについてやったので、今回はシリアライズについてやってみます。つまり書き込みです。</p>\n<p>前回の記事で読み込んだymlに対して、新しく何かを追加して保存してみます。</p>\n<h3>オブジェクトをシリアライズしてテキストに保存する</h3>\n<p>まずは簡単な挨拶で、NewGameクラスにaddnameというstringのフィールドを追加しました。ここの値を入れて保存してみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewGame</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string apiversion <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> string kind <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MetaData</span> metada <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Spec</span> spec <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 追加</span>\n        <span class=\"token keyword\">public</span> string addname <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>基本的にはデシアライズの時と同じで、まずはシリアライザーを作成して、保存するオブジェクトを渡すとstringが得られます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">dialog<span class=\"token punctuation\">.</span></span>FileName</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Encoding</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sy <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">reader<span class=\"token punctuation\">.</span></span>ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">reader<span class=\"token punctuation\">.</span></span>Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\">MessageBox<span class=\"token punctuation\">.</span>Show</span><span class=\"token punctuation\">(</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// see height_in_inches in sample yml </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">deserializer<span class=\"token punctuation\">.</span></span>Deserialize</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">NewGame</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">MessageBox<span class=\"token punctuation\">.</span>Show</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>apiversion <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span>replicas <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>metada<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// addnameに唐可可という文字列を設定する</span>\np<span class=\"token punctuation\">.</span>addname <span class=\"token operator\">=</span> <span class=\"token string\">\"唐可可\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 保存する</span>\n<span class=\"token comment\">// まずはテキスト形式で出力する</span>\n<span class=\"token keyword\">var</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SerializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CamelCaseNamingConvention<span class=\"token punctuation\">.</span>Instance</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> yaml <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">serializer<span class=\"token punctuation\">.</span></span>Serialize</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//　ファイルに保存する。</span>\n<span class=\"token class-name\">MessageBox<span class=\"token punctuation\">.</span>Show</span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//　trueは上書き許可します。</span>\n<span class=\"token keyword\">var</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"C:\\Users\\kirino\\Documents\\result.yaml\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Encoding</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">writer<span class=\"token punctuation\">.</span></span>Write</span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">writer<span class=\"token punctuation\">.</span></span>Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"/76/1.png\" alt=\"画像\"></p>\n<p>出力されたyamlファイルは以下のように、追加した内容も記載されています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiversion: v1\nkind: Deployment\nmetada:\n  name: sample\n  labels:\n    app: nginx\nspec:\n  replicas: 3\naddname: 唐可可\n</code></pre></div>\n<h3>新規クラスをシリアライズして保存する</h3>\n<p>元々あるyamlファイルをデシアライズしてシリアライズしました。</p>\n<p>次に新規クラスを作って、result2.yamlというファイルに、シリアライズして保存します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string db <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> bool devlop <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Env</span> env <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">Env</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> string host <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> port <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> sample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsample<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> <span class=\"token string\">\"Oracle\"</span><span class=\"token punctuation\">;</span>\nsample<span class=\"token punctuation\">.</span>devlop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> env <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample<span class=\"token punctuation\">.</span>Env</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nenv<span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\nenv<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> <span class=\"token number\">5436</span><span class=\"token punctuation\">;</span>\nsample<span class=\"token punctuation\">.</span>env <span class=\"token operator\">=</span> env<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newyaml <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">serializer<span class=\"token punctuation\">.</span></span>Serialize</span><span class=\"token punctuation\">(</span>sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//　trueは上書き許可します。</span>\n<span class=\"token keyword\">var</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"C:\\Users\\kirino\\Documents\\result2.yaml\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Encoding</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">writer<span class=\"token punctuation\">.</span></span>Write</span><span class=\"token punctuation\">(</span>newyaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token namespace\">writer<span class=\"token punctuation\">.</span></span>Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">gyarugamaker.Sampledb: Oracle\ndevlop: true\nenv:\n  host: localhost\n  port: 5436\n</code></pre></div>\n<p>こちらも想定通りにファイルが出力されていました。</p>","slug":"p76"},"__N_SSG":true}