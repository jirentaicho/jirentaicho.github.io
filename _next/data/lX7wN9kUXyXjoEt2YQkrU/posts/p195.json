{"pageProps":{"frontMatter":{"title":"ゼロからのOS自作入門 | day01","date":"2021.11.29","description":"ゼロからのOS自作入門 | day01","categories":["OS"]},"content":"<p>Kindle Unlimitedでそれっぽい本をパラパラと読んでいたらOSの自作に興味を持ってしまったので買いました。</p>\n<p>分厚い本っぽいのでKindleで買ったのですが、マーカーとかコピペとかできないやつだったのでガッカリ。</p>\n<p>まあ本でもコピペなんぞできないんで気を取り直して進めてみました。</p>\n<p>まずは第１章</p>\n<h3>事前準備</h3>\n<p>自分はKubernetesの環境作りで既にWindowsでUbuntuが使える状態だったのですが、VirtualBoxでUbuntuを使うことにしました。</p>\n<p>VirtualBox</p>\n<p>https://www.virtualbox.org/</p>\n<p>データ領域は80Gを付与しました。デフォルトの10Gだと足りません。</p>\n<p>Ubuntu</p>\n<p>https://jp.ubuntu.com/download</p>\n<p>Ubuntu Desktop 20.04.3 LTSを利用しました。</p>\n<h3>Okteta</h3>\n<p>バイナリエディタです。前に仕事でバイナリエディタを使ったことがあるのですが（データの件数確認程度）その時の苦しい記憶が蘇ってきました。</p>\n<p>それはさておき、意味不明な文字列をひたすら打ち込みました。疲れました。</p>\n<p>ちなみに「１行あたりのバイト数を設定…」で”16″にしても、画面サイズをデカくして表示しないと参考書のように表示されませんでした。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sum BOOT64.EFI\n12430     2</code></pre></div>\n<p><img src=\"/195/1.png\" alt=\"画像\"></p>\n<p>このコマンドで問題がないことを確認して次は実行です。</p>\n<h3>実行</h3>\n<p>家に使ってないパソコンがあったのでそれで試すことにしました。USBメモリは64Gのがあったのでそれを利用しました。</p>\n<p>VirtualBoxでUSBメモリを認識させるには、拡張パックが必要とのことで以下のサイトを参考に導入します</p>\n<p>https://pc-karuma.net/virtualbox-mount-usb-flash-drive/</p>\n<p>Failed to create a proxy device for the USB device というエラーが起きたのですが、3.0ポートで接続してるのが問題らしいので2.0ポートに接続したら、POKANという音とともに認識したっぽいポップアップが出てきた</p>\n<p><img src=\"/195/2.png\" alt=\"画像\"></p>\n<p>参考書のやりかただとUSBの探し方が意味不明だったのでdevフォルダでUSBを抜き差ししててlsコマンドで確認するとsdbというフォルダがそれだと理解した</p>\n<p><img src=\"/195/3.png\" alt=\"画像\"></p>\n<p>色々ミスったがコピーまで完了。。。</p>\n<p><img src=\"/195/4.png\" alt=\"画像\"></p>\n<p>USBを引っこ抜いて使ってないパソコンに差し込んで起動します。</p>\n<p>そして無事失敗。。。原因は不明</p>\n<h3>エミュレーターで実行</h3>\n<p>というわけでエミュレーターで行います。</p>\n<p>付録AとGithubを見ても、qemuのセットアップがわからなかったので適当に以下でinstallをしました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">qemu-img\n\nコマンド &#x26;#39;qemu-img&#x26;#39; が見つかりません。次の方法でインストールできます:\n\nsudo apt install qemu-utils\n\nmisaka@misaka-VirtualBox:~$ sudo apt install qemu-utils\n\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">qemu-img create -f raw disk.img 200M\nFormatting &#x26;#39;disk.img&#x26;#39;, fmt=raw size=209715200\nmisaka@misaka-VirtualBox:~/ドキュメント$ mkfs.fat -n &#x26;#39;MIKAN OS&#x26;#39; -s 2 -f 2 -R 32 -F 32 disl.img\nmkfs.fat 4.1 (2017-01-24)\nmkfs.fat: unable to open disl.img: No such file or directory\nmisaka@misaka-VirtualBox:~/ドキュメント$ mkfs.fat -n &#x26;#39;MIKAN OS&#x26;#39; -s 2 -f 2 -R 32 -F 32 disk.img\nmkfs.fat 4.1 (2017-01-24)\nmisaka@misaka-VirtualBox:~/ドキュメント$ mkdir -p mnt\nmisaka@misaka-VirtualBox:~/ドキュメント$ sudo mount -o loop disk.img mnt\n[sudo] misaka のパスワード: \nmisaka@misaka-VirtualBox:~/ドキュメント$ sudo mkdir -P mnt/EFI/BOOT\nmkdir: 無効なオプション -- &#x26;#39;P&#x26;#39;\nTry &#x26;#39;mkdir --help&#x26;#39; for more information.\nmisaka@misaka-VirtualBox:~/ドキュメント$ sudo mkdir -p mnt/EFI/BOOT\nmisaka@misaka-VirtualBox:~/ドキュメント$ sudo cp BOOT64.EFI mnt/EFI/BOOT/BOOT64.EFI\nmisaka@misaka-VirtualBox:~/ドキュメント$ sudo umount mnt\nmisaka@misaka-VirtualBox:~/ドキュメント$ qemu-system-x86_64 \\\n&#x26;gt; -drive if=pflash,file=$HOME/osbook/devenv/OVMF_CODE.fd \\\n&#x26;gt; -drive if=pflash,file=$HOME/osbook/devenv/OVMF_VARS.fd \\\n&#x26;gt; -hda disk.img\n\nコマンド &#x26;#39;qemu-system-x86_64&#x26;#39; が見つかりません。次の方法でインストールできます:\n\nsudo apt install qemu-system-x86      # version 1:4.2-3ubuntu6.18, or\nsudo apt install qemu-system-x86-xen  # version 1:4.2-3ubuntu6.18\n\nmisaka@misaka-VirtualBox:~/ドキュメント$ sudo apt install qemu-system-x86\nパッケージリストを読み込んでいます... 完了\n</code></pre></div>\n<p>ここで何かに気が付く、あれ？環境構築が必要？？</p>\n<p>https://github.com/uchan-nos/mikanos-build</p>\n<p>とりあえずビルド環境の構築を行う</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">git clone https://github.com/uchan-nos/mikanos-build.git osbook</code></pre></div>\n<p>ここまで行って再度実行。ハローワールドしない。。。</p>\n<p><img src=\"/195/5.png\" alt=\"画像\"></p>\n<p>本を読むとrun_qemu.shというシェルがあるよ:)とのことなのでそれで試すと</p>\n<p><img src=\"/195/6.png\" alt=\"画像\"></p>\n<p>きました。入力していたマシン語には問題は無かったようなので一安心。</p>\n<p>正直２進数とか１６進数とか、この業界にいても無視してきました。。。</p>\n<h3>ハローワールドが表示されるまで</h3>\n<p>USB起動の場合</p>\n<p>CPUがBIOSを実行する→BIOSが接続されているストレージを検索する→ストレージ中の実行可能ファイルをメインメモリに書き出す→CPUがメインメモリに書き出したファイルを実行する。</p>\n<h3>C/C＋＋の導入</h3>\n<p>ここでVirtualBoxで割り当てている10Gの容量が足りなくなり拡張しようとしたら起動しなくなったので最初から作り直した。容量を80Gにして作成</p>\n<p>（HDDがなくてダブルSSDで動いてるパソコンなので80Gは痛い・・・)</p>\n<p>lld-linkってコマンドが見つかりませんってエラーになったので、githubに戻って以下まで実施</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ansible-playbook -K -i ansible_inventory ansible_provision.yml</code></pre></div>\n<p>さぁ、これでhello.efiが作成できるようになったので、さっそくエミュレータで起動してみます。</p>\n<p><img src=\"/195/7.png\" alt=\"画像\"></p>\n<p>なんとか動きました。。day01なのにめっちゃ疲れた</p>\n<p>ネット見ないと環境構築できないってので少し戸惑ったが、最初の一歩を踏み出せたので良かった。</p>\n<p>正直Kindle版は失敗したなぁと思ったが本も７４４ページあるそうなので・・・</p>","slug":"p195"},"__N_SSG":true}