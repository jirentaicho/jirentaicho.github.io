{"pageProps":{"frontMatter":{"title":"Java | デッドロック","date":"2022.08.11","description":"Java | デッドロック","categories":["Java"]},"content":"<p>大昔に買って挫折した本「増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編」を久しぶりに見てみたら面白かったので、少しメモをしようと思います。</p>\n<p>データベースなどでデッドロックが発生することがありますが、Javaでもデッドロックを引き起こすことがあります。</p>\n<p>今回はデッドロックを引き起こすコードを書きます</p>\n<h2>デッドロック</h2>\n<p>今回は受発注伝票を更新する処理でデッドロックを発生させます。もちろんこれから記載するコードを実際に利用するのはあり得ないのですが、あくまでデッドロックを発生させるために記載しています。</p>\n<p>Slipクラスは受注伝票や発注伝票として利用できる伝票クラスです。持っているのは伝票の名前だけです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Slip</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次に受発注更新ロジックを作成します。これは受注伝票と発注伝票を保持しておいて、それぞれsyncronizedブロックを利用して安全に更新します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 受発注の更新</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AcceptOrderUpdateLogic</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 利用者名</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 受注伝票</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Slip</span> accept<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 発注伝票</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Slip</span> order<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">AcceptOrderUpdateLogic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">Slip</span> accept<span class=\"token punctuation\">,</span><span class=\"token class-name\">Slip</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accept <span class=\"token operator\">=</span> accept<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order <span class=\"token operator\">=</span> order<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 受注のロック取得</span>\n\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"が\"</span> <span class=\"token operator\">+</span> accept<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"のロックを取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//　発注のロックを取得</span>\n\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"が\"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"のロックを取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"が\"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"の更新が完了しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"が\"</span> <span class=\"token operator\">+</span> accept<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"の更新が完了しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このロジックを利用して受発注伝票を登録します。</p>\n<p>この時、２人のユーザーが同時にこのロジックを利用する想定ですが、それぞれコンストラクタの引数の順序を変えてみます。一人は受注,発注ですが、もう一人は発注,受注で渡してしまいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Slip</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受注\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Slip</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"発注\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">AcceptOrderUpdateLogic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kamijo\"</span><span class=\"token punctuation\">,</span>accept<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">AcceptOrderUpdateLogic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">,</span>order<span class=\"token punctuation\">,</span>accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これを実行するとデッドロックが発生します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">kamijoが受注のロックを取得しました\r\r\nmisakaが発注のロックを取得しました</code></pre></div>\n<p>それぞれがロックの開放を待っている状態で処理が止まってしまいます。</p>\n<p>以下のように修正すれば問題なく処理が進みます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">AcceptOrderUpdateLogic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kamijo\"</span><span class=\"token punctuation\">,</span>accept<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">AcceptOrderUpdateLogic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">,</span>accept<span class=\"token punctuation\">,</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">kamijoが受注のロックを取得しました\r\r\nkamijoが発注のロックを取得しました\r\r\nkamijoが発注の更新が完了しました\r\r\nkamijoが受注の更新が完了しました\r\r\nmisakaが受注のロックを取得しました\r\r\nmisakaが発注のロックを取得しました\r\r\nmisakaが発注の更新が完了しました\r\r\nmisakaが受注の更新が完了しました\r</code></pre></div>\n<p>思わぬ凡ミスでデッドロックが発生することがあるのでマルチスレッドの処理は、特に細心の注意が必要です</p>","slug":"p3344"},"__N_SSG":true}