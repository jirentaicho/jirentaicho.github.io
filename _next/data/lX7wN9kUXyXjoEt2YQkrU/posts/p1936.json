{"pageProps":{"frontMatter":{"title":"Java | ストリーム処理","date":"2022.04.06","description":"Java | ストリーム処理","categories":["Java"]},"content":"<ul>\n<li>ストリーム\n<ul>\n<li>要素の集まりコレクションや配列のことイテレータも要素の集まりイテレータは要素の集まりから、要素を取り出す操作の抽象化のこと</li>\n<li>パイプライン処理要素を処理した”結果”を、次の処理に回すような処理のこと以下の要素からなる初期ストリームの作成中間処理ストリームからストリームへの変換処理(複数の中間処理があっても良い)終端処理ストリームから最終的な出力処理終端処理の後に中間処理を通すことはできないストリーム処理中にデータソースに要素の追加や削除は禁止実行時例外になる\n<ul>\n<li>コレクションや配列のこと</li>\n<li>イテレータも要素の集まりイテレータは要素の集まりから、要素を取り出す操作の抽象化のこと</li>\n<li>イテレータは要素の集まりから、要素を取り出す操作の抽象化のこと</li>\n<li>要素を処理した”結果”を、次の処理に回すような処理のこと</li>\n<li>以下の要素からなる初期ストリームの作成中間処理ストリームからストリームへの変換処理(複数の中間処理があっても良い)終端処理ストリームから最終的な出力処理</li>\n<li>終端処理の後に中間処理を通すことはできない</li>\n<li>ストリーム処理中にデータソースに要素の追加や削除は禁止実行時例外になる</li>\n<li>初期ストリームの作成</li>\n<li>中間処理ストリームからストリームへの変換処理(複数の中間処理があっても良い)</li>\n<li>終端処理ストリームから最終的な出力処理</li>\n<li>ストリームからストリームへの変換処理</li>\n<li>(複数の中間処理があっても良い)</li>\n<li>ストリームから最終的な出力処理</li>\n<li>実行時例外になる</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>ストリームとコレクション</h2>\n<ul>\n<li>コレクションからストリームを生成する場合はstreamメソッドを利用する</li>\n<li>終端処理としてcollectメソッドを使うことでコレクションを出力する</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSteream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/1936/1.png\" alt=\"画像\"></p>\n<ul>\n<li>ファクトリメソッド\n<ul>\n<li>普通のストリームof可変長引数か配列で要素を渡す</li>\n<li>無限ストリームgenerate生成関数で要素を生成iterate初期値と関数で要素を生成</li>\n<li>無限ストリーム以下のメソッドを利用するなどして打ち切る必要がある中間処理limitdistinct終端処理anyMatch\n<ul>\n<li>of可変長引数か配列で要素を渡す</li>\n<li>可変長引数か配列で要素を渡す</li>\n<li>generate生成関数で要素を生成</li>\n<li>iterate初期値と関数で要素を生成</li>\n<li>生成関数で要素を生成</li>\n<li>初期値と関数で要素を生成</li>\n<li>中間処理limitdistinct</li>\n<li>終端処理anyMatch</li>\n<li>limit</li>\n<li>distinct</li>\n<li>anyMatch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSteream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token string\">\"御坂美琴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/1936/2.png\" alt=\"画像\"></p>\n<h2>Streamインターフェース</h2>\n<ul>\n<li>中間処理と終端処理で利用するメソッド\n<ul>\n<li>先ほどの例中間処理limit終端処理collect\n<ul>\n<li>中間処理limit</li>\n<li>終端処理collect</li>\n<li>limit</li>\n<li>collect</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引数に関数型インターフェースを受取る</li>\n</ul>\n<h3>reduce</h3>\n<ul>\n<li>終端処理の一つ</li>\n<li>要素群から結果を得る計算処理\n<ul>\n<li>最小値、最大値、合計値、平均値の計算に便利中間結果用の変数を用意する必要があるような場合に使える\n<ul>\n<li>中間結果用の変数を用意する必要があるような場合に使える</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Itemクラスのインスタンスの集まりから、金額フィールドの合計を算出する</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"パーフェクトJava\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Effective Java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java言語で学ぶデザインパターン入門\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4290</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> amt <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> ac <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>ac1<span class=\"token punctuation\">,</span>ac2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> ac1 <span class=\"token operator\">+</span> ac2\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">12210</span><span class=\"token punctuation\">,</span>amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>第一引数\n<ul>\n<li>identity初期値\n<ul>\n<li>初期値</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二引数\n<ul>\n<li>accumulator追加の要素を結果に組み込むための、結合的、非干渉およびステートレスな関数\n<ul>\n<li>追加の要素を結果に組み込むための、結合的、非干渉およびステートレスな関数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第三引数\n<ul>\n<li>combiner2つの値を結合するための結合的、非干渉およびステートレスな関数(アキュムレータ関数と互換性がなければいけない)\n<ul>\n<li>2つの値を結合するための結合的、非干渉およびステートレスな関数(アキュムレータ関数と互換性がなければいけない)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>参考</p>\n<p>https://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Stream.html#reduce-U-java.util.function.BiFunction-java.util.function.BinaryOperator-</p>\n<p>https://qiita.com/megmogmog1965/items/c9cf8639fc40c63b0e0a</p>\n<ul>\n<li>reduceは途中の計算結果をパイプラインに流す\n<ul>\n<li>item.priceの合計の途中結果をcombinerがマージする</li>\n<li>この場合戻り値の型が、入力の型と異なるようにできる</li>\n</ul>\n</li>\n</ul>\n<h2>collectとCollectors</h2>\n<p>Streamの終端処理としてcollectがあります。最終的にリスト型にして返却したいなどの場合に、Collectorsとセットで使えます。</p>\n<p>私がよくやるマッピング処理</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDto</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> lank<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lank <span class=\"token operator\">=</span> lank<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> lank<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lank <span class=\"token operator\">=</span> lank<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDto</span> <span class=\"token function\">toDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDto</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span>lank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDtoMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// リポジトリなどからUserのエンティティを取得する</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"御坂美琴\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白井黒子\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"湾内絹保\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserDto</span><span class=\"token punctuation\">></span></span> userDtos <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">toDto</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/1936/3.png\" alt=\"画像\"></p>\n<h2>参考書籍</h2>\n<p>改訂2版　パーフェクトJava</p>","slug":"p1936"},"__N_SSG":true}