{"pageProps":{"frontMatter":{"title":"Java | スレッド","date":"2022.04.19","description":"Java | スレッド","categories":["Java"]},"content":"<p>今回はスレッドの作成に重点を置いて勉強します。</p>\n<h2>スレッド</h2>\n<ul>\n<li>Javaプログラムは最初に1つのスレッドを持つ\n<ul>\n<li>開発者が存在を検知できないバックグラウンドのスレッドを除く</li>\n</ul>\n</li>\n<li>新しいスレッドを作成するプログラムをマルチスレッドと呼ぶ</li>\n<li>スレッドがCPUコア数以上の場合タイムスライスという動作をする\n<ul>\n<li>タイムスライスとは一定時間実行した後に別のスレッドに実行を譲る動作</li>\n<li>短い時間で実行を切り替えるために並行動作するように見える</li>\n</ul>\n</li>\n<li>実行中のスレッド側は突然処理が割り込まれて処理が停止する。\n<ul>\n<li>プリエンプションという</li>\n</ul>\n</li>\n<li>新しいスレッドは、スレッド生成時に指定したメソッドから実行開始する</li>\n<li>変数の値を複数スレッドが同時に更新すると不整合が発生する\n<ul>\n<li>防ぐ手段同期処理（高難易度）排他制御\n<ul>\n<li>同期処理（高難易度）</li>\n<li>排他制御</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>スレッドの横取りが起きないことが保証されている操作をアトミックな操作と呼ぶ\n<ul>\n<li>ロックをかけることで横取りによる不整合を防ぐ</li>\n</ul>\n</li>\n</ul>\n<p>大事なことはマルチスレッドから呼ばれても問題のないコードを書く技術</p>\n<h2>Runnableインターフェース</h2>\n<p>Thread生成時にはRunnableオブジェクトを渡し、runメソッドがエントリポイントとして実行されます。Runnableはインターフェースなので実装クラスが必要になりますが、@FunctionalInterfaceがついた関数型インターフェースなので、ラムダ式で引数無し戻り値無しの関数を渡すこともできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * When an object implementing interface <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token class-name\">Runnable</span></span></span><span class=\"token punctuation\">}</span> is used\n     * to create a thread, starting the thread causes the object's\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">run</span></span><span class=\"token punctuation\">}</span> method to be called in that separately executing\n     * thread.\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>\n     * The general contract of the method <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">run</span></span><span class=\"token punctuation\">}</span> is that it may\n     * take any action whatsoever.\n     *\n     * <span class=\"token keyword\">@see</span>     <span class=\"token reference\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\n\t <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"処理開始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Callableインターフェース</h2>\n<p>Runnableのrunは戻り値がありませんが、Callableインターフェースを利用することで戻り値を利用できます（スレッドが値を返す  =スレッドの実行結果を取得できる)</p>\n<p>Callableも関数型インターフェースなのでわざわざ実装クラスを作る必要はありません</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * Computes a result, or throws an exception if unable to do so.\n     *\n     * <span class=\"token keyword\">@return</span> computed result\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">Exception</span></span> if unable to compute a result\n     */</span>\n    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Thread生成時にはRunnableを利用しましたが引数にマッチしません。CallableはFutureTaskや、スレッドプールとして使えるExecutorsと合わせて利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ExecutorsはnewFixedThreadPoolメソッドでExecutorServiceを取得します。submitメソッドでcallableインターフェースを渡してタスクの結果をFutureに返し、getメソッドで結果を取得します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">　　<span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> f <span class=\"token operator\">=</span> executor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">execute\r\r\nsubmit</code></pre></div>\n<h2>同期処理について</h2>\n<p><a href=\"/posts/p1147\">リンク</a></p>\n<p><a href=\"/posts/p1212\">リンク</a></p>\n<p><a href=\"/posts/p854\">リンク</a></p>\n<h2>参考書籍</h2>\n<p>改訂2版　パーフェクトJava</p>","slug":"p2175"},"__N_SSG":true}