{"pageProps":{"frontMatter":{"title":"Java | Mockitoでモックする","date":"2022.03.25","description":"Java | Mockitoでモックする","categories":["Java"]},"content":"<p>Mockitoは仕事で初めて使った時に、他人の作ったテストコードを見て真似て使っていました。真似して使って感覚が掴めれば、ある程度使えるようになるので、覚えやすいと思います。</p>\n<h2>利用準備</h2>\n<p>gradleを使っています。依存に以下があれば利用できます</p>\n<div class=\"remark-highlight\"><pre class=\"language-JSON\"><code class=\"language-JSON\">dependencies {\n\ttestImplementation &#x26;#39;org.springframework.boot:spring-boot-starter-test&#x26;#39;\n}</code></pre></div>\n<h2>手順</h2>\n<p>利用までの手順</p>\n<ul>\n<li>モックする\n<ul>\n<li>モック化の方法mockメソッドの利用@Mockアノテーションの利用</li>\n<li>@InjectMocksでテスト対象にインジェクトする\n<ul>\n<li>mockメソッドの利用</li>\n<li>@Mockアノテーションの利用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>初期化\n<ul>\n<li>@BeforeEachアノテーションをつけるとテスト前に呼ばれるメソッドを定義できるMockitoAnnotations.openMocks(this);古い書き方（非推奨）MockitoAnnotations.initMocks(this);\n<ul>\n<li>MockitoAnnotations.openMocks(this);古い書き方（非推奨）MockitoAnnotations.initMocks(this);</li>\n<li>古い書き方（非推奨）</li>\n<li>MockitoAnnotations.initMocks(this);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>モック</h2>\n<ul>\n<li>whenメソッドでモックのメソッドが呼ばれた時の挙動を定義できる\n<ul>\n<li>引数にはany()やanyInt()を使うと便利</li>\n<li>thenReturnでメソッドの戻り値を設定</li>\n</ul>\n</li>\n<li>verifyメソッドで、メソッドが呼ばれた回数を検証できる\n<ul>\n<li>times(n)で回数を指定するtimes(1)の場合は省略可能\n<ul>\n<li>times(1)の場合は省略可能</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>サンプル</h2>\n<p>今回のテスト対象となるサービスクラス</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GachaServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GachaService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDataRepository</span> userDataRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CharacterRepository</span> characterRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LogEventPublisher</span> logEventPublisher<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gachaType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">UserData</span> userData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userData<span class=\"token punctuation\">.</span><span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotEnoughException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> characters <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// TODO factory</span>\n        <span class=\"token class-name\">Gacha</span> gacha <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NormalGacha</span><span class=\"token punctuation\">(</span>characters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> gacha<span class=\"token punctuation\">.</span><span class=\"token function\">getCharaceters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CharacterDTOMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterDTOMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Event</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logEventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ガチャ石を利用しました。使用数 : \"</span><span class=\"token operator\">+</span> <span class=\"token number\">3000</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"使用ガチャ\"</span> <span class=\"token operator\">+</span> gachaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">toDTOList</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>今回のポイントはただ一つです</p>\n<ul>\n<li>依存しているリポジトリクラスをモックできること\n<ul>\n<li>依存先のクラスのメソッドの挙動は知っておく必要がありません</li>\n</ul>\n</li>\n</ul>\n<p>また以下をインポートしておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mockito<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mockito</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>モックの宣言と初期化</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// mock</span>\n<span class=\"token annotation punctuation\">@Mock</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDataRepository</span> userDataRepository<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Mock</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">LogEventPublisher</span> logEventPublisher<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// アノテーションを付けない場合はmockメソッドを呼びます</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">CharacterRepository</span> characterRepository <span class=\"token operator\">=</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharacterRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// モックをインジェクトする設定</span>\n<span class=\"token annotation punctuation\">@InjectMocks</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">GachaServiceImpl</span> gachaService<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初期化します</span>\n<span class=\"token annotation punctuation\">@BeforeEach</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">MockitoAnnotations</span><span class=\"token punctuation\">.</span><span class=\"token function\">openMocks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>振る舞いとテストコード取得したdtoに対して検証はしていません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// モックのメソッドが呼ばれた時、指定の戻り値を返す</span>\n        <span class=\"token comment\">// anyInt()は不特定の数値の引数</span>\n        <span class=\"token comment\">// 引数にintを取るメソッドはanyIntを使います</span>\n        <span class=\"token comment\">// thenReturnは戻り値</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">anyInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserData</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// any()はnull</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"御坂妹\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"劇場版御坂妹\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fuga\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ナース御坂妹\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hoga\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// voidのメソッドをモックする場合</span>\n        <span class=\"token function\">doNothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logEventPublisher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">></span></span> dto <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gachaService<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//　メソッドが呼ばれた回数を検証する</span>\n        <span class=\"token comment\">// 1回であること</span>\n        <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">,</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">anyInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// times(1)は省略可能</span>\n        <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>検証コードはないですが、dtoはCharacterRepository#getCharactersの結果が変換されています。</p>\n<p>もしもサービスクラスでリポジトリクラスをnewしていると、このようなモックを使うことができませんが、DIすることでこのようなモックへの差し替えも可能になります。</p>","slug":"p1720"},"__N_SSG":true}