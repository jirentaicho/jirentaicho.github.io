{"pageProps":{"frontMatter":{"title":"独習JavaScript | プロトタイプ","date":"2022.05.22","description":"独習JavaScript | プロトタイプ","categories":["JavaScript"]},"content":"<p>最近はJavaというかSpringが楽しすぎて偏っていたが「独習JavaScript 新版」という本を借りましたので、気になる章を読んでみました</p>\n<p>ちなみにこの本の著者のYouTubeはよく見てて、さらにUdemyの講座も買ってます。JavaScriptを動画で学ぶならこの人って感じですね</p>\n<p>今回はJavaScriptのプロトタイプについてです。プロトタイプについて知るにはそもそもJavaScriptの関数について知る必要があります。</p>\n<h1>環境</h1>\n<p>Visual Studio Codeの拡張機能”Live Server”を追加します</p>\n<p><img src=\"/2437/1.png\" alt=\"画像\"></p>\n<p>index.htmlを右クリックするとOpen with Live Serverの文字があるのでクリックする</p>\n<p><img src=\"/2437/2.png\" alt=\"画像\"></p>\n<p>ローカルサーバーが立ち上がる</p>\n<p><img src=\"/2437/3.png\" alt=\"画像\"></p>\n<p>実はこのLive Server知りませんでした。。</p>\n<h2>プロトタイプの前に</h2>\n<ul>\n<li>https://www.tohoho-web.com/js/function.htm</li>\n<li>https://www.tohoho-web.com/js/class.htm</li>\n<li>https://www.tohoho-web.com/js/object.htm</li>\n</ul>\n<h3>関数はオブジェクト</h3>\n<p>JavaScriptの関数はオブジェクトです。非常に気味が悪いというか、、、わかりづらいですよね。ただし{}のオブジェクトと違う点は()で実行可能であるところです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">l</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> misaka <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mikoto\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sirai</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"kuroko\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sirai</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// kuroko</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">misaka</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: misaka is not a function</span>\n</code></pre></div>\n<p>関数がオブジェクトであれば、関数を定義することもプロパティを定義することも可能です</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 関数を定義する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSlip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"伝票\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getSlip<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 関数オブジェクトを表示する</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSlip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 関数オブジェクトの関数を実行した結果を表示する</span>\n<span class=\"token comment\">// >> 伝票</span>\n\n<span class=\"token comment\">// 関数オブジェクトに対してgetExSlipという新しい関数を定義する</span>\ngetSlip<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">getExSlip</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"拡張伝票\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ngetSlip<span class=\"token punctuation\">.</span><span class=\"token property-access\">customer</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"〇〇株式会社\"</span> <span class=\"token comment\">// 関数オブジェクトにプロパティを設定する</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getSlip<span class=\"token punctuation\">.</span><span class=\"token property-access\">getExSlip</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 関数オブジェクトに定義された関数オブジェクトを表示する</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getSlip<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getExSlip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 関数オブジェクトに定義された関数オブジェクトの関数を実行した結果を表示する</span>\n<span class=\"token comment\">// >> 拡張伝票</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getSlip<span class=\"token punctuation\">.</span><span class=\"token property-access\">customer</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 関数オブジェクトのプロパティを表示する</span>\n<span class=\"token comment\">// >> 〇〇株式会社</span>\n</code></pre></div>\n<p><img src=\"/2437/4.png\" alt=\"画像\"></p>\n<p>実行可能であること以外、本当にオブジェクトと同じであることが確認できました。これがその大昔に関数を使ってクラスを再現していたと言われる所以でしょうか。。</p>\n<h3>コンストラクタ</h3>\n<p>関数に対してnew演算子を利用することでコンストラクタ関数にすることができます。classのconstructorと同様の動きをする。</p>\n<p>コンストラクタは新しいオブジェクトの生成を行います</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//クラスのコンストラクタ</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slip</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//コンストラクタ関数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">SlipFunction</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SlipFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受注\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 受注</span>\n<span class=\"token keyword\">const</span> sales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"売上\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 売上</span>\n<span class=\"token comment\">// どちらのthisもオブジェクトのインスタンスを参照する</span>\n<span class=\"token maybe-class-name\">SlipFunction</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">temp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ほげ\"</span>\n<span class=\"token maybe-class-name\">SlipFunction</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">fuga</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"fuga\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token property-access\">temp</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined このインスタンスにはないプロパティを参照</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SlipFunction</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">temp</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ほげ</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SlipFunction</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fuga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// fuga</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fuga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error [ Uncaught TypeError: accept.fuga is not a function ] このインスタンスにはないメソッドを実行</span>\n</code></pre></div>\n<ul>\n<li>newして新しいインスタンスを生成している\n<ul>\n<li>あとから関数オブジェクトにプロパティや関数を定義しても、インスタンスからはアクセスできません</li>\n</ul>\n</li>\n</ul>\n<p>ちなみに、オブジェクトを生成する{}はnew Objectを簡略化したものです。</p>\n<h2>プロトタイプ</h2>\n<p>本題のプロトタイプについて見ていきます。</p>\n<p>MDNにはプロトタイプについてこう書いてあります</p>\n<p>また、Noteエリアにも重要なことが書かれています。</p>\n<p>また後で確認していきます。</p>\n<p>まずはプロトタイプの特徴を見ていきます。</p>\n<h3>関数オブジェクトに保持される特別なオブジェクト</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 普通のオブジェクト</span>\n<span class=\"token keyword\">const</span> hoge <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 関数オブジェクト</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span> <span class=\"token keyword\">in</span> hoge<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span> <span class=\"token keyword\">in</span> func<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>普通のオブジェクトとして定義したhogeにはprototypeがないことがわかります。関数オブジェクト特有のオブジェクトであることがわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><img src=\"/2437/5.png\" alt=\"画像\"></p>\n<p>またconstructorという関数を持っていることがわかります。</p>\n<h3>関数をプロトタイプに定義して利用する</h3>\n<p>プロトタイプに定義された関数はインスタンス(newしたオブジェクト)から実行可能なメソッドになる</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// コンストラクタのとこでも見たように、thisを設定することでインスタンスの変数として定義できる</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Slip</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// プロトタイプに定義する関数はオブジェクトから実行可能</span>\n<span class=\"token class-name\">Slip</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">getSlipName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//　これはダメ</span>\n<span class=\"token maybe-class-name\">Slip</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">setSlipName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">新しい名前</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受注\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> sales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"売上\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSlipName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//受注</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSlipName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//売上</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setSlipName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受注赤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ncaught TypeError: accept.setSlipName is not a function</span>\n</code></pre></div>\n<ul>\n<li>プロトタイプに定義した関数は、インスタンス化したオブジェクトからメソッドとして利用可能になっている</li>\n<li>クラスのメソッドと一緒</li>\n</ul>\n<h3>__proto__に参照がコピーされる</h3>\n<p>オブジェクトをインスタンス化した時には、__proto__というオブジェクトに関数オブジェクトのprototypeに格納されているオブジェクトへの参照がコピーされる。また__protp__は省略可能である。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Slip</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// プロトタイプに定義する関数はオブジェクトから実行可能</span>\n<span class=\"token class-name\">Slip</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">getSlipName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受注\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> accept<span class=\"token punctuation\">.</span><span class=\"token property-access\">__proto__</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p><img src=\"/2437/6.png\" alt=\"画像\"></p>\n<ul>\n<li>関数オブジェクトにはprototypeというオブジェクトが付与される</li>\n<li>インスタンスには__proto__というオブジェクトが付与され、それはprototypeへの参照である</li>\n<li>[[Prototype]]は隠しプロパティで、この隠しプロパティへのアクセス方法が__protp__です\n<ul>\n<li>そしてこれはprototypeへの参照です</li>\n</ul>\n</li>\n</ul>\n<h3>クラスで定義されているメソッドの書き換え</h3>\n<p>クラスで定義されているメソッドを上書きしたり、メソッドを追加したりすることもできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">l</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">です</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// メソッドの上書き</span>\n<span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">call</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"BAD\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// メソッドの追加</span>\n<span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"追加されたメソッドです\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> human <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// BAD</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">__proto__</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// BAD</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 追加されたメソッドです</span>\n</code></pre></div>\n<p>Humanクラスというのも関数オブジェクトであると考えれば理解できます。JavaScriptはプロトタイプベースと呼ばれ、classというのはただのシンタックスシュガーであるということですね。</p>\n<h2>継承</h2>\n<p>まずはObject.createメソッドについて確認します。</p>\n<p>https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create</p>\n<p>https://qiita.com/yoshiwatanabe/items/338705a20e8475e4057e</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 既存のオブジェクト</span>\n<span class=\"token keyword\">const</span> validation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">vaild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"必須項目が入力されていません\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> emailValidation <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>validation<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emailValidation<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emailValidation<span class=\"token punctuation\">.</span><span class=\"token property-access\">__proto__</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 必須項目が入力されていません</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emailValidation<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 必須項目が入力されていません</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">emailValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//　error is not a function</span>\n</code></pre></div>\n<p><img src=\"/2437/7.png\" alt=\"画像\"></p>\n<ul>\n<li>emailValidationのプロトタイプにはvalidationへの参照が設定されています</li>\n<li>emailValidationはgetMessageなどのメソッドを持っていませんが、prototypeへの参照を辿ってgetMessageにアクセスします。</li>\n<li>他のオブジェクトの機能を引き継いでいるのでこれを</li>\n</ul>\n<h3>プロトタイプ継承</h3>\n<p>他の関数オブジェクトのprototypeを継承することをプロトタイプ継承といいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">function <span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfunction <span class=\"token function\">htmlEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nemail<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>send <span class=\"token operator\">=</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"メッセージを送信しました\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// emailのプロトタイプを継承する</span>\nhtmlEmail<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n\nhtmlEmail<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toHtml <span class=\"token operator\">=</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"HTMLに変換しました\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> htmlEmailer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">htmlEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>htmlEmailer<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>htmlEmailer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><img src=\"/2437/8.png\" alt=\"画像\"></p>\n<p>プロトタイプが他のプロトタイプを参照している形になっています。</p>\n<h3>プロトタイプチェーン</h3>\n<p>このようにプロトタイプが他のプロトタイプを参照していくことをプロトタイプチェーンといいます。</p>\n<p>プロトタイプの動きはクラスの動きによく似ています。これこそが大昔に関数を使ってクラスを模倣していたと言われる所以なのですね。</p>\n<h2>プロトタイプを振り返る</h2>\n<p>最後に、もう一度MDNの説明を振り返ってみます。</p>\n<ul>\n<li>オブジェクトの prototypeはインスタンス上のプロパティ\n<ul>\n<li>newしたインスタンス側が使うプロトタイプ、つまり__proto__で参照できるプロトタイプのこと</li>\n</ul>\n</li>\n<li>コンストラクタ関数のprototype プロパティはコンストラクタ上のプロパティ\n<ul>\n<li>各インスタンスから参照されるプロトタイプ</li>\n<li>関数オブジェクトに対して定義されるプロトタイプ</li>\n</ul>\n</li>\n</ul>\n<p>みたいな感じですかね。</p>\n<p>通常コンストラクタとする関数にはパスカルケースを使います。ただし今回はコンストラクタ関数という特別な関数があるわけでなく、関数はオブジェクトであるということを前面に押し出すために、それに沿わずに関数を定義しています。</p>\n<h4>その他参考</h4>\n<ul>\n<li>JavaScriptのプロトタイプ：prototypeプロパティ</li>\n<li>javascriptでメソッドを定義する際にprototypeを使う理由を教えて下さい</li>\n<li>プロトタイプ継承</li>\n</ul>","slug":"p2437"},"__N_SSG":true}