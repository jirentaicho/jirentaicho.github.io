{"pageProps":{"frontMatter":{"title":"Springbootで排他制御を読む","date":"2021.12.09","description":"Springbootで排他制御を読む","categories":["Spring"]},"content":"<p>参考書籍のリーディングになります。</p>\n<p>参考：https://github.com/miyabayt/spring-boot-doma2-sample</p>\n<p>今回の内容は検証を行っていません。参照書を読んでメモを残しています。</p>\n<h2>楽観的排他制御</h2>\n<p>参考書籍で言ってる内容が全く理解できなかったです。。。</p>\n<p>Userクラスの親クラスであるDomaDtoImplクラスでは、@Versionアノテーションを持ったフィールドがありますので、取得時にバージョン番号フィールドも取得します。</p>\n<p>ここまでいいのですがこの後</p>\n<p>「データ更新処理時にバージョン番号をセットしたエンティティをメソッドの引数に渡すだけで、更新されたデータの件数が０件である場合は排他エラー」</p>\n<p>のようにあるのですが、そんなことしてる？データ更新処理っていうのは</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/edit/{userId}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">editUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Validated</span> <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userForm\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">UserForm</span> form<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BindingResult</span> br<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SessionStatus</span> sessionStatus<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedirectAttributes</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n</code></pre></div>\n<p>だと思うのですが、エンティティって渡してますか？</p>\n<p>そしてここを読む</p>\n<p>そして理解した。あ、更新処理ってここかと</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 1件更新</span>\n<span class=\"token keyword\">int</span> updated <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>inputUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コントローラーのソースを見せていたので、てっきり更新処理ってコントローラーの更新処理だと思っていました。(aho)</p>\n<p>この時にversionを持ったエンティティを渡すと自動的にdomaで楽観的排他を行ってくれるそうです。</p>\n<p>ちなみにversionをどうやって取得するかというと@SessionAttributesを使うそうです。</p>\n<p>UserFormが継承しているBaseFormクラスは以下のように改定番号を持っています @SessionAttributesを使うことで指定した（今回であればUserFormクラス）はセッションとして情報が保持されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 改定番号</span>\n<span class=\"token class-name\">Integer</span> version<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>編集画面の初期表示処理で以下のように取得したDtoをFormに詰め込んでいるのですが、ここでversionがformに渡されて編集処理を行うまでこのversion情報をセッションにて管理できる。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// セッションから取得できる場合は、読み込み直さない</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 1件取得する</span>\n    val user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 取得したDtoをFromに詰め替える</span>\n    modelMapper<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>実際の更新処理ではformの値をDtoに書き換えを行う</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 更新対象を取得する</span>\nval user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 入力値を詰め替える</span>\nmodelMapper<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これで編集画面を表示した時に取得したversion番号を、更新処理で利用するdtoに設定できます。</p>\n<p>参考サイトのDaoインターフェースを見ると@Updateのようなアノテーションがあり、引数の@Entityを持つクラスに紐づくテーブルを更新できるのでしょうね。参考</p>\n<p>jpaではインターフェースを継承したインターフェースを生成すればある程度のメソッドが利用できましたが、ジェネリックなDaoクラスを作ればもっと便利に使えそう？と思いました。</p>\n<p>ここまでフレームワークがやってくれると便利ですがなんか不安になりますね。。。</p>\n<h2>悲観的排他制御</h2>\n<p>行ロックを使う方法。行ロックとは、行ロックだそうです。</p>\n<p>ただ、こちらは物凄く簡単で例えば修正する前の検索処理にて、forUpdte()メソッドを利用してレコードを取得するだけで、行にロックがかかるそうです</p>\n<p>※ただし取得できるレコードがない場合は、テーブルロックになってしまうので要注意。これは実装はなくドキュメントとして存在しています。</p>\n<p>データベース初心者で申し訳ない。select for updateというのがあるんですね。</p>\n<p>ちなみにJPAでも同じように手軽に利用できるようです。</p>\n<h2>select for update</h2>\n<p>せっかく出てきたので少し調べてみます。</p>\n<p>Postgreで行った例が出てきたので真似してやってみます。（参考サイトはwhereが間違っているので実行時は注意してください)</p>\n<p>コマンドラインから入るには以下のコマンド</p>\n<p>トランザクションを再確認しつつ見ていきます。ログを載せます。昔は金融系の現場でSQL流す際によくやっていたのですが、忘れつつあります。てか忘れてます。</p>\n<p>トランザクションを開始するにはBEGINを使ってCOMMITで終了します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">misaka<span class=\"token operator\">=</span><span class=\"token comment\"># select * from lockman;</span>\n id <span class=\"token operator\">|</span>     name\n<span class=\"token comment\">----+--------------</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> 澁谷かのん\n  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> 唐可可\n  <span class=\"token number\">3</span> <span class=\"token operator\">|</span> 平安名すみれ\n  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> 嵐千砂都\n  <span class=\"token number\">5</span> <span class=\"token operator\">|</span> 葉月恋\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">)</span>\n\nmisaka<span class=\"token operator\">=</span><span class=\"token comment\"># commit;</span>\nWARNING:  there <span class=\"token operator\">is</span> <span class=\"token keyword\">no</span> <span class=\"token keyword\">transaction</span> <span class=\"token operator\">in</span> progress\n<span class=\"token keyword\">COMMIT</span>\nmisaka<span class=\"token operator\">=</span><span class=\"token comment\"># begin</span>\nmisaka<span class=\"token operator\">-</span><span class=\"token comment\"># ;</span>\n<span class=\"token keyword\">BEGIN</span>\nmisaka<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token comment\">#</span>\nmisaka<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token comment\"># commit;l</span>\n<span class=\"token keyword\">COMMIT</span>\nmisaka<span class=\"token operator\">-</span><span class=\"token comment\">#</span>\n</code></pre></div>\n<p>基本操作はわかったので早速forupdateを利用してみます。idが4のレコードをfor updateで取得してみました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">misaka<span class=\"token operator\">=</span><span class=\"token comment\"># begin;</span>\n<span class=\"token keyword\">BEGIN</span>\nmisaka<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token comment\"># select * from lockman where id = '4' for update;</span>\n id <span class=\"token operator\">|</span>   name\n<span class=\"token comment\">----+----------</span>\n  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> 嵐千砂都\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">row</span><span class=\"token punctuation\">)</span>\n\n</code></pre></div>\n<p>もう一つのコマンドラインから同じレコードを取得してみます。なんと処理が止まっています。</p>\n<p><img src=\"/535/1.png\" alt=\"画像\"></p>\n<p>ちゃんとロックされていますね。commitしてみると結果が表示されました。</p>\n<p><img src=\"/535/2.png\" alt=\"画像\"></p>\n<p>ちなみにfor updateを利用しない場合は結果を待たずにレコードが取得できます。</p>\n<p>行ロックなので別の行は取得できます</p>\n<p><img src=\"/535/3.png\" alt=\"画像\"></p>\n<p>次にテーブルロックを試します。一方のトランザクションでテーブルをロックすると、もう一方のトランザクションではテーブルのレコードを何も取得できません。</p>\n<p><img src=\"/535/4.png\" alt=\"画像\"></p>\n<p>コミットすると結果が取得されました。</p>\n<p><img src=\"/535/5.png\" alt=\"画像\"></p>\n<p>domaで排他制御を行うときにレコードが取得できない場合はこの、lock tableがかかるということですね。</p>","slug":"p535"},"__N_SSG":true}