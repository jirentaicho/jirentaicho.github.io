{"pageProps":{"frontMatter":{"title":"Spring | ApplicationContextを使う","date":"2022.05.14","description":"Spring | ApplicationContextを使う","categories":["Spring"]},"content":"<p>ApplicationContextは、BeanFactoryを拡張したもので、以下のような機能がBeanFactoryに追加されている。</p>\n<ul>\n<li>Bean定義の読み込み</li>\n<li>メッセージソース</li>\n<li>イベント処理</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApplicationContext</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnvironmentCapable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListableBeanFactory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HierarchicalBeanFactory</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">MessageSource</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationEventPublisher</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourcePatternResolver</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">getApplicationName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">getStartupDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token class-name\">ApplicationContext</span> <span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">AutowireCapableBeanFactory</span> <span class=\"token function\">getAutowireCapableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>MessageSource</li>\n<li>ApplicationEventPublisher</li>\n</ul>\n<h2>@Autowiredでインジェクションする</h2>\n<p>以下のように利用できます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleController</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SampleUsecase</span> sampleUsecase<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hoge\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//System.out.println(sampleUsecase.get());</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sampleUsecase<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleUsecase</span> usecase <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SampleUsecase</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>usecase<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"huga\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>@AutowiredでApplicationContextをインジェクションする</li>\n<li>getBeanにてDIコンテナからインスタンスを取得できる</li>\n</ul>\n<h2>MessageSource</h2>\n<p>ApplicationContextからメッセージを取得する方法</p>\n<ul>\n<li>getMessageメソッドの利用</li>\n<li>MessageRource型オブジェクトを@Autowiredでインジェクションする</li>\n</ul>\n<p>例えば、現在messages.propertiesというファイルがあります。</p>\n<p><img src=\"/2291/1.png\" alt=\"画像\"></p>\n<p>ここにusernameというkeyで引数無しのメッセージが定義されています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleController</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SampleUsecase</span> sampleUsecase<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hoge\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"huga\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>ApplicationContext#getMessageにて定義済のメッセージを取得する</li>\n</ul>\n<h2>ApplicationEventPublisher</h2>\n<p>ApplicationContextが発生したイベントに対して、Bean化したApplicationListenerの実装クラスでキャッチすることができます。</p>\n<p>https://www.techscore.com/tech/Java/Others/Spring/4-3/</p>\n<p>https://spring.pleiades.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationListener.html</p>\n<p>ApplicationContextがデフォルトで５つのイベントを用意している</p>\n<ul>\n<li>ContextRefreshedEvent\n<ul>\n<li>Beanライフサイクルの初期化状態後に発生</li>\n</ul>\n</li>\n<li>ContextStartedEvent\n<ul>\n<li>ApplicationContextがスタートしたとき</li>\n</ul>\n</li>\n<li>ContextStoppedEvent\n<ul>\n<li>ApplicationContextがストップしたとき</li>\n</ul>\n</li>\n<li>ContextClosedEvent\n<ul>\n<li>ApplicationContext#closedメソッドが呼ばれた時</li>\n</ul>\n</li>\n<li>RequestHandledEvent\n<ul>\n<li>HTTPリクエストによってサービスが呼ばれた時に発火</li>\n</ul>\n</li>\n</ul>\n<p>ApplicationContextEventを継承している</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serial\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextRefreshedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationContextEvent</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Create a new ContextRefreshedEvent.\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">source</span> the <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token class-name\">ApplicationContext</span></span></span><span class=\"token punctuation\">}</span> that has been initialized\n\t * or refreshed (must not be <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token keyword\">null</span></span></span><span class=\"token punctuation\">}</span>)\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ContextRefreshedEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>例えば以下のようにしてApplicationContextのイベントを検知できます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomEventListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ContextRefreshedEvent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ContextRefreshed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RequestHandledEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTPリクエストの受信\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>@Componentで必ずBean管理しておきます</li>\n</ul>\n<p>HTTPリクエストを送る</p>\n<p><img src=\"/2291/2.png\" alt=\"画像\"></p>\n<p>独自のタイミングで独自のイベントを発火させるにはpublishEventメソッドを利用します。ContextRefreshedEventと同じようにApplicationContextEventを継承して独自のイベントを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContextEvent</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serial\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationContextEvent</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"話は聞きました。ようやく出番のようですね。と、ミサカは絶妙なタイミングで登場します。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このイベントをApplicationContextを利用して発火します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleController</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SampleUsecase</span> sampleUsecase<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hoge\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyEvent</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"huga\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/2291/3.png\" alt=\"画像\"></p>\n<h2>参考</h2>\n<p>［改訂新版］Spring入門 ――Javaフレームワーク・より良い設計とアーキテクチャ</p>","slug":"p2291"},"__N_SSG":true}