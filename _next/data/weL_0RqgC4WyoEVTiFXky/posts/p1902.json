{"pageProps":{"frontMatter":{"title":"アルゴリズムの勉強１","date":"2022.04.05","description":"アルゴリズムの勉強１","categories":["アルゴリズム"]},"content":"<p>現場で「このアルゴリズムを使え」ってのは言われたことが無いですが、、、</p>\n<h2>探索</h2>\n<ul>\n<li>線形探索\n<ul>\n<li>直線状に並んだ要素から、目的のキーに出会うまで最初から順番に走査する</li>\n<li>逐次探索ともいう</li>\n<li>終了条件要素が発見できない要素が発見できた</li>\n<li>番兵法検索するデータの末尾に検索キーと同じ値を格納する線形探索を行う必ず要素が見つかるので以下のメリットがある終了条件は「要素が発見できた」のみになるただし見つかった要素が番兵なのかどうかチェックする必要がある\n<ul>\n<li>要素が発見できない</li>\n<li>要素が発見できた</li>\n<li>検索するデータの末尾に検索キーと同じ値を格納する</li>\n<li>線形探索を行う必ず要素が見つかるので以下のメリットがある終了条件は「要素が発見できた」のみになるただし見つかった要素が番兵なのかどうかチェックする必要がある</li>\n<li>必ず要素が見つかるので以下のメリットがある終了条件は「要素が発見できた」のみになるただし見つかった要素が番兵なのかどうかチェックする必要がある</li>\n<li>終了条件は「要素が発見できた」のみになる</li>\n<li>ただし見つかった要素が番兵なのかどうかチェックする必要がある</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2分探索\n<ul>\n<li>昇順や降順など規則的に並んだデータに対して使える</li>\n<li>考え方探索対象のデータから、中央値を取得する(対象データを2つに分ける)目的のキーの値が中央値より大きいか小さいかで分けたデータの一方を探索対象にするまた同じように中央値を取得して、データを2つに分けて探索をするを繰り返す</li>\n<li>終了条件探索キーの値と、中央値が一致する探索範囲がなくなる</li>\n<li>2分探索はArrays.binarySerachで提供されている以下の変数を更新していって検索する探索範囲先頭のインデックス末尾のインデックス\n<ul>\n<li>探索対象のデータから、中央値を取得する(対象データを2つに分ける)</li>\n<li>目的のキーの値が中央値より大きいか小さいかで分けたデータの一方を探索対象にする</li>\n<li>また同じように中央値を取得して、データを2つに分けて探索をするを繰り返す</li>\n<li>探索キーの値と、中央値が一致する</li>\n<li>探索範囲がなくなる</li>\n<li>以下の変数を更新していって検索する探索範囲先頭のインデックス末尾のインデックス</li>\n<li>探索範囲先頭のインデックス</li>\n<li>末尾のインデックス</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ハッシュ法\n<ul>\n<li>探索に加えてデータの追加削除を効率よく行う方法</li>\n<li>値と要素数から剰余を算出する</li>\n<li>剰余をインデックス値として配列にアクセスする</li>\n</ul>\n</li>\n<li>衝突とは\n<ul>\n<li>データ追加にて18を追加したい剰余の6を取得する6には既に値が格納されている。という状態のこと\n<ul>\n<li>18を追加したい剰余の6を取得する6には既に値が格納されている。という状態のこと</li>\n<li>剰余の6を取得する6には既に値が格納されている。という状態のこと</li>\n<li>6には既に値が格納されている。という状態のこと</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>衝突時の解決法\n<ul>\n<li>チェイン法同一のハッシュ値をもつ要素を線形リストで管理する</li>\n<li>オープンアドレス法空きバケットが見つかるまでハッシュを繰り返す\n<ul>\n<li>同一のハッシュ値をもつ要素を線形リストで管理する</li>\n<li>空きバケットが見つかるまでハッシュを繰り返す</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>2分探索コード(Arrays.binarySerach)</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> toIndex<span class=\"token punctuation\">,</span>\n                                     <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> fromIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> toIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&#x3C;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> midVal <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midVal <span class=\"token operator\">&#x3C;</span> key<span class=\"token punctuation\">)</span>\n                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midVal <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span>\n                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// key found</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// key not found.</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>中央値と比べて以下のいずれかを選択してループする※中央値の値によって先頭か末尾を更新し続けるだけ</p>\n<ul>\n<li>先頭インデックスを中央値＋1にする</li>\n<li>末端インデックスを中央値－1にする</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midVal <span class=\"token operator\">&#x3C;</span> key<span class=\"token punctuation\">)</span>\n    low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midVal <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span>\n    high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Arrays.binarySerachの利用サンプル</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> reuslt <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>\n<span class=\"token comment\">// 2</span>\n</code></pre></div>\n<h2>スタックキュー</h2>\n<ul>\n<li>スタック\n<ul>\n<li>最後に入れたデータが最初に取り出される</li>\n</ul>\n</li>\n<li>キュー\n<ul>\n<li>最初に入れたデータが最初に取り出される</li>\n</ul>\n</li>\n<li>プッシュ\n<ul>\n<li>データを入れる</li>\n</ul>\n</li>\n<li>ポップ\n<ul>\n<li>データを取り出す</li>\n</ul>\n</li>\n</ul>\n<h2>再帰</h2>\n<p>再帰的アルゴリズムを利用</p>\n<ul>\n<li>マージソート</li>\n<li>クイックソート</li>\n<li>2分探索木</li>\n</ul>\n<p>階乗値の計算</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 24</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 再帰呼出し</span>\n            <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 終了条件</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>考え方</p>\n<ul>\n<li>factorial(4)</li>\n<li>4 * factorial(3)\n<ul>\n<li>factorial(3)</li>\n<li>3 * factorial(2)factorial(2)2 * factorial(1)factorial(1)1 * factorial(0)return 1;return 1 * factorial(0) →　1 * 1return 2 * factorial(1) →　2 * 1</li>\n<li>return 3 * factorial(2) →　3 * 2\n<ul>\n<li>factorial(2)</li>\n<li>2 * factorial(1)factorial(1)1 * factorial(0)return 1;return 1 * factorial(0) →　1 * 1</li>\n<li>return 2 * factorial(1) →　2 * 1</li>\n<li>factorial(1)</li>\n<li>1 * factorial(0)return 1;</li>\n<li>return 1 * factorial(0) →　1 * 1</li>\n<li>return 1;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>return 4 * factorial(3) →　4 * 6</li>\n</ul>\n<p>→ 4 * 3 * 2 * 1</p>\n<h3>ハノイの塔</h3>\n<p>ハノイの塔とは</p>\n<p>https://www.p-game.jp/game237/</p>\n<ul>\n<li>中間軸の出し方\n<ul>\n<li>軸番号1,2,3の合計6を起点に、6-x-y</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ハノイの塔</span>\n    <span class=\"token comment\">// no枚の円盤をxからyに移動する</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>no <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>no <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"円盤[%d]を%d軸から%d軸へ移動する\\n\"</span><span class=\"token punctuation\">,</span> no<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>no <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>no <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">円盤[1]を1軸から3軸へ移動する\n円盤[2]を1軸から2軸へ移動する\n円盤[1]を3軸から2軸へ移動する\n円盤[3]を1軸から3軸へ移動する\n円盤[1]を2軸から1軸へ移動する\n円盤[2]を2軸から3軸へ移動する\n円盤[1]を1軸から3軸へ移動する\n</code></pre></div>\n<h2>ソート</h2>\n<ul>\n<li>単純交換ソート(バブルソート)\n<ul>\n<li>先頭から昇順ソートする場合1つ後ろの値と比較して大きい場合は入れ替える\n<ul>\n<li>1つ後ろの値と比較して大きい場合は入れ替える</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testman</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> i <span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>クイックソート\n<ul>\n<li>基準となる値を設定する</li>\n<li>基準値より小さいグループと大きいグループにわけるそれぞれのグループで基準値を決める基準値より小さいグループと大きいグループに分ける繰り返し</li>\n<li>この繰り返しは再帰呼出しを行います\n<ul>\n<li>それぞれのグループで基準値を決める</li>\n<li>基準値より小さいグループと大きいグループに分ける繰り返し</li>\n<li>繰り返し</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>配列の分割</h4>\n<ul>\n<li>基準値を決めて、基準値より前と後ろで基準値以上の値と以下の値で分割する\n<ul>\n<li>以下の場合、中央のインデックス値を基準値にする</li>\n<li>中央のイデックス値を起点に配列の分割を行うまだソートはされませんが、基準値起点で配列の大小分割される\n<ul>\n<li>まだソートはされませんが、基準値起点で配列の大小分割される</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pivot = 9</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// クイックソート(未完成)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> leftCursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightCursor <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 基準値</span>\n        <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">+</span> rightCursor<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//中央の要素</span>\n\n        <span class=\"token comment\">// 左右のカーソルが交差したら終了</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">&#x3C;=</span> rightCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 配列の前から走査する</span>\n            <span class=\"token comment\">// 配列の前から、基準値より大きい要素を発見する</span>\n            <span class=\"token comment\">//  → (大きい要素に当たるまで繰り返しています)</span>\n            <span class=\"token comment\">// 発見した要素を特定するためにleftCursorをインクリメントする（その要素が格納されたインデックス値にする）</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>leftCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> pivot<span class=\"token punctuation\">)</span> leftCursor<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 配列の後ろから走査する</span>\n            <span class=\"token comment\">// 配列の後ろから、基準値より小さい要素を発見する</span>\n            <span class=\"token comment\">// 　→ (小さい要素に当たる前で繰り返しています)</span>\n            <span class=\"token comment\">// 発見した要素を特定するためにrightCursorをデクリメントする(その要素が格納されたインデックス値にする)</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>rightCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span> rightCursor<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// お互いのカーソルの位置から</span>\n            <span class=\"token comment\">//　例えば{3,4,8,5,35,7,8,6,9,0,1}の場合</span>\n            <span class=\"token comment\">// leftCursorは2 rightCursorは10です</span>\n            <span class=\"token comment\">//   8が7より大きい　1が7より小さい</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">&#x3C;=</span> rightCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 配列の値を交換する</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> leftCursor<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> rightCursor<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 入れ替えたらカーソルを進める</span>\n                <span class=\"token comment\">// 進めないと、whileの条件で抜けてループする</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 値の入れ替え</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/1902/1.png\" alt=\"画像\"></p>\n<p>基準値を起点に大小振り分けられていることがわかります。</p>\n<h4>再帰でソート</h4>\n<p>この処理を再帰的に繰り返せば完全なソートが完了します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pivot = 9</span>\n        <span class=\"token comment\">// 最初の呼び出しのカーソル位置は始点と終点です</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// クイックソート</span>\n    <span class=\"token comment\">// 引数でカーソル位置を受取るようにする</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> leftCursor <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightCursor <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 基準値</span>\n        <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">+</span> rightCursor<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//中央の要素</span>\n\n        <span class=\"token comment\">// 左右のカーソルが交差したら終了</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">&#x3C;=</span> rightCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 配列の前から走査する</span>\n            <span class=\"token comment\">// 配列の前から、基準値より大きい要素を発見する</span>\n            <span class=\"token comment\">//  → (大きい要素に当たるまで繰り返しています)</span>\n            <span class=\"token comment\">// 発見した要素を特定するためにleftCursorをインクリメントする（その要素が格納されたインデックス値にする）</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>leftCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> pivot<span class=\"token punctuation\">)</span> leftCursor<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 配列の後ろから走査する</span>\n            <span class=\"token comment\">// 配列の後ろから、基準値より小さい要素を発見する</span>\n            <span class=\"token comment\">// 　→ (小さい要素に当たる前で繰り返しています)</span>\n            <span class=\"token comment\">// 発見した要素を特定するためにrightCursorをデクリメントする(その要素が格納されたインデックス値にする)</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>rightCursor<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span> rightCursor<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// お互いのカーソルの位置から</span>\n            <span class=\"token comment\">//　例えば{3,4,8,5,35,7,8,6,9,0,1}の場合</span>\n            <span class=\"token comment\">// leftCursorは2 rightCursorは10です</span>\n            <span class=\"token comment\">//   8が7より大きい　1が7より小さい</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">&#x3C;=</span> rightCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 配列の値を交換する</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> leftCursor<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> rightCursor<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 入れ替えたらカーソルを進める</span>\n                <span class=\"token comment\">// 進めないと、whileの条件で抜けてループする</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 右カーソルが始点位置より大きい間は繰り返す</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&#x3C;</span> rightCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 始点は常に0</span>\n            <span class=\"token comment\">// 基準値より小さい値のみのエリアを再度ソートする</span>\n            <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>rightCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 左カーソルが終点位置より小さい間は繰り返す</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftCursor <span class=\"token operator\">&#x3C;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 終点は常に最後の要素のインデックス</span>\n            <span class=\"token comment\">// 基準値より大きい値のみのエリアを再度ソートする</span>\n            <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>leftCursor<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/1902/2.png\" alt=\"画像\"></p>\n<p>今回の再帰は戻り値がないので感覚が掴みやすいです</p>\n<p>参考書籍</p>\n<p>新・明解Javaで学ぶアルゴリズムとデータ構造</p>","slug":"p1902"},"__N_SSG":true}