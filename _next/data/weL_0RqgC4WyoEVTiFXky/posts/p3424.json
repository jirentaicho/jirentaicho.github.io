{"pageProps":{"frontMatter":{"title":"Spring Security | JWT認証 – トークンの取得を行う","date":"2022.08.18","description":"Spring Security | JWT認証 – トークンの取得を行う","categories":["Spring"]},"content":"<p>以前は古いSpring Securityのバージョンで書いたので、今回は5.7のバージョンで実装を行っていきます。</p>\n<p>とりあえず前回までのプログラムを利用します。</p>\n<h2>手順</h2>\n<p>以下の手順で実装していきます。細かいですが、UsernamePasswordAuthenticationFilterを継承以外は軽微なモノです。</p>\n<ul>\n<li>java-jwtの依存追加</li>\n<li>UsernamePasswordAuthenticationFilterを継承</li>\n<li>Formクラスの作成</li>\n<li>InMemoryUserDetailsManagerでusernameとpasswordを設定</li>\n<li>AuthenticationManagerをBean化</li>\n<li>作成したFilterを設定</li>\n</ul>\n<h2>java-jwtの依存追加</h2>\n<p>java-jwtのページ参考に依存関係を追加します。今回はgradleなのでgradleを参考に入れています。全ての依存はこんな感じになっていますが、h2とjdbcは使う予定はありませんので無くてもOKです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">dependencies <span class=\"token punctuation\">{</span>\n\timplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span>\n\timplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-jdbc'</span>\n\timplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-security'</span>\n\timplementation <span class=\"token string\">'com.auth0:java-jwt:4.0.0'</span>\n\truntimeOnly <span class=\"token string\">'com.h2database:h2'</span>\n\ttestImplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span>\n\ttestImplementation <span class=\"token string\">'org.springframework.security:spring-security-test'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>UsernamePasswordAuthenticationFilterを継承したクラスの作成</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>auth0<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JWT</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>auth0<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">.</span>algorithms<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Algorithm</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>authentication<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationManager</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>authentication<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Authentication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>authentication<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>matcher<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AntPathRequestMatcher</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletInputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAuthenticationFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationManager</span> authenticationManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationManager</span> authenticationManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authenticationManager <span class=\"token operator\">=</span> authenticationManager<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ログインパスの指定</span>\n        <span class=\"token function\">setRequiresAuthenticationRequestMatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AntPathRequestMatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ログインパラメータの設定</span>\n        <span class=\"token function\">setUsernameParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setPasswordParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ログイン成功時にtokenを発行してレスポンスにセットする</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationSuccessHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// JWTトークンの作成</span>\n            <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> <span class=\"token constant\">JWT</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">withIssuer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.volkruss.toaru\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">withClaim</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Algorithm</span><span class=\"token punctuation\">.</span><span class=\"token function\">HMAC256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// HeaderにX-AUTH-TOKENというKEYで生成したトークンを付与する</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-AUTH-TOKEN\"</span><span class=\"token punctuation\">,</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//ログイン失敗時</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationFailureHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>ex<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SC_UNAUTHORIZED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ServletInputStream</span> servletInputStream <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// あとで作成するLoginFormクラスを、リクエストのパラメータとマッピングして作成する</span>\n            <span class=\"token class-name\">LoginForm</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">LoginForm</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 作成したLoginFormクラスの内容でログインの実行をする</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authenticationManager<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>form<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>コメントに記載の通りです</li>\n</ul>\n<h2>Formクラスの作成</h2>\n<p>ログインフォームとマッピングできるFormクラスを作成します。今回は以下のパラメータで作成します</p>\n<ul>\n<li>username</li>\n<li>password</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginForm</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>インナークラスで作成するとエラーになります</li>\n</ul>\n<h2>InMemoryUserDetailsManagerでusernameとpasswordを設定</h2>\n<p>認証ユーザー情報です。ここはDB認証などのやり方もありますが、今回は簡単にインメモリ認証で済ましてしまいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InMemoryUserDetailsManager</span> <span class=\"token function\">userDetailsManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">UserDetails</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">withUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token class-name\">PasswordEncoderFactories</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">createDelegatingPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mikoto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USER\"</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryUserDetailsManager</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>AuthenticationManagerをBean化</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthenticationManager</span> <span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationConfiguration</span> authenticationConfiguration<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> authenticationConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n\n</code></pre></div>\n<ul>\n<li>今までは継承していたWebSecurityConfigurerAdapter#authenticationManagerメソッドで取得できましたが、Bean化して取得するようにします\n<ul>\n<li>ここは参考サイトを参照しました</li>\n</ul>\n</li>\n</ul>\n<h2>作成したFilterを設定</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SecurityFilterChain</span> <span class=\"token function\">filterChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">csrfTokenRepository</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CookieCsrfTokenRepository</span><span class=\"token punctuation\">.</span><span class=\"token function\">withHttpOnlyFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ログインが必須なページを修正</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span>auth <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            auth<span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            auth<span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            auth<span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/post\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">configurationSource</span><span class=\"token punctuation\">(</span><span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//　作成したFilterを設定</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">getSharedObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>ログインページはログイン無しでアクセスするためにpermitAllとしています</li>\n<li>作成したJwtAuthenticationFilterクラスを生成してaddFilterします\n<ul>\n<li>AuthenticationManagerについては参考サイトを参照しました</li>\n</ul>\n</li>\n</ul>\n<h2>確認</h2>\n<p>postmanで確認してみます。</p>\n<p>まずは間違ったユーザー情報でログインに失敗する様子です</p>\n<p><img src=\"/3424/1.png\" alt=\"画像\"></p>\n<p><img src=\"/3424/2.png\" alt=\"画像\"></p>\n<ul>\n<li>401エラーになっています</li>\n<li>Headersにトークンの設定がされていません</li>\n</ul>\n<p>次に正しいユーザー情報を送信します</p>\n<p><img src=\"/3424/3.png\" alt=\"画像\"></p>\n<ul>\n<li>ステータスも200OKになっています</li>\n<li>X-AUTH-TOKENにトークンが設定されています</li>\n</ul>\n<p>これでログインしてトークンを取得することができるようになりました次回はJavaScriptからログインを試してみます。</p>\n<h2>参考</h2>\n<p>https://stackoverflow.com/questions/71281032/spring-security-exposing-authenticationmanager-without-websecurityconfigureradap</p>","slug":"p3424"},"__N_SSG":true}