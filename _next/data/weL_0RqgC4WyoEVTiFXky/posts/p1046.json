{"pageProps":{"frontMatter":{"title":"Gitコマンドの勉強記録","date":"2022.02.13","description":"Gitコマンドの勉強記録","categories":["Git"]},"content":"<p>完全にメモです。</p>\n<p>私は仕事ではSVNを使っていたのですが、あるタイミングでgitに移行しました。SVNは使いやすいと思いますが、もうオワコン感があります。</p>\n<p>SVNは覚えることが少ないです。というか、そんなに覚えてなくてもなんとかなります。</p>\n<p>環境はWindowsです。</p>\n<h2>特定のコミットに戻す</h2>\n<p>参考：https://qiita.com/Yorinton/items/e0e969d961b17a359e19</p>\n<p>git logでハッシュ値を取得したら、rest –hardで戻せるようだ。早速やってみた</p>\n<p><img src=\"/1046/1.png\" alt=\"画像\"></p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">git log\ngit reset --hard ハッシュ値\nHEAD is now at 506b865 s\n</code></pre></div>\n<p>ファイルの内容も戻っていた。</p>\n<p>この状態でファイルを修正してpushしたらダメでした。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git push origin main\nTo https://github.com/jirentaicho/gitc.git\n ! [rejected]        main -> main (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/jirentaicho/gitc.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n</code></pre></div>\n<p>pullするとコンフリクトしてるよって教えてくれました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git pull origin main\nFrom https://github.com/jirentaicho/gitc\n * branch            main       -> FETCH_HEAD\nAuto-merging sample.txt\nCONFLICT (content): Merge conflict in sample.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\n</code></pre></div>\n<p>この状態だとコミット履歴までも戻っていました。</p>\n<p>とりあえずpullしてcommitしました。</p>\n<h2>ブランチとコンフリクトとマージ</h2>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git switch -c sample\nSwitched to a new branch 'sample'\n\n</code></pre></div>\n<p>この状態で適当に修正してpushします。そしてmainブランチに戻ってsample2ブランチを作成して、適当に修正してpush</p>\n<p>sampleのプルリクをmergeして、sample2はコンフリクトします</p>\n<p><img src=\"/1046/2.png\" alt=\"画像\"></p>\n<p>sampleで修正した内容とsample2で修正した内容が被ったのでコンフリクトを起こしました。</p>\n<p>一旦mainを更新して最新にして、sample2に切り替えて、マージをします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git checkout main\nSwitched to branch 'main'\n\n$ git pull origin main\nFrom https://github.com/jirentaicho/gitc\n * branch            main       -> FETCH_HEAD\nUpdating ca212f7..9911271\nFast-forward\n sample.txt | 1 +\n 1 file changed, 1 insertion(+)\n\n$ git switch sample2\nSwitched to branch 'sample2'\n\n$ git fetch origin\n\n$ git merge main\nAuto-merging sample.txt\nCONFLICT (content): Merge conflict in sample.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\n</code></pre></div>\n<p>こんな感じでファイルが表示されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">１、コミットします\n２、修正しました\n&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n３、コンフリクトした箇所\n=======\n３、ブランチをsample\n>>>>>>> main\n\n</code></pre></div>\n<p>修正して再度pushしてマージプルリクエストをしてみますと、マージ可能になります。</p>\n<p><img src=\"/1046/3.png\" alt=\"画像\"></p>\n<p>gitkで見るとこんな感じです</p>\n<p><img src=\"/1046/4.png\" alt=\"画像\"></p>\n<h2>ソースツリーの導入</h2>\n<p>gitkで見てるよりソースツリーを使ったほうが良さそうだったので、導入してみます。</p>\n<p>https://www.sourcetreeapp.com/</p>\n<p>左メニューにブランチの一覧も表示されていていいですね。</p>\n<p><img src=\"/1046/5.png\" alt=\"画像\"></p>\n<p>チェックアウトもマージも簡単にできそうですね。</p>\n<p><img src=\"/1046/6.png\" alt=\"画像\"></p>\n<p>※コマンドの勉強記録なので、あくまで目視が楽だよということで使っていきます。</p>\n<h2>リベース</h2>\n<p>今度はsampleブランチにsample2の変更をリベースで取り込んでみます。リベースをするとブランチごとマージしてくれます。</p>\n<p>色々弄ってしまったのですが、以下のようにしました。</p>\n<p><img src=\"/1046/7.png\" alt=\"画像\"></p>\n<p>mainブランチがあって、newBranchAとnewBranchBというブランチがあり、それぞれコミット履歴があります。つまり３つのブランチがある状態です。</p>\n<p>ここでnewBranchAからnewBranchBをリベースしてみます。</p>\n<p>git rebase ブランチ名</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">kirino@LAPTOP-GQK0K0U4 MINGW64 /d/work/github (newBranchA)\n$ git rebase newBranchB\nSuccessfully rebased and updated refs/heads/newBranchA.\n\n\n</code></pre></div>\n<p>するとブランチが１つになりました。ブランチAにブランチBのコミット内容が取り込まれて一つになっています。なので３つのブランチから２つのブランチになりました。</p>\n<p><img src=\"/1046/8.png\" alt=\"画像\"></p>\n<p>わかりづらいですが、newBranchBで追加したファイルがnewBranchAでも取り込まれているのが確認できます。</p>\n<p><img src=\"/1046/9.png\" alt=\"画像\"></p>\n<p>この状態でpushしてみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git push origin newBranchA\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 452 bytes | 226.00 KiB/s, done.\nTotal 4 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nremote:\nremote: Create a pull request for 'newBranchA' on GitHub by visiting:\nremote:      https://github.com/jirentaicho/gitc/pull/new/newBranchA\nremote:\nTo https://github.com/jirentaicho/gitc.git\n * [new branch]      newBranchA -> newBranchA\n\n</code></pre></div>\n<p>push内容としてはnewBranchBで行っていたコミットもありました。</p>\n<p><img src=\"/1046/10.png\" alt=\"画像\"></p>\n<p>push済のコミットはリベースしちゃダメ。コミット履歴の不整合が生じるため。</p>\n<p>というわけでやってみます。</p>\n<p>先ほどと同じような構成で、hoge fugaブランチを追加しました。</p>\n<p><img src=\"/1046/11.png\" alt=\"画像\"></p>\n<p>hogeブランチをpushします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git push origin hoge\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 459 bytes | 459.00 KiB/s, done.\nTotal 4 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nremote:\nremote: Create a pull request for 'hoge' on GitHub by visiting:\nremote:      https://github.com/jirentaicho/gitc/pull/new/hoge\nremote:\nTo https://github.com/jirentaicho/gitc.git\n * [new branch]      hoge -> hoge\n\n</code></pre></div>\n<p>リベースします</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git rebase fuga\nSuccessfully rebased and updated refs/heads/hoge.\n</code></pre></div>\n<p><img src=\"/1046/12.png\" alt=\"画像\"></p>\n<p>ここでpushしてみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git push origin hoge\nTo https://github.com/jirentaicho/gitc.git\n ! [rejected]        hoge -> hoge (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/jirentaicho/gitc.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n</code></pre></div>\n<p>pullしてpushします</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git pull origin hoge\nFrom https://github.com/jirentaicho/gitc\n * branch            hoge       -> FETCH_HEAD\nMerge made by the 'recursive' strategy.\n\n$ git push origin hoge\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 608 bytes | 608.00 KiB/s, done.\nTotal 5 (delta 3), reused 0 (delta 0), pack-reused 0\n</code></pre></div>\n<p><img src=\"/1046/13.png\" alt=\"画像\"></p>\n<h2>リベース時にコンフリ</h2>\n<p>次は違うブランチでそれぞれ同じファイルを修正して、リベースしてみます。</p>\n<p><img src=\"/1046/14.png\" alt=\"画像\"></p>\n<p>typeaとtypebで同じファイルを修正しています。</p>\n<p>この状態でtypeaからtypebをリベースしてみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git rebase typeb\nerror: could not apply 19166ff... sample.txtの修正\nResolve all conflicts manually, mark them as resolved with\n\"git add/rm <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>conflicted_files</span><span class=\"token punctuation\">></span></span>\", then run \"git rebase --continue\".\nYou can instead skip this commit: run \"git rebase --skip\".\nTo abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply 19166ff... sample.txtの修正\nAuto-merging sample.txt\nCONFLICT (content): Merge conflict in sample.txt\n</code></pre></div>\n<p>コンフリクトしましたよ。ってメッセージがあります。ファイルを確認しても内容がわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">１、コミットします\n２、修正しました\n３、ブランチをsample\n４、、コンフリクトした箇所\n&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n５、TYPE-B\n=======\n５、typeA\n>>>>>>> 19166ff (sample.txtの修正)\n\n</code></pre></div>\n<p><img src=\"/1046/15.png\" alt=\"画像\"></p>\n<p>pushしてみるとtpyeBの反映がされていないです。コミットされていない変更のことです。</p>\n<p><img src=\"/1046/16.png\" alt=\"画像\"></p>\n<p>というわけでコンフリクト対応してgit rebase –continueを実施します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git rebase --continue\nSuccessfully rebased and updated refs/heads/typea.\n</code></pre></div>\n<p>ちょっと一回pushしてしまったんで、pullして再度コンフリクト対応してcommit後にpushします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">$ git push origin typea\nEnumerating objects: 11, done.\nCounting objects: 100% (11/11), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (7/7), done.\nWriting objects: 100% (7/7), 777 bytes | 777.00 KiB/s, done.\nTotal 7 (delta 5), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (5/5), completed with 2 local objects.\nTo https://github.com/jirentaicho/gitc.git\n   19166ff..b5b664c  typea -> typea\n</code></pre></div>\n<p><img src=\"/1046/17.png\" alt=\"画像\"></p>\n<p>rebaseでコンフリクトしたら、コンフリクト修正してgit rebase –continueをしてやれば良さそうですね。</p>\n<h2>チェリーピック</h2>\n<p>特定のコミット履歴の変更を取り込むっぽいです。</p>\n<p>rebaseはブランチごと取り込みましたがチェリーピックを使うと特定のコミットのみを取り込むことができるようですので、さっそくやってみます。</p>\n<p>dev01とdev02というブランチがあります。dev02は、dev02_aとdev02_bというファイルを、それぞれ追加後にコミットしています。</p>\n<p><img src=\"/1046/18.png\" alt=\"画像\"></p>\n<p>・dev02_aを追加したときのコミット</p>\n<p><img src=\"/1046/19.png\" alt=\"画像\"></p>\n<p>・dev02_bを追加したときのコミット</p>\n<p><img src=\"/1046/20.png\" alt=\"画像\"></p>\n<p>dev01ブランチからdev02_aのみを取り込んでみます。</p>\n<p>git cherry-pick コミット履歴番号</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">kirino@LAPTOP-GQK0K0U4 MINGW64 /d/work/github (dev01)\n$ git cherry-pick 92960b1baa2ba8b014cea4ce2ad448da0536017d\n[dev01 b15af9e] add dev02_a\n Date: Sun Feb 13 12:46:19 2022 +0900\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 dev02_a\n\n\n</code></pre></div>\n<p>dev02_aのみが取り込まれているのが確認できます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">kirino@LAPTOP-GQK0K0U4 MINGW64 /d/work/github (dev01)\n$ ls\na  a.txt  branchb.txt  dev01  dev02_a  fuga.java  hoge.java  main.java  main.txt  readme.md  sample.txt\n\n</code></pre></div>\n<p><img src=\"/1046/21.png\" alt=\"画像\"></p>\n<p>今回はgitのマージ系に焦点を当てました。私は現場でrebaseとcherry-pickは使ったことが無いのですが、覚えておくと便利そうです。</p>","slug":"p1046"},"__N_SSG":true}