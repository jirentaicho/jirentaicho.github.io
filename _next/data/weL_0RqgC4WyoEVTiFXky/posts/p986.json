{"pageProps":{"frontMatter":{"title":"TypeScriptでyamlファイルからオブジェクトを生成する","date":"2022.02.08","description":"TypeScriptでyamlファイルからオブジェクトを生成する","categories":["TypeScript"]},"content":"<p>今回は以下のプロジェクトを修正します。</p>\n<p>https://github.com/jirentaicho/typescript-figurecollection</p>\n<p>サイトイメージ</p>\n<p>対象ソース</p>\n<p>この棚クラスとアイテムクラスの生成を、yamlファイルからデータを読み込んで行うようにします</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> shelfa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ラブライブ\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kanon.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chisato.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ren.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keke.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sumire.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shelfa<span class=\"token punctuation\">.</span><span class=\"token function\">setBackImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lovelivetitle.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shelfb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"とある\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misaka.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kuroko.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toaru.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shelfb<span class=\"token punctuation\">.</span><span class=\"token function\">setBackImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toarutitle.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">const</span> shelfc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"俺妹\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kirino.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oreimo.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ayase.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shelfc<span class=\"token punctuation\">.</span><span class=\"token function\">setBackImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oreimotitle.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shelfd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鬼滅\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rengoku.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"giyu.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nezuko.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shelfd<span class=\"token punctuation\">.</span><span class=\"token function\">setBackImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kimetutitle.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">//ここsingletonにする</span>\n    <span class=\"token keyword\">const</span> setting <span class=\"token operator\">=</span> Setting<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setting<span class=\"token punctuation\">.</span><span class=\"token function\">addShelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toaru\"</span><span class=\"token punctuation\">,</span>shelfa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setting<span class=\"token punctuation\">.</span><span class=\"token function\">addShelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lovelive\"</span><span class=\"token punctuation\">,</span>shelfb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setting<span class=\"token punctuation\">.</span><span class=\"token function\">addShelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oreimo\"</span><span class=\"token punctuation\">,</span> shelfc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setting<span class=\"token punctuation\">.</span><span class=\"token function\">addShelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kimetu\"</span><span class=\"token punctuation\">,</span> shelfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> shelfarea <span class=\"token operator\">=</span> Dom<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByIdWithException</span><span class=\"token punctuation\">(</span>DomConst<span class=\"token punctuation\">.</span><span class=\"token constant\">SHELF_AREA_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    setting<span class=\"token punctuation\">.</span><span class=\"token function\">drawDomShelfs</span><span class=\"token punctuation\">(</span>shelfarea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>現状はソースコードに、どの画像データでItemを作成するかべた書きになっているので管理が大変です。</p>\n<h2>js-yaml</h2>\n<p>前回、yamlファイルを非同期で読み込むことに成功しました。</p>\n<p>まずはyamlファイルを読み取るためにjs-yamlをインストールします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm install --save @types/js-yaml</code></pre></div>\n<p>このjs-yamlを利用することで任意の型に適合させてyamlファイルをロードできます。</p>\n<p>Yamlファイルを読み込んで適合させる型を作ります</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Yaml</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> imageName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> items <span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&#x3C;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>作成するyamlファイルは上記の形に合わせて作成すればよいです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">-\n  name: ラブライブ\n  imageName: lovelivetitle.png\n  items: \n  - kanon.jpg\n  - keke.jpg\n  - chisato.jpg\n-\n  name: とある\n  imageName: toarutitle.jpg\n  items: \n  - kuroko.jpg\n  - misaka.jpg\n  - toaru.jpg\n\n\n</code></pre></div>\n<h2>クラスローダーの作成</h2>\n<p>リフレクションのようなものは使えないので、以下のページを参考にクラスローダーのようなものを作成しました。</p>\n<p>TypeScript (Node.js) で文字列から動的にインスタンスを作成する方法</p>\n<p>Typescript – Get all implementations of interface</p>\n<p>以下作成したものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Constructor<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> prototype<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> DomItem <span class=\"token keyword\">from</span> <span class=\"token string\">\"../dom/DomItem\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Constructor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Constructor\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClazzMake</span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> implementations<span class=\"token operator\">:</span> Constructor<span class=\"token operator\">&#x3C;</span>DomItem<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">GetImplementations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Constructor<span class=\"token operator\">&#x3C;</span>DomItem<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>implementations<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">GetImplementationByName</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Constructor<span class=\"token operator\">&#x3C;</span>DomItem<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>implementations<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">対象のクラスが存在しません name : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token generic-function\"><span class=\"token function\">register</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Constructor<span class=\"token operator\">&#x3C;</span>DomItem<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>ctor<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>implementations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ctor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>動的にオブジェクトの生成を行う</h2>\n<p>これでyamlの読み込みと、動的にクラスを作成する術を手にしました。</p>\n<p>直截newしていた記載は、yamlから動的にクラスを作成することで、このようになりました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token function\">loadSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// yamlの読込</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> FileManager<span class=\"token punctuation\">.</span><span class=\"token function\">getDataWithFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mylist.yaml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// class作成クラスをインスタンス化する</span>\n    <span class=\"token keyword\">const</span> clazzMaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClazzMake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    clazzMaker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    clazzMaker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>Shelf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//　Settingの作成</span>\n    <span class=\"token keyword\">const</span> setting <span class=\"token operator\">=</span> Setting<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//　ここで型を指定しておくと、その通りに取得できるのでYaml用の型を作成しておく</span>\n    <span class=\"token keyword\">const</span> yamlData <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&#x3C;</span>Yaml<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n    yamlData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>elm <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 空のItems配列を用意しておく</span>\n        <span class=\"token keyword\">const</span> t_items <span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&#x3C;</span>Item<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// yamlのitems配列を走査して、Itemを作成する</span>\n        elm<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Itemクラスの作成</span>\n            <span class=\"token keyword\">const</span> clazz <span class=\"token operator\">=</span> clazzMaker<span class=\"token punctuation\">.</span><span class=\"token function\">GetImplementationByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// tempのitems配列に入れておく</span>\n            t_items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">clazz</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Shelfクラスを作成する</span>\n        <span class=\"token keyword\">const</span> clazz <span class=\"token operator\">=</span> clazzMaker<span class=\"token punctuation\">.</span><span class=\"token function\">GetImplementationByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shelf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 先ほど設定したtempのItem配列のデータをセットする</span>\n        <span class=\"token keyword\">const</span> shelf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">clazz</span><span class=\"token punctuation\">(</span>\n            elm<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n            t_items\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Shelf<span class=\"token punctuation\">;</span>\n        shelf<span class=\"token punctuation\">.</span><span class=\"token function\">setBackImage</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">.</span>imageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//設定にshelfを追加する</span>\n        setting<span class=\"token punctuation\">.</span><span class=\"token function\">addShelf</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>shelf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shelfarea <span class=\"token operator\">=</span> Dom<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByIdWithException</span><span class=\"token punctuation\">(</span>DomConst<span class=\"token punctuation\">.</span><span class=\"token constant\">SHELF_AREA_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    setting<span class=\"token punctuation\">.</span><span class=\"token function\">drawDomShelfs</span><span class=\"token punctuation\">(</span>shelfarea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>   \n</code></pre></div>\n<p>これで必要なページが増えてもyamlファイルを修正するだけで良くなりました。</p>\n<p>ネストしたforeachが気色悪いですが。。。</p>\n<h2>設定</h2>\n<p>これはブラウザで動かしていてwebpackを使っているのですが、webpackはプロダクションモードにせず、デベロップメントモードにしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// バンドルモード</span>\n   <span class=\"token comment\">// mode: \"production\",</span>\n</code></pre></div>\n<p>文字列で動的にクラスを生成する際に、プロダクションモードにするとクラス名が変わってしまうからです。</p>\n<p>また別リポジトリにてクラスローダーのジェネリクス版を作成しました。テストもあります。</p>\n<p>https://github.com/jirentaicho/typescript-mysample/tree/main/src</p>","slug":"p986"},"__N_SSG":true}