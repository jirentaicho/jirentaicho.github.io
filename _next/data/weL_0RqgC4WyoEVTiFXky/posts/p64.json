{"pageProps":{"frontMatter":{"title":"C# | yamlファイルを読み込む","date":"2021.10.02","description":"C# | yamlファイルを読み込む","categories":["WPF"]},"content":"<p>今回はyamlファイルの読み取り（デシアライズ）をやってみます。テキストファイルなどからクラスを作成すること。</p>\n<h3>YamlDotNet</h3>\n<p>yamlファイルの取り扱いには、YamlDotNetというライブラリを使うのが良さそう！</p>\n<p><img src=\"/64/1.png\" alt=\"画像\"></p>\n<p>簡単なものから読み込んでいきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">company: イーグルジャンプ\nemployee:\n  - 八神コウ\n  - 涼風青葉\n  - 滝本ひふみ\n</code></pre></div>\n<p>このymlファイルに合ったクラスを作ります。（これミスると例外がでるので注意）</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewGame</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string company <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> employee <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この時に、employeeは配列にしないと例外になります。ymlも配列になっているので、合わせる必要があります。</p>\n<p>あと、大文字が使えない？isBlackにするとエラーになりました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">company: イーグルジャンプ\nemployee:\n  - 八神コウ\n  - 涼風青葉\n  - 滝本ひふみ\nisblack: true\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewGame</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string company <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> employee <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> bool isblack <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最初はboolが使えねーんだこのク●と思っていたのですが、プロパティ見つからねーって言われたんで、小文字にしてみたら通りました・・・</p>\n<p>次に、もう少しクラスを交えた複雑な例を考えてみます。</p>\n<p>サンプルとなるymlは以下です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: v1\nkind: Deployment\nmetada:\n  name: sample\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n</code></pre></div>\n<p>基本的にはObectごとにクラスを作成していくイメージです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewGame</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string apiversion <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> string kind <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MetaData</span> metada <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Spec</span> spec <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">MetaData</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string name <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Labels</span> labels <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">Labels</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> string app <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spec</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string replicas <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これでエラー無く取り込めます。親というか全ての始まりであるNewGameクラスは、yamlに関する情報を全て持っていますが、metadaなどのオブジェクトは、metadaクラスが持っている感じですね。</p>\n<p>ymlのmetadataは、nameとlabelsを持っているので、stringなどの型では当てはめることはできないので、新しくMetaDataクラスを作り割り当てていく感じですね。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">internal <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewGame</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string apiversion <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> string kind <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MetaData</span> metada <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Spec</span> spec <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>値を取得できるか試してみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">dialog<span class=\"token punctuation\">.</span></span>FileName</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Encoding</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> sy <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">result<span class=\"token punctuation\">.</span></span>ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token class-name\">MessageBox<span class=\"token punctuation\">.</span>Show</span><span class=\"token punctuation\">(</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">var</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// see height_in_inches in sample yml </span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">deserializer<span class=\"token punctuation\">.</span></span>Deserialize</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">NewGame</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token class-name\">MessageBox<span class=\"token punctuation\">.</span>Show</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>apiversion <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span>replicas <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>metada<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"/64/2.png\" alt=\"画像\"></p>\n<p>良さそうです。</p>\n<p>正直な話、jsのほうが柔軟に使えるし手軽です。C#だとまずライブラリー依存だし、何より面倒くさい。ただし型安全といえば安全というメリットがありそう。</p>\n<p>yamlを使ってあーだこだみたいな場合は、Electronという選択もありかもしれない。（触ったことほぼないけど）</p>","slug":"p64"},"__N_SSG":true}