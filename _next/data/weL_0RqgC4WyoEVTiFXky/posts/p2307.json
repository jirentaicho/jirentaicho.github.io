{"pageProps":{"frontMatter":{"title":"Spring | AOPをアノテーションで利用する","date":"2022.05.14","description":"Spring | AOPをアノテーションで利用する","categories":["Spring"]},"content":"<p>AOPを利用してロギングやらトランザクションなどの処理をオブジェクトから分離できます。→オブジェクトの責務と関係ない共通化できる処理をAspectという単位にまとめる</p>\n<ul>\n<li>Join Point\n<ul>\n<li>Adviceを割り込ませる箇所、タイミング</li>\n</ul>\n</li>\n<li>Advice\n<ul>\n<li>JoinPointで実行されるコード</li>\n</ul>\n</li>\n<li>Pointcut\n<ul>\n<li>JoinPointに到達したときに、Adviceを実行するかどうかをフィルタリングする</li>\n<li>トランザクション（Advice)が必要ないJoinPointではAdviceを無視するなど</li>\n</ul>\n</li>\n</ul>\n<p>Adviceのタイプ</p>\n<ul>\n<li>Befor\n<ul>\n<li>JoinPointの前に実行</li>\n</ul>\n</li>\n<li>After\n<ul>\n<li>JoinPointの後に実行</li>\n</ul>\n</li>\n<li>AfterReturning\n<ul>\n<li>JoinPointが完全に正常終了した後</li>\n</ul>\n</li>\n<li>Around\n<ul>\n<li>JoinPointの前後で実行</li>\n</ul>\n</li>\n<li>AfterThrowing\n<ul>\n<li>JoinPointで例外が発生した時に実行</li>\n</ul>\n</li>\n</ul>\n<h2>Springでの利用方法</h2>\n<ul>\n<li>アノテーション</li>\n<li>Bean定義ファイル</li>\n<li>JavaConfig</li>\n</ul>\n<p>これらの方法で利用可能(DIと同じ)</p>\n<p>依存の追加を行っておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>Maven Build compileしておきます</p>\n<h2>アノテーションを利用</h2>\n<p>Aspectを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* *..*SampleUsecase.*(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinpoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得します\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* *..*SampleUsecaseImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>クラスに@Aspectと@Componentを付けます\n<ul>\n<li>Bean対象にします</li>\n</ul>\n</li>\n<li>Adviceのタイプに応じたアノテーションを利用します</li>\n<li>Pointcutの指定はexecutionの構文で指定する</li>\n<li>pointcutをミスるとエラーになります（起動しない）</li>\n<li>インターフェースでも実装クラスでもどっちでも実行されている</li>\n</ul>\n<p>実行すると処理のbeforeとafterにadviceが実行されていることがわかります</p>\n<p><img src=\"/2307/1.png\" alt=\"画像\"></p>\n<h2>executionの構文</h2>\n<p>基本構文</p>\n<ul>\n<li>修飾子、例外は省略可能</li>\n<li>戻り値の型、パッケージやクラス名、インターフェース名にはワイルドカードが利用可能</li>\n<li>メソッドの引数に..であらゆる引数と一致</li>\n<li>*は.(パッケージの区切り文字）と一致しないため、複数パッケージと一致させるには..を使用</li>\n</ul>\n<p>上記を踏まえて別の記載にしてみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public String *..*SampleUsecaseImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n</code></pre></div>\n<ul>\n<li>修飾子とメソッドの戻り値を明示</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(String *..*SampleUsecaseImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>修飾子を省略</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(String *..*.get(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n</code></pre></div>\n<ul>\n<li>パッケージとクラス名をワイルドカードにする\n<ul>\n<li>全ての戻り値がStringのgetメソッドに対応</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2307/2.png\" alt=\"画像\"></p>\n<p>割と柔軟に設定できそうですね</p>\n<h2>論理演算子</h2>\n<p>論理演算子も利用できる</p>\n<ul>\n<li>||、or\n<ul>\n<li>論理和</li>\n</ul>\n</li>\n<li>&#x26;&#x26;、and\n<ul>\n<li>論理積</li>\n</ul>\n</li>\n<li>!、not\n<ul>\n<li>否定</li>\n</ul>\n</li>\n</ul>\n<p>上記を踏まえて少し書いてみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* *..*SampleUsecase.*(..)) or execution(* *..*HogeUsecase.*(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinpoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得します\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>SampleUsecaseかHogeUsecaseのメソッドが呼ばれた時に実行</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* *..*SampleUsecase.*(..))\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//これだと全ての実装クラスで呼ばれる</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n</code></pre></div>\n<ul>\n<li>SampleUsecaseの全実装クラスで呼ばれる</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* *..*SampleUsecase.*(..)) &#x26;&#x26; execution(* *..*SecondSampleUsecaseImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n</code></pre></div>\n<ul>\n<li>SampleUsecaseかつSecondSampleUsecaseImplのメソッド\n<ul>\n<li>SampleUsecaseImplでは呼ばれない</li>\n</ul>\n</li>\n</ul>\n<h2>JoinPoint</h2>\n<p>引数のJoinPointはクラスやメソッドの情報が入ってます</p>\n<p><img src=\"/2307/3.png\" alt=\"画像\"></p>\n<h2>関連記事</h2>\n<p><a href=\"/posts/p1325\">リンク</a></p>\n<ul>\n<li>このインターセプターはMVCでの概念らしいです</li>\n</ul>\n<p><a href=\"/posts/p2170\">リンク</a></p>\n<ul>\n<li>Springと関係ないですがJavaのプロクシを利用するとAOPは実現できます</li>\n</ul>\n<h2>参考</h2>\n<p>［改訂新版］Spring入門 ――Javaフレームワーク・より良い設計とアーキテクチャ</p>","slug":"p2307"},"__N_SSG":true}