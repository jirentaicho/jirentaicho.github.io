{"pageProps":{"frontMatter":{"title":"Java | 同期処理","date":"2022.04.20","description":"Java | 同期処理","categories":["Java"]},"content":"<p>全てのオブジェクト、クラス、それぞれ1対1に対応したロックをモニタロックといい、synchronizedはモニタロックの獲得を意味する。</p>\n<ul>\n<li>インスタンスメソッド\n<ul>\n<li>対象のオブジェクト(レシーバオブジェクト)のモニタロックを取得</li>\n</ul>\n</li>\n<li>クラスメソッド\n<ul>\n<li>対象クラスのモニタロックを取得</li>\n</ul>\n</li>\n</ul>\n<p>あるスレッドがモニタロックを取得している間は、他のスレッドはモニタロックを取得できない→解放されるまで待ち続ける</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>　<span class=\"token comment\">// thisがモニタロックの対象</span>\n\t\t\t<span class=\"token comment\">// user add </span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>またメソッドにsynchronizedを付けることもできるが、上記のsynchronized文はモニタロックの対象を明示できるのと、排他制御の範囲を限定できます。</p>\n<h2>メモリモデル</h2>\n<p>Javaは、個々のスレッドがオブジェクトのフィールドの値を独自にキャッシュすることを認めている。→効率のため</p>\n<p>マルチスレッド下では、実際の値とキャッシュしている値で不整合が発生することがある。</p>\n<p>そのため、以下のタイミングを制御する必要がある</p>\n<ul>\n<li>キャッシュの変更を実際の値に書き戻すタイミング</li>\n<li>実際の値をキャッシュに読み込むタイミング</li>\n</ul>\n<p>制御方法</p>\n<ul>\n<li>synchronizedコードを使う\n<ul>\n<li>ほとんどの場合これで自動的に解決できる</li>\n</ul>\n</li>\n<li>volatile修飾子を使う\n<ul>\n<li>フィールド変数の修飾子にvolatileを付ける</li>\n</ul>\n</li>\n</ul>\n<h2>volatile</h2>\n<ul>\n<li>volatileは実際の値を読む保証、書き込んだ値は実際の値に書き戻される保証がある。</li>\n<li>longとdouble型もアトミック性を保証する</li>\n<li>synchronizedの代わりにはならない\n<ul>\n<li>インクリメント演算子による読み書きの間(加算)に別スレッドが割り込む問題は解消できない++はアトミックではない\n<ul>\n<li>++はアトミックではない</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>ロック</h2>\n<p>ロックはsynchronizedの弱点を補います。</p>\n<ul>\n<li>メソッドやクラスをまたがってロックできない</li>\n<li>ロック可能かチェックできない</li>\n</ul>\n<p><a href=\"/posts/p1147\">リンク</a></p>\n<p>ReentrantLockについて</p>\n<p>https://docs.oracle.com/javase/jp/8/docs/api/java/util/concurrent/locks/ReentrantLock.html</p>\n<ul>\n<li>動作順序の保証はロックを呼出した順番にロックを取得するかどうか\n<ul>\n<li>https://relearn-java.com/multithread/</li>\n</ul>\n</li>\n</ul>\n<h4>ロックを使う例</h4>\n<p>コメントアウトされているlockの箇所を有効にすればロック処理が働きます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserManager</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//lock.lock();</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ユーザー登録処理を行いました\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ロック開放します\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//\tlock.unlock();</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token class-name\">UserManager</span> userManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">Runnable</span> run <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tuserManager<span class=\"token punctuation\">.</span><span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ロックを利用しない場合※ログは一部掲載</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ユーザー登録処理を行いました 3\r\r\nユーザー登録処理を行いました 5\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 4\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 3\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 3\r\r\nロック開放します\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 7\r\r\nロック開放します</code></pre></div>\n<p>ロックを利用する場合</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ユーザー登録処理を行いました 1\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 2\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 3\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 4\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 5\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 6\r\r\nロック開放します\r\r\nユーザー登録処理を行いました 7\r\r\nロック開放します</code></pre></div>\n<h2>スレッドよりもエグゼキュータ、タスク、ストリームを選ぶ</h2>\n<p>java.util.concurrentにあるエグゼキュータフレームワークは柔軟で扱いやすいタスク実行機構です。前回の記事ではCallableでの利用も行っています。</p>\n<p><a href=\"/posts/p2175\">リンク</a></p>\n<p>メリット</p>\n<ul>\n<li>タスクの完了を待てる</li>\n<li>タスクのスケジューリング</li>\n<li>スレッドプール</li>\n<li>など</li>\n</ul>\n<p>ただし高負荷のサーバに対してはキャッシュスレッドプールを使わず、固定スレッドプールを使うことが推奨される。</p>\n<h2>参考書籍とサイト</h2>\n<p>改訂2版　パーフェクトJava</p>\n<p>Effective Java 第3版</p>\n<p>https://www.baeldung.com/java-concurrent-locks</p>","slug":"p2186"},"__N_SSG":true}