{"pageProps":{"frontMatter":{"title":"Javaの例外処理 | 検査例外と実行時例外","date":"2022.07.07","description":"Javaの例外処理 | 検査例外と実行時例外","categories":["Java"]},"content":"<p>Javaの例外について以下のことを書きます</p>\n<ul>\n<li>例外種類</li>\n<li>独自例外の作成</li>\n<li>throws説</li>\n<li>assert</li>\n<li>基底クラス</li>\n</ul>\n<h2>例外種類</h2>\n<p>実行時例外と検査例外と呼ばれる例外があります。</p>\n<h3>検査例外</h3>\n<p>検査例外というのはthrows節で明示すべき例外の事を言います。</p>\n<p>検査例外を投げる可能性があるメソッドと、呼び出し側のメソッドは、検査例外への取り決めを両者間で行っており（行っているに相当し）呼び出し側でcatchなどの対応が必要になる。IOExceptionなどが該当します。</p>\n<p>throws説で明示すべきというのは、メソッド間での取り決めが必要ということと等しいです。</p>\n<p>ExceptionとExceptionを継承したクラスが検査例外に該当します。※RuntimeException及び、RuntimeExceptionを継承したクラスは除きます</p>\n<h3>実行時例外</h3>\n<p>実行時例外というのは、throws説で明示すべき必要のない例外の事を言います。つまりメソッド間での取り決めが不要になります。</p>\n<p>RuntimeExceptionとRuntimeExceptionを継承したクラスが実行時例外に該当します。</p>\n<p>これをcatchなどで対応することもできますが、基本的には実行時例外が発生しないようにするのが良いです。</p>\n<p>例えば、実行時例外としてArrayIndexOutOfBoundsExceptionというのがあります。これをわざわざcatchする必要があるでしょうか？そもそもそういった例外が発生しないように開発者がコードを書くべきということです。</p>\n<p>しかし最後まで例外が補足されないとスレッドが終了しますので、どこかで補足すべきです。とのこと。つまり、基本的には実行時例外が発生しないようなコードを書くようにして、どうしても発生するような場合はきちんとcatchなど使ってあげましょう。という感じでしょうか。</p>\n<p>Springで実行時例外を拾う時にはResponseEntityExceptionHandlerのようなクラスがあるので、そういった感じで補足すれば良さそう。</p>\n<p>https://github.com/jirentaicho/BookOhFoo/blob/83f666a069779ee2a47a6e3308092ca20154efed/src/main/java/com/volkruss/BookOhFoo/system/error/ValidationExceptionHandler.java</p>\n<h3>例外の握り潰し</h3>\n<p>catch節で何もしないでエラーを無視することもできてしまいます。これを例外の握り潰しと呼びます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//何も記載しない</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"処理が完了しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>numbers[9]で実行時例外になりますが、catchで何もせずに例外を握りつぶすと、エラーが何もなかったかのように処理が完了しましたというログが流れます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">1\n処理が完了しました。\n</code></pre></div>\n<p>例外にも種類があり、検査例外についてはthrows節による取り決めと、catchによる対応が必要ということがわかりました。</p>\n<h2>独自例外クラスの作成</h2>\n<p>独自に例外クラスを作成する目的は、例外発生の原因を細分化するため。単に実行時エラーというよりも、配列のサイズ外へのアクセスエラーとしたほうが、どんなエラーかわかりやすいですよね。</p>\n<p>通常のクラスと作りは変わらないですが、検査例外の場合はExceptionを実行時例外の場合はRuntimeExceptionを継承するようにします。</p>\n<p>コンストラクタパターンという定石を使うことが多い</p>\n<p>独自例外クラス</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span>throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これを利用する時はthrows節が必須です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyException</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// throwsが必要</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:ErrorCode:109XXY001ZX23498\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"処理を完了しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>利用する時はさらに伝播するか捕捉する必要があります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Logic</span> logic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\tlogic<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// TODO Auto-generated catch block</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"処理が完了しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">com.volkruss.javasansen.javasansen.exception.MyException: Error:ErrorCode:109XXY001ZX23498\n\tat com.volkruss.javasansen.javasansen.exception.Logic.execute(Logic.java:20)\n\tat com.volkruss.javasansen.javasansen.exception.Main.main(Main.java:8)\n処理が完了しました。\n</code></pre></div>\n<p>例外発生時にはエラーログが吐かれています。</p>\n<h2>throws説</h2>\n<p>こういう例外が起きる可能性があるという注意書きのようなもので、実際に例外を起こす必要はありません。</p>\n<p>ちなみにRuntimeExceptionのような実行時エラーの場合はcatchするのは任意なので、記載はしなくてもOKです。</p>\n<h2>assert</h2>\n<p>assertは例外を捕捉せず、発生したら伝播しプログラムを終了させるようにします。</p>\n<p>assertは開発中のプログラムに対しての機能として、運用時には無効化させるのが普通。ただし無効化して得られるパフォーマンスよりもバグ検出できるほうが価値があるという考えもあるそうです。実際、私はassert文を利用しているプロジェクトに遭遇したことがあります。</p>\n<p>また実行にはコマンドライン引数の-eaが必要になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">assert</span> value <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"value must not be 1.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>valueが1でないこと。という意味になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Exception in thread &#x26;quot;main&#x26;quot; java.lang.AssertionError: value must not be 1.\n\tat com.volkruss.javasansen.javasansen.exception.Main.main(Main.java:8)\n</code></pre></div>\n<p>コマンドライン引数を指定する方法(eclipse)</p>\n<p>右クリック→Run As→Run Configurations…→ArgumentsのVM argumentsを指定</p>\n<p><img src=\"/2836/1.png\" alt=\"画像\"></p>\n<h2>基底クラス</h2>\n<ul>\n<li>Throwable\n<ul>\n<li>全ての例外の基底クラス</li>\n</ul>\n</li>\n<li>Exception\n<ul>\n<li>検査例外の基底クラス</li>\n</ul>\n</li>\n<li>Error\n<ul>\n<li>エラー例外の基底クラス</li>\n</ul>\n</li>\n<li>RuntimeException\n<ul>\n<li>実行時例外の基底クラス</li>\n</ul>\n</li>\n</ul>\n<p>Errorクラスから派生する例外はエラー例外と呼ぶ。エラー例外はthorws節への明示は任意。ただしError例外はシステムエラー用に予約された例外と考えるべきで、独自定義は推奨されない。</p>\n<h2>参考書籍</h2>\n<p>改訂2版　パーフェクトJava</p>","slug":"p2836"},"__N_SSG":true}