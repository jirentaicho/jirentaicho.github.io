{"pageProps":{"frontMatter":{"title":"SQL | 中間テーブルと暗黙ソート","date":"2022.09.09","description":"SQL | 中間テーブルと暗黙ソート","categories":["SQL"]},"content":"<p>SQLの勉強記録です</p>\n<p>参考書籍「達人に学ぶ SQL徹底指南書」</p>\n<p>つまみ読みした所のメモです。</p>\n<h2>中間テーブルテーブル</h2>\n<p>サブクエリの実行結果を中間テーブルとして生成するので、中間テーブルは少ないほど良い</p>\n<h4>HAVING句を利用する</h4>\n<p>苦手意識を持っているhavingです。集約結果に対して条件を与えたい場合に利用します。</p>\n<p><img src=\"/3657/1.png\" alt=\"画像\"></p>\n<p>「HAVING句を利用しないで、2件以上の購入履歴があるユーザーを出力する」という例でやっていきます。</p>\n<p>ユーザーごとに何件購入したかは以下のようにシンプルです</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> \n\tNAME<span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> sales\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> NAME\n</code></pre></div>\n<p><img src=\"/3657/2.png\" alt=\"画像\"></p>\n<p>ここで2件以上という条件を持ったユーザーにするには</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> \n\t<span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> cnt\n\t\t<span class=\"token keyword\">FROM</span> sales\n\t\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> name\n\t<span class=\"token punctuation\">)</span> tmp\n<span class=\"token keyword\">WHERE</span> cnt <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>\n</code></pre></div>\n<p><img src=\"/3657/3.png\" alt=\"画像\"></p>\n<p>結果は満足ですが、サブクエリを使って一度中間テーブルを作成しています。having句を使って書くと中間テーブルの作成がされません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> \n\tNAME<span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> sales\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> NAME\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>\n</code></pre></div>\n<p>こっちの方がシンプルなうえに効率も良いです</p>\n<h2>DISTINCTよりもEXISTS</h2>\n<p>アニメのタイトルに登場したキャラクターIDを取得するSQLです</p>\n<div class=\"remark-highlight\"><pre class=\"language-Objective-C\"><code class=\"language-Objective-C\">SELECT id\nFROM characters ch\nINNER JOIN anime an\nON ch.id = an.character_id</code></pre></div>\n<p><img src=\"/3657/4.png\" alt=\"画像\"></p>\n<p>構造はどうであれ重複が発生しているのでDISTINCTの出番です</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">distinct</span> id\n<span class=\"token keyword\">FROM</span> characters ch\n<span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> anime an\n<span class=\"token keyword\">ON</span> ch<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> an<span class=\"token punctuation\">.</span>character_id\n</code></pre></div>\n<p><img src=\"/3657/5.png\" alt=\"画像\"></p>\n<p>うまく重複が消えていますが、この時に暗黙的なソートが行われており、パフォーマンスに影響を与えることがあります。</p>\n<p>EXISTSを利用して同じ結果が得られるだけでなくソートも発生しません</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> id\n<span class=\"token keyword\">FROM</span> characters ch\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> anime an <span class=\"token keyword\">WHERE</span> an<span class=\"token punctuation\">.</span>character_id <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><img src=\"/3657/6.png\" alt=\"画像\"></p>\n<p>ちなみにIN句でも同じことができます</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> id\n<span class=\"token keyword\">FROM</span> characters ch\n<span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> character_id <span class=\"token keyword\">FROM</span> anime<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>ただしIN句でサブクエリを利用する場合は、EXISTSにパフォーマンスで劣っているので、EXISTSを利用するのが良いです。</p>\n<ul>\n<li>IN句はインデックスを参照しない</li>\n<li>EXISTSは一行でも条件に合致する行を見つけたら検索を止めてくれます</li>\n<li>IN句ではワークテーブルが作成される</li>\n</ul>","slug":"p3657"},"__N_SSG":true}