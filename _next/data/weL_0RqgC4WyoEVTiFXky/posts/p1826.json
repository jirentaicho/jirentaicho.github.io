{"pageProps":{"frontMatter":{"title":"リーダブルコード | 読書メモ","date":"2022.04.01","description":"リーダブルコード | 読書メモ","categories":["Java"]},"content":"<p>前に買ったのですが前半だけ軽く読んだだけなので、この度は後半に絞って読みました。(良いコードを書く技術という本にて、オススメ書籍として紹介されていたので思い出しました。)</p>\n<h2>制御フロー</h2>\n<ul>\n<li>調査対象(変化する値)を左側に置くようにする\n<ul>\n<li>if(act &#x3C; exp)</li>\n</ul>\n</li>\n<li>否定系のifは”極力”避ける\n<ul>\n<li>× if(!debug) 〇if(debug)</li>\n<li>よく指摘されていたのを思い出した(笑)あくまで極力です\n<ul>\n<li>あくまで極力です</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>感心を引く条件が先に来るようにする</li>\n<li>三項演算子は完結になる場合のみ使う\n<ul>\n<li>まずはif文を優先する</li>\n</ul>\n</li>\n<li>ネストは浅く\n<ul>\n<li>ネストしたものは書かないってルールで書かされたこともありました</li>\n<li>メソッド抽出や早めに返す(return)で対応する</li>\n</ul>\n</li>\n</ul>\n<h2>巨大な式を分割する</h2>\n<p>式を変数として捉えることで巨大なコードがスッキリする</p>\n<ul>\n<li>説明変数\n<ul>\n<li>式が表すものを変数として格納する</li>\n</ul>\n</li>\n<li>要約変数\n<ul>\n<li>何度も登場してくるような条件式を変数として格納する</li>\n</ul>\n</li>\n</ul>\n<h2>変数と読みやすさ</h2>\n<ul>\n<li>変数のスコープを縮める\n<ul>\n<li>クラス変数を全て消し去るというリファクタリングをしたことがありますが、メソッド抽出→クラス分割のような手順でやっていきました。</li>\n</ul>\n</li>\n<li>イミュータブルな変数を利用する\n<ul>\n<li>値があちこちで変わってると追いつかなくなる</li>\n</ul>\n</li>\n</ul>\n<h2>無関係の下位問題</h2>\n<p>無関係の下位問題</p>\n<ul>\n<li>関数、ブロックに存在している、高レベルの目標ではない記載\n<ul>\n<li>メソッド抽出して対応する個別にテスト可能になる再利用可能になる\n<ul>\n<li>個別にテスト可能になる</li>\n<li>再利用可能になる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>プログラムの核となる基本的なタスクをutilとして切り離す\n<ul>\n<li>ファイル操作やハッシュテーブル、文字列操作など</li>\n<li>ドメインに関係しない部分</li>\n</ul>\n</li>\n</ul>\n<p>高レベルの目標</p>\n<ul>\n<li>その関数が解決しようとしている目的</li>\n</ul>\n<h2>一度に一つのことを</h2>\n<p>コードが１つずつタスクを行うようにする</p>\n<ul>\n<li>コードが行っているタスクを明確にする\n<ul>\n<li>別のメソッド、クラスに分離できるものがある</li>\n<li>それ以外が、そのタスクが段落になる</li>\n</ul>\n</li>\n</ul>\n<h2>コードに思いを込める</h2>\n<ul>\n<li>コード全体で何をやってるのか説明する\n<ul>\n<li>箇条書きでいい</li>\n<li>簡単な言葉でわかりやすく</li>\n</ul>\n</li>\n<li>説明を元にコードを改善する\n<ul>\n<li>巨大な条件式の塊の正体を明確にする</li>\n</ul>\n</li>\n</ul>\n<h2>短いコードを書く</h2>\n<ul>\n<li>汎用的なユーティリティクラスを作る\n<ul>\n<li>処理の重複を削除する</li>\n<li>無関係の下位問題を解決する</li>\n</ul>\n</li>\n<li>未使用や無用のクラスを削除する\n<ul>\n<li>過剰な機能を持たせない</li>\n</ul>\n</li>\n<li>既存のAPIなどをライブラリを読む\n<ul>\n<li>自分で実装する必要がなければしなくていい</li>\n</ul>\n</li>\n</ul>\n<h2>テストと読みやすさ</h2>\n<ul>\n<li>テストコードを保守しやすいようにする\n<ul>\n<li>「テストコードを変更したくないから対象のコードが修正できない」は汚い</li>\n<li>新しいコードが増えたらテストコードを書く品質担保\n<ul>\n<li>品質担保</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>「こういう状況と入力から、こういう振る舞いと出力をする」というのがテストコードの本質\n<ul>\n<li>オブジェクトの生成などは別のメソッドに移動させる</li>\n<li>checkHogeResult(input,exp)のようになると良い</li>\n</ul>\n</li>\n<li>小さいテストを複数作る</li>\n</ul>\n<h2>自分なりにコード改善</h2>\n<p>自分なりにコードを見直してみます。</p>\n<h4>if文の修正とテスト</h4>\n<p>以下のif文は怒られてしまうやつです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canGacha</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> stone_amt <span class=\"token operator\">-</span> sub <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>条件式が見にくいので左側にactを置くようにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canGacha</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> stone_amt <span class=\"token operator\">-</span> sub <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>テストコードも書いてみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StoneTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_CanGacha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCanGacha</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCanGacha</span><span class=\"token punctuation\">(</span><span class=\"token number\">2999</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCanGacha</span><span class=\"token punctuation\">(</span><span class=\"token number\">3001</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCanGacha</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCanGacha</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkCanGacha</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">makeStone</span><span class=\"token punctuation\">(</span>amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">canGacha</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stone</span> <span class=\"token function\">makeStone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stone</span> stone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stone<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> stone<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>複数のロジック</h4>\n<p>ガチャを引くロジックは以下のことを行う</p>\n<ul>\n<li>ユーザーデータを取得する</li>\n<li>ユーザーがガチャを引く</li>\n<li>キャラクターをランダムで取得する</li>\n<li>ログを出力する</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gachaType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">UserData</span> userData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userData<span class=\"token punctuation\">.</span><span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotEnoughException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> characters <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// TODO factory</span>\n        <span class=\"token class-name\">Gacha</span> gacha <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NormalGacha</span><span class=\"token punctuation\">(</span>characters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> gacha<span class=\"token punctuation\">.</span><span class=\"token function\">getCharaceters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CharacterDTOMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterDTOMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Event</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logEventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ガチャ石を利用しました。使用数 : \"</span><span class=\"token operator\">+</span> <span class=\"token number\">3000</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"使用ガチャ\"</span> <span class=\"token operator\">+</span> gachaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">toDTOList</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ユーザーの処理</p>\n<ul>\n<li>ユーザー取得</li>\n<li>石の使用</li>\n</ul>\n<p>ガチャの処理</p>\n<ul>\n<li>ガチャ作成</li>\n<li>キャラクター取得</li>\n</ul>\n<p>やり方は色々あると思いますが今回はクラス分割をしてみます。それぞれを別のアクションとして切り離してしまいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gachaType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ユーザーが石を利用する</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDataAction<span class=\"token punctuation\">.</span><span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ガチャを引く</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gachaAction<span class=\"token punctuation\">.</span><span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// イベントの発火</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logEventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ガチャ石を利用しました。使用数 : \"</span><span class=\"token operator\">+</span> <span class=\"token number\">3000</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"使用ガチャ\"</span> <span class=\"token operator\">+</span> gachaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// View用のフォーマットに変換して返却する</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterDTOMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDTOList</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>※わかりやすくコメントをつけています</p>\n<p>最初のコードよりもガチャ引くという処理がわかりやすくなったと思います。それぞれのActionでは元々のコードをそのまま利用しています。</p>\n<p>コード</p>\n<p>https://github.com/jirentaicho/spring-api-gacha</p>\n<h2>終わりに</h2>\n<p>「リーダブルコード」でも「良いコードを書く技術」でも「コードリーディングの重要性」について語っています（触れています）</p>\n<ul>\n<li>APIの使い方を知るために読む</li>\n<li>書き方とか知るために読む</li>\n</ul>\n<p>とにかく作れ！っていうのも大事ですが、とにかく読めってのも大事そうですね。読む量をバチバチに増やしていきたいと思います。</p>","slug":"p1826"},"__N_SSG":true}