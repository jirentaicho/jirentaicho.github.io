{"pageProps":{"frontMatter":{"title":"Spring | フォームバリデーション","date":"2022.04.13","description":"Spring | フォームバリデーション","categories":["Java"]},"content":"<p>前回の記事でリクエストの内容をFormクラスを使って処理できることを確認しました。今回はリクエストの内容の妥当性を検証するため、バリデーション処理を行います。</p>\n<p>前回の記事</p>\n<p><a href=\"/posts/p2068\">リンク</a></p>\n<p>依存関係として以下を追加しています</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">implementation &#x26;#39;org.springframework.boot:spring-boot-starter-validation&#x26;#39;</code></pre></div>\n<h2>単項目チェック</h2>\n<p>単項目チェックは1項目を単体でチェックします。例えば値が入力されているか、桁数が適切か、などのその項目単体で行われるチェックです。</p>\n<p>今回は以下の手順で単項目チェックを実装します。</p>\n<ul>\n<li>Formクラスにアノテーションを付与する</li>\n<li>コントローラーにアノテーションを付与する</li>\n<li>BindingResultを利用してエラー内容を表示する</li>\n</ul>\n<p>Formクラスにアノテーションを付けてnameにはブランクを許可しないようにします。現状はブランクを渡しても問題なく処理が通ります。</p>\n<p><img src=\"/2083/1.png\" alt=\"画像\"></p>\n<p>Formクラスを修正します。@NotBlankを付けて空白文字列を許さないようにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoreForm</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@NotBlank</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> district<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>@Validated</h4>\n<p>次にコントローラーでバリデーションを実行するための@Validatedアノテーションを付与します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Store</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Validated</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">StoreForm</span> storeForm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Store</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setDistrict</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getDistrict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これで先ほどと同じリクエストを送信するとエラーになります。</p>\n<p><img src=\"/2083/2.png\" alt=\"画像\"></p>\n<h4>BindingResult</h4>\n<p>次にBindingResultを利用します。今回はnameがブランクの時に速攻例外になっていましたが、BindingResultを使うことで一旦エラー内容を持っておくことができます。</p>\n<p>BidingResultは引数の中でFormクラスのすぐ後ろに記載します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Store</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Validated</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">StoreForm</span> storeForm<span class=\"token punctuation\">,</span><span class=\"token class-name\">BindingResult</span> bindingResult<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">getAllErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Store</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setDistrict</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getDistrict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以下のようなログが流れます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Field error in object &#x26;#39;storeForm&#x26;#39; on field &#x26;#39;name&#x26;#39;: rejected value []; codes [NotBlank.storeForm.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [storeForm.name,name]; arguments []; default message [name]]; default message [空白は許可されていません]\n\n</code></pre></div>\n<p>※エラーハンドリングについては関連記事をご確認ください。</p>\n<h2>相関チェック</h2>\n<p>相関チェックは複数の項目に対する妥当性検証です。例えばnameが入力されている場合はdistrictは必須など、何かの項目と何かの項目の両方を検証します。</p>\n<p>手順</p>\n<ul>\n<li>Validatorインターフェースを実装したクラスを作成する</li>\n<li>コントローラーでバリデーターとフォームをバインドする</li>\n<li>@Validatedアノテーションを付ける\n<ul>\n<li>単項目チェックと同様</li>\n</ul>\n</li>\n</ul>\n<h3>Validatorインターフェースを実装する</h3>\n<p>org.springframework.validation.Validatorは、以下のメソッドをオーバーライドする必要があります。</p>\n<ul>\n<li>supports\n<ul>\n<li>検証するクラス(引数)</li>\n<li>Spring設定ファイルの読み込み時にチェックされる</li>\n<li>Validatorのサポート対象の型かどうか判定されるhttps://terasolunaorg.github.io/guideline/5.4.1.RELEASE/ja/ArchitectureInDetail/WebApplicationDetail/Validation.html\n<ul>\n<li>https://terasolunaorg.github.io/guideline/5.4.1.RELEASE/ja/ArchitectureInDetail/WebApplicationDetail/Validation.html</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>validate\n<ul>\n<li>検証するクラスのオブジェクト(引数)キャストしてチェックします</li>\n<li>検証結果を保持しているErrorsインターフェース（BindingResultはErrorsを継承している)(引数)</li>\n<li>メッセージは実在するメッセージコードを指定する\n<ul>\n<li>キャストしてチェックします</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>今回はnameが8文字以上の時にdistrictが6以下であることを検証します。（謎の妥当性）</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoreValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Validator</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 定型的な書き方</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">StoreForm</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Errors</span> errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">StoreForm</span> form <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StoreForm</span><span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span> <span class=\"token operator\">&#x26;&#x26;</span> form<span class=\"token punctuation\">.</span><span class=\"token function\">getDistrict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\terrors<span class=\"token punctuation\">.</span><span class=\"token function\">rejectValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"district\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"error.required\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nameが8文字以上の時にdistrictが6以下である必要があります\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>@Componentアノテーションをつけて、コントローラーからDIできるようにしておきます。</p>\n<h3>バリデーターをFormに紐づける</h3>\n<p>手順</p>\n<ul>\n<li>バリデーターをDIする</li>\n<li>@InitBinderがついたメソッドで作成したバリデーターをWebDataBinderに追加する</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">StoreValidator</span> storeValidator<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@InitBinder</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validatorBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbinder<span class=\"token punctuation\">.</span><span class=\"token function\">addValidators</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storeValidator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この状態で、単項目チェックと同様の@Validatedアノテーションがついたメソッドが実行されるとFormのバリデーションが行われます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Store</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Validated</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">StoreForm</span> storeForm<span class=\"token punctuation\">,</span><span class=\"token class-name\">BindingResult</span> bindingResult<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">getAllErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Store</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setDistrict</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getDistrict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>バリデーションでエラーになると以下のようなエラーメッセージがログに流れます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">Field error in object 'storeForm' on field 'district': rejected value [東京]; codes [error.required.storeForm.district,error.required.district,error.required.java.lang.String,error.required]; arguments []; default message [nameが8文字以上の時にdistrictが6以下である必要があります]\n</code></pre></div>\n<h2>関連記事</h2>\n<p><a href=\"/posts/p1267\">リンク</a></p>\n<p><a href=\"/posts/p1531\">リンク</a></p>\n<p>エラーハンドリングについて</p>\n<p><a href=\"/posts/p1557\">リンク</a></p>\n<h2>参考サイト</h2>\n<p>https://b1san-blog.com/post/spring/spring-validation/</p>","slug":"p2083"},"__N_SSG":true}