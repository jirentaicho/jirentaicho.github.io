{"pageProps":{"frontMatter":{"title":"Laravelでの設計","date":"2022.03.19","description":"Laravelでの設計","categories":["Laravel"]},"content":"<p>大変参考になる記事を見つけました</p>\n<p>5年間 Laravel を使って辿り着いた，全然頑張らない「なんちゃってクリーンアーキテクチャ」という落としどころ</p>\n<p>クリーンアーキテクチャはレンタルで読んだことがあるのですが、やっぱ手元に欲しいですよね。あの手の本は。</p>\n<p>参考記事は読んでるだけでも勉強になるのですが、特に参考になった点は</p>\n<ul>\n<li>API リソースでEloquentモデルをラップする\n<ul>\n<li>Eloquentモデルの扱い方がカッコイイ！と思いました。</li>\n<li>RequestとResourceを利用することでコントローラーもスッキリ</li>\n</ul>\n</li>\n<li>Eloquentモデルを活用\n<ul>\n<li>私はなんとなくEloquentモデルを隅っこに追いやっていたのですが、LaravelならEloquentモデルを活用したほうが綺麗になりそう</li>\n</ul>\n</li>\n<li>アクションごとにUseCaseを切る\n<ul>\n<li>UseCaseからEloquentモデルを操作してデータアクセス</li>\n</ul>\n</li>\n</ul>\n<p>参考記事の参考記事もとても勉強になります。</p>\n<ul>\n<li>Laravel で Request, UseCase, Resource を使いコントロールフローをシンプルにする</li>\n</ul>\n<p>今回は上記記事を参考にして”とある”ショップを作成しました。あくまで参考です。。ということで</p>\n<p>“とある”ショップは以下が可能です</p>\n<ul>\n<li>買う</li>\n</ul>\n<p>https://github.com/jirentaicho/laravel-katati</p>\n<h2>UseCase</h2>\n<p>今回はショップでアイテムを購入するケースを考えました。購入すると以下のようなことが起きる想定です</p>\n<ul>\n<li>商品の金額とユーザーの所持金の比較を行う\n<ul>\n<li>ユーザーの所持金を減らす</li>\n</ul>\n</li>\n<li>ユーザーと在庫の妥当性を検証する\n<ul>\n<li>在庫を更新する</li>\n</ul>\n</li>\n</ul>\n<p>2つ以上のテーブルが更新されますのでUseCaseの中でUseCaseを操作する形にしました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">UserStock</span> <span class=\"token variable\">$userStock</span><span class=\"token punctuation\">,</span><span class=\"token class-name type-declaration\">MoneyAction</span> <span class=\"token variable\">$moneyAction</span><span class=\"token punctuation\">,</span><span class=\"token class-name type-declaration\">StockAction</span> <span class=\"token variable\">$stockAction</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userStock</span><span class=\"token operator\">-></span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">exists</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userStock</span><span class=\"token operator\">-></span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">exists</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 金額更新</span>\n        <span class=\"token variable\">$moneyAction</span><span class=\"token operator\">-></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userStock</span><span class=\"token operator\">-></span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$userStock</span><span class=\"token operator\">-></span><span class=\"token function\">getTotalAmt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 在庫更新</span>\n        <span class=\"token variable\">$stockAction</span><span class=\"token operator\">-></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userStock</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">rollBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$userStock</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>ドメインモデル</h2>\n<p>ここはどうしようか悩んだのですが、とりあえずEloquentモデルを内包するドメインモデルを作りました。→UserStockクラス</p>\n<p>なんか便利な運び屋みたいなクラスになっているような気がしているので、もう少し改善の余地があるなと思っています。</p>\n<h2>APIリソース</h2>\n<p>UserStockクラスはEloquentモデルを内包したドメインモデルなので、返却する値をどうやって設定しようかな？って考えたときにメソッドを作ってしまいました。→良くないような気がしてたまらない</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//　エンティティ寄りになってるけど、そもそもエンティティに寄るので一旦放置</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string single-quoted-string\">'result'</span> <span class=\"token operator\">=></span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">resource</span><span class=\"token operator\">-></span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>UserStockそのものがイカンという気もしています。</p>\n<h2>メモ</h2>\n<ul>\n<li>ActiveRecordパターンは、データベースのテーブルとクラスが紐づいたパターン。Eloquentモデルなんかはその例ですね。</li>\n<li>アサーション(assert)便利に使えます</li>\n</ul>\n<h2>自分が以前作ったもの</h2>\n<p>自分が以前作ったものは以下のようになっていました。</p>\n<h3>Eloquentモデル</h3>\n<p>私はEloquentモデルをDAOみたいな感じにしていました。</p>\n<p>ドメインオブジェクトをリポジトリに渡して、リポジトリではEloquentモデルに変換してデータアクセスを行うことをやってました。</p>\n<p>まさに記事にあるようなことが発生していたのです</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$user_id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">UserData</span><span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$mapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDataMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$mapper</span><span class=\"token operator\">-></span><span class=\"token function\">toUserData</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これが悪いかどうかは一概には判断できませんが、</p>\n<h3>APIリソース</h3>\n<p>私はAPIリソースはこんな感じで使っていました。(APIリソースという意味では使ってなかったかもしれません。)</p>\n<ul>\n<li>Eloquentモデルを直接使っていなかったのでエンティティをラップしたクラスにtoArrayメソッドを持たせる</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">CharacterList</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Arrayable</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// キャラクターのリスト</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token variable\">$characters</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getCharactersList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characters</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span><span class=\"token punctuation\">{</span>\n      \n        <span class=\"token comment\">// response->json()に適合させるために連想配列に変換します。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">CharacterData</span> <span class=\"token variable\">$character</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string single-quoted-string\">'lank'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$character</span><span class=\"token operator\">-></span><span class=\"token function\">getLank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string single-quoted-string\">'name'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$character</span><span class=\"token operator\">-></span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>関係ない話</h2>\n<p>全く関係ないのですがDockerを使っててIPアドレス足りないって怒られました（初めての経験です）</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Creating network &#x26;quot;itemshop_sail&#x26;quot; with driver &#x26;quot;bridge&#x26;quot;\nERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</code></pre></div>\n<p>参考https://www.jaga.biz/docker/ip-address-error/</p>\n<p>私はDockerのアプリケーションからコンテナを消して対応しました。このアプリ便利ですね</p>\n<p><img src=\"/1573/1.png\" alt=\"画像\"></p>","slug":"p1573"},"__N_SSG":true}