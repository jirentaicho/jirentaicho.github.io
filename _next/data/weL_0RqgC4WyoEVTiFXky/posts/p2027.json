{"pageProps":{"frontMatter":{"title":"Spring Cloudを勉強してみる","date":"2022.04.12","description":"Spring Cloudを勉強してみる","categories":["Spring"]},"content":"<p>Githubを見ていたらSpring Cloudを利用したプロジェクトを発見した。全く未知の部分なので参考サイトなどを読んで入門してみました</p>\n<ul>\n<li>発見したGithub\n<ul>\n<li>https://github.com/southwind9801/orderingsystem</li>\n</ul>\n</li>\n<li>参考サイト\n<ul>\n<li>https://spring.pleiades.io/projects/spring-cloud</li>\n<li>https://qiita.com/ryotaro76/items/45632ff117cc19544959</li>\n<li>https://lifesaver.codes/answer/eureka-client-shutting-down-unexpectedly-after-registering-with-eureka-server-2696</li>\n<li>https://stackoverflow.com/questions/68100671/nosuchmethoderror-org-springframework-boot-web-servlet-error-errorcontroller-ge</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fenterprisegeeks.hatenablog.com%2Fentry%2F2015%2F11%2F02%2F000000\">参考</a></p>\n<ul>\n<li>私の作ったプロジェクト\n<ul>\n<li>https://github.com/jirentaicho/spring-micro-service-test</li>\n</ul>\n</li>\n</ul>\n<h2>はじめに</h2>\n<p>今からやることはもうレガシーだと思います。ただ、Springでマイクロサービスってこんな感じ？ってのを入門するためにやっています。</p>\n<h2>準備</h2>\n<p>まずは事前確認します。gradleを利用して作成します。用語は超ザックリです。</p>\n<h4>マイクロサービス</h4>\n<p>アプリケーションの機能を最小単位のコンポーネントに分割して、他のサービスに影響を与えることなくビルド、テスト、デプロイ、アップデートができる</p>\n<h4>リバースプロキシ</h4>\n<p>外部からのアクセスに対する全ての接続を中継するプロキシサーバー負荷分散、セキュリティ強化などのメリットがある。</p>\n<h4>Eureka Server</h4>\n<p>https://www.tutorialspoint.com/spring_boot/spring_boot_eureka_server.htm</p>\n<h4>@EnableEurekaServer</h4>\n<p>サービスレジストリとしてEurekaサーバを作成する</p>\n<h4>サービスレジストリ</h4>\n<p>アプリケーションデータ構造のデータベース</p>\n<h4>@EnableEurekaClient</h4>\n<p>https://www.javadoc.io/doc/org.springframework.cloud/spring-cloud-netflix-eureka-client/1.1.2.RELEASE/org/springframework/cloud/netflix/eureka/EnableEurekaClient.html</p>\n<h4>@EnableDiscoveryClient</h4>\n<p>Eureka Server へ 自身を登録するサービスは Eureka Client と呼ばれます。</p>\n<h4>@EnableZuulProxy</h4>\n<p>プロキシとして動作させます。</p>\n<h3>プロジェクトの作成</h3>\n<p>参考サイトを見て作っていきます。</p>\n<h3>EurekaServer</h3>\n<ul>\n<li>EurekaServerの作成\n<ul>\n<li>Spring-Stertar-ProjectからEurikaServerの依存を追加して新規作成する</li>\n</ul>\n</li>\n<li>@EnableEurekaServer</li>\n<li>application.ymlを修正する</li>\n<li>サーバーを起動する</li>\n</ul>\n<p><img src=\"/2027/1.png\" alt=\"画像\"></p>\n<h3>WebService</h3>\n<p>ここが一番迷いました。まず最新のSpringBootでは動かないです。動いたbuild.gradleを載せておきます。</p>\n<ul>\n<li>WebService\n<ul>\n<li>Spring-Stertar-ProjectからEurikaServerの依存を追加して新規作成する</li>\n</ul>\n</li>\n<li>Zuulは別途依存追加\n<ul>\n<li>もうサポートしていないらしい</li>\n</ul>\n</li>\n<li>application.ymlの修正をする</li>\n<li>build.gradleでspringのバージョンを下げる\n<ul>\n<li>https://stackoverflow.com/questions/68100671/nosuchmethoderror-org-springframework-boot-web-servlet-error-errorcontroller-ge</li>\n</ul>\n</li>\n<li>spring-boot-starter-webの依存を追加する\n<ul>\n<li>追加しないと警告になります</li>\n<li>プロジェクト作成時にwebを追加しておいても良いです</li>\n</ul>\n</li>\n<li>@EnableZuulProxy</li>\n<li>@EnableEurekaClient</li>\n</ul>\n<p>build.gradle</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">plugins {\n\tid 'org.springframework.boot' version '2.1.3.RELEASE' //変更\n\tid 'io.spring.dependency-management' version '1.0.11.RELEASE'\n\tid 'java'\n}\n\ngroup = 'com.volkruss'\nversion = '0.0.1-SNAPSHOT'\nsourceCompatibility = '11'\n\nrepositories {\n\tmavenCentral()\n}\n\next {\n\tset('springCloudVersion', \"Greenwich.RELEASE\") //変更\n}\n\ndependencies {\n\timplementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'\n\t// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-zuul\n\timplementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul:2.2.10.RELEASE'\n\t// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web\n\timplementation 'org.springframework.boot:spring-boot-starter-web:2.6.6'\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\ndependencyManagement {\n\timports {\n\t\tmavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n\t}\n}\n\ntasks.named('test') {\n\tuseJUnitPlatform()\n}\n\n</code></pre></div>\n<p>starter-webがないとエラー吐きます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Registered instance BACKEND-SERVICE/LAPTOP-GQK0K0U9:backend-service:8002 with status DOWN (replication=true)\nCancelled instance BACKEND-SERVICE/LAPTOP-GQK0K0U9:backend-service:8002 (replication=false)\nRegistry: cancel failed because Lease is not registered for: BACKEND-SERVICE/LAPTOP-GQK0K0U9:backend-service:8002</code></pre></div>\n<p>application.yml</p>\n<div class=\"remark-highlight\"><pre class=\"language-JSON\"><code class=\"language-JSON\">spring:\n  application:\n    name: web-service\nserver:\n  port: 8001\neureka:\n  client:\n    service-url: \n      defaultZone: http://localhost:8761/eureka\n  instance:\n    prefer-ip-address: true\nzuul:\n  routes:\n    backend-service:\n      path: &#x26;#39;/api/**&#x26;#39;</code></pre></div>\n<h4>その他</h4>\n<p>アノテーション不要っぽい？？後述の@EnableDiscoveryClientも同じくhttps://stackoverflow.com/questions/60349535/what-is-use-of-enableeurekaclient</p>\n<h3>BackendService</h3>\n<ul>\n<li>BackendServiceを作る\n<ul>\n<li>Eureka Discoveryの依存を追加する</li>\n<li>@EnableDiscoveryClient</li>\n<li>実際のコントローラーや処理を作成する</li>\n<li>application.ymlを作成する</li>\n</ul>\n</li>\n</ul>\n<p>ここは単体でも動作するのですが、WebServiceを通してもアクセスができます。今回の場合は単にStringを返しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BackendController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"こんにちは！\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>WebServiceからアクセス</li>\n</ul>\n<p><img src=\"/2027/2.png\" alt=\"画像\"></p>\n<ul>\n<li>BackendServiceから直接アクセス</li>\n</ul>\n<p><img src=\"/2027/3.png\" alt=\"画像\"></p>\n<p>もう一つBackendServiceを作成してみました。</p>\n<p>すると以下のように追加されています</p>\n<p><img src=\"/2027/4.png\" alt=\"画像\"></p>\n<p><img src=\"/2027/5.png\" alt=\"画像\"></p>\n<p>簡単な設定でこういったことが実験できて面白いですね。またSTSでも実際に動かせるのも開発者にとっては便利ですね。</p>","slug":"p2027"},"__N_SSG":true}