{"pageProps":{"frontMatter":{"title":"C# | yaml | 気色の悪い構造を解析する","date":"2021.10.14","description":"C# | yaml | 気色の悪い構造を解析する","categories":["WPF"]},"content":"<p>こんにちは。</p>\n<p>この記事は前回の記事にもリンクしてあります。</p>\n<h3>複雑な構造を表現する</h3>\n<p>yamlファイルを作るときに大変だったこととして、以下のような気色の悪い構造になっている場合の解析について記載します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">scenario:\n  first:\n    type: MESSAGE\n    next: choiceman\n    back: back.jpg\n    right: keke.png\n    left: kanon.png\n    render:\n    - speaker: 可可\n      message:\n      - かのん見て！！！\n      - ぼろーーーーん！！\n    - speaker: かのん\n      message:\n      - 歌える\n      - 一人じゃないから\n    - speaker: 可可\n      message:\n      - くぅうううう\n</code></pre></div>\n<p>scenarioクラスの中にfirstクラスがあってと複雑化していますが、Dictionaryを使って表現しました。</p>\n<p>参考：C# | Dictionaryを使って柔軟なyamlファイルを作成する</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dictionary</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Scenario</span><span class=\"token punctuation\">></span></span> scenario <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>こうするとfirstはstringで、その中身をScenarioクラスで管理するようにできます。</p>\n<p>この後に問題となるのがrenderの箇所でした。renderはクラスとして、それを配列で管理しています。さらにrenderクラスにはmessageという配列がある状態です。</p>\n<p>yamldotnetは、リストでも配列を表現できますのでRenderYamlというクラスのリストをrenderとして用意します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">RenderYaml</span><span class=\"token punctuation\">></span></span> render <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>RenderYamlクラスは以下のような定義でmessageのリストを持っています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RenderYaml</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> string speaker <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">></span></span> message <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これでシリアライズとデシアライズはOKです。</p>\n<h3>どうやって画面に出すか</h3>\n<p>ここからが少し問題でした。じゃあこいつらをどうやって画面に出力するのか？</p>\n<p>まずは、デシアライズしたyamlファイルを管理できるYamlManagerクラスをシングルトンで作成しておきます。</p>\n<p>そしてシナリオ一覧を表示するには、Dictionaryのkey情報だけを持ったコンボボックスが必要でしたので、以下のようにしてリストを作成しました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> <span class=\"token class-name\">YamlManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scenarioData<span class=\"token punctuation\">.</span>scenario<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">.</span>ToList<span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token namespace\">keys<span class=\"token punctuation\">.</span></span>ForEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token namespace\">this<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span></span>Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これでkey情報をループしてkey情報だけが表示されるコンボボックスのソースを作成します。</p>\n<p>上記のkey情報を元にシナリオデータを取得します。</p>\n<p>→ストアクラスを作成して、表示中のkey情報をいつでも取り出せるようにしました。（frameを使っていたため）</p>\n<p><img src=\"/151/1.png\" alt=\"画像\"></p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> choiceKey <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">myComboBox<span class=\"token punctuation\">.</span></span>SelectedItem<span class=\"token punctuation\">.</span>ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ここでページを変更して、choiceKeyを渡します。</span>\n<span class=\"token class-name\">Store</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CurrentScenarioKey <span class=\"token operator\">=</span> choiceKey<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>messageも複数あるので、index番号をコンボボックスに表示して、それを選択したら詳細をテキストブロックに表示します。</p>\n<p>以下のように、mytalkListには配列のインデックス番号を列挙させて、そのインデックス番号に応じて、mylistboxというListBoxにmessageの要素を出します。ListBoxの要素がクリックされたら、textboxに表示させています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Label</span> <span class=\"token attr-name\">Content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>会話リスト<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ComboBox</span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mytalkList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ItemsSource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding TalkList}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">SelectionChanged</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectArrayIndex<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Label</span> <span class=\"token attr-name\">Content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>会話内容<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ListBox</span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mylistbox<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">ItemsSource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding TalkDetailList}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">SelectionChanged</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TalkDetailEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Label</span> <span class=\"token attr-name\">Content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>会話内容<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>TextBox</span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mydetail<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">TextWrapping</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p><img src=\"/151/2.png\" alt=\"画像\"></p>\n<p>index番号のリストは以下のようにして作成します。</p>\n<p>便利なYamlManagerから、ストアに設定されているkey情報を元にデータを取ってきます。</p>\n<p>あとはIndexをToStringしてあげればOKです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">this.talkList = new ObservableCollection<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>string</span><span class=\"token punctuation\">></span></span>();\nvar scenarioData = YamlManager.getInstance().scenarioData.scenario[currentKey];\nvar messages = scenarioData.render;\nforeach (var item in messages)\n{\n    this.talkList.Add(messages.IndexOf(item).ToString());\n}\n</code></pre></div>\n<p>indexは文字列なので、messages[Int32.Parse(index)]でint化してmessageの配列から、メッセージの内容を取得します。</p>\n<p>取得したメッセージをtalkDetailListに突っ込んで完了です。常にコンボボックスの変更を監視して値を変更している感じです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 選択中のインデックス番号を取得して</span>\n<span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">mytalkList<span class=\"token punctuation\">.</span></span>SelectedItem<span class=\"token punctuation\">.</span>ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> scenarioData <span class=\"token operator\">=</span> <span class=\"token class-name\">YamlManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scenarioData<span class=\"token punctuation\">.</span>scenario<span class=\"token punctuation\">[</span>currentKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> messages <span class=\"token operator\">=</span> scenarioData<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">[</span><span class=\"token class-name\">Int32<span class=\"token punctuation\">.</span>Parse</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 話し手を設定する。</span>\n<span class=\"token class-name\"><span class=\"token namespace\">spekaer<span class=\"token punctuation\">.</span></span>Text</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>speaker<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token namespace\">this<span class=\"token punctuation\">.</span>talkDetailList<span class=\"token punctuation\">.</span></span>Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 会話内容をリストに突っ込む。</span>\n<span class=\"token class-name\"><span class=\"token namespace\">list<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span></span>ForEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">this<span class=\"token punctuation\">.</span>talkDetailList<span class=\"token punctuation\">.</span></span>Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>簡単に便利なクラスを紹介します。</p>\n<p>基本的には変数を保持しておくシングルトンクラスです。</p>\n<h3>YamlManager</h3>\n<p>変数の一覧はYamlオブジェクトのクラスでDictionaryを利用して以下のようにデシアライズしたりシリアライズされます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dictionary</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">></span></span> valiable <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>基本的に画面に表示するリストはObservableCollectionが楽でしたので、getValiableListメソッドで、ObeservableCollectionにDictionaryの内容を突っ込んでいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlManager</span>\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">YamlManager</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YamlManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//ここはそのうち除去してください。</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">YamlData</span> yamlData <span class=\"token punctuation\">{</span> set<span class=\"token punctuation\">;</span> get<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScenarioData</span> scenarioData <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">YamlManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">YamlManager</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ObservableCollection</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Dictionary</span><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getValiableList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> oc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObservableCollection</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Dictionary</span><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            foreach <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyValuePair</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">></span></span> item in <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scenarioData<span class=\"token punctuation\">.</span>valiable<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token namespace\">oc<span class=\"token punctuation\">.</span></span>Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token class-name\"><span class=\"token namespace\">item<span class=\"token punctuation\">.</span></span>Key</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">item<span class=\"token punctuation\">.</span></span>Value</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> oc<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Store</h3>\n<p>Sotreはシナリオ名を保持するだけです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Store</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Store</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/*</span>\n<span class=\"token comment\">         * 利用する値を記載しています。</span>\n<span class=\"token comment\">         * インスタンスを取得してから利用するようにするため、</span>\n<span class=\"token comment\">         * staticな変数にはしないでください。</span>\n<span class=\"token comment\">         * */</span>\n\n        <span class=\"token keyword\">public</span> string <span class=\"token class-name\">CurrentScenarioKey</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>YamlDotnetを使って割と気色の悪い構造のyamlファイルをデシアライズしても、扱い方はそれぞれですがきちんと扱うことができます。</p>\n<p>最初のうちはyamlファイル使うならjs側のelectronがいいかもしれないなんて言いましたが、YamlDotNet一択です。。</p>","slug":"p151"},"__N_SSG":true}