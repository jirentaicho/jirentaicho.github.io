{"pageProps":{"frontMatter":{"title":"SpringBoot | Flywayを使ってデータベースの構成管理を行う","date":"2022.05.24","description":"SpringBoot | Flywayを使ってデータベースの構成管理を行う","categories":["Spring"]},"content":"<p>Flywayを使うと用意しておいたSQLファイルをSpringBoot実行時に流すことができます。Dockerとかでデータベース環境を作る時も初期データを流せますがあんな感じです。</p>\n<p>ただしアプリケーション側にSQLファイルを用意しておけるので、チーム開発などで便利に使えると思います。</p>\n<h2>概要</h2>\n<p>ざっくりとこの記事の概要を確認します</p>\n<ul>\n<li>Flywayの環境を構築する</li>\n<li>Flyway_schema_historyテーブルとファイル名について確認する</li>\n<li>リピータブルマイグレーションについて確認する</li>\n</ul>\n<p>基本的には作成したSQLさえ用意していれば勝手にマイグレーションが行われるのですが、flyway_schema_historyのバージョン番号とか、ファイル名とか細かいところでミスることがあるので、その辺を重点的に記載していきます。</p>\n<h2>ルール</h2>\n<p>Flywayを使ってマイグレーションするときのルールを確認します</p>\n<ul>\n<li>flyway_schema_historyテーブルという管理テーブルが作成され、そこではバージョン番号やチェックサムなどを管理しています。</li>\n<li>マイグレーションファイルはV1__hoge.sqlやR__1_hoge.sqlのような命名規則に従って作成します\n<ul>\n<li>V1はバージョン番号でそのSQLファイルが実行されるたびにflyway_schema_historyテーブルが更新されます</li>\n<li>flyway_schema_historyテーブルのバージョンが1の時、V2__というファイル名から実行されます</li>\n<li>V1__hoge.sqlとV1__fuga.sqlのように同じバージョン番号のファイルは共存できません</li>\n</ul>\n</li>\n<li>R__で始まるファイルはリピータブルマイグレーションです\n<ul>\n<li>バージョン管理をしません</li>\n<li>ファイルに変更があると実行されます(チェックサムを見ています)</li>\n<li>実行準制御のためにR__1_create、R__2_insertのように作成するのが良いかと思います</li>\n</ul>\n</li>\n</ul>\n<p>V1__とV1__など同じバージョンを指定すると以下のようなエラーが発生します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Caused by: org.flywaydb.core.api.FlywayException: Found more than one migration with version 1\n</code></pre></div>\n<h1>環境</h1>\n<p>gradleにて依存の追加を行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">dependencies <span class=\"token punctuation\">{</span>\n\timplementation <span class=\"token string\">'org.flywaydb:flyway-core'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>設定ファイル</h2>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">spring:\n  datasource:\n    driver-class-name: org.postgresql.Driver\n    url: jdbc:postgresql://192.168.11.13:5432/school\n    username: kakine\n    password: teitoku\n  flyway:\n    enable: true\n    baseline-on-migrate: true # 既にテーブルがあるデータベースでもマイグレーションを実行する\n    baseline-version: 0 # flyway_schema_historyの初期バージョン番号を指定\n</code></pre></div>\n<ul>\n<li>baseline-on-migrateで、既存のテーブルがある状態でもマイグレーションを行ってくれるようにします。\n<ul>\n<li>もともと空のデータベースでの実行が前提らしいので、既存テーブルなどがある場合はこれを付与しておきます。</li>\n</ul>\n</li>\n<li>baseline-versionは初期実行時のflyway_schema_historyのバージョン番号を指定します\n<ul>\n<li>デフォルトは1です</li>\n<li>なのでV1__hoge.sqlのようなファイルは、デフォルト値のまま実行すると無視されます</li>\n</ul>\n</li>\n</ul>\n<p>◆baseline-on-migrateの設定がないと以下のようなエラー</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x26;#39;flywayInitializer&#x26;#39; defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.api.FlywayException: Found non-empty schema(s) &#x26;quot;public&#x26;quot; but no schema history table. Use baseline() or set baselineOnMigrate to true to initialize the schema history table.\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804) ~[spring-beans-5.3.19.jar:5.3.19]</code></pre></div>\n<h2>SQLファイルの設置</h2>\n<p>resources/db/migrationにsqlファイルを命名規則に沿って作成し設置しておく</p>\n<p><img src=\"/2595/1.png\" alt=\"画像\"></p>\n<ul>\n<li>createしてからinsertするので順番はcreateが先になっています</li>\n<li>Rはバージョン管理しないのでR1__のように記載すると流れません\n<ul>\n<li>createを優先させるためR__1_のようにファイル名をつけています</li>\n</ul>\n</li>\n<li>V1から始まるのはbaseline-version: 0にしているからです。もしもデフォルトで始める場合はV2からファイルを設置する必要があります。</li>\n</ul>\n<p>この状態でアプリケーション実行時にマイグレーションされます。</p>\n<p>正常に動くと用意したSQLファイルの定義とflyway_schema_historyテーブルが作成されます</p>\n<p><img src=\"/2595/2.png\" alt=\"画像\"></p>\n<ul>\n<li>version=0がデフォルトで実行されるflyway_schema_historyテーブル作成のマイグレーションです\n<ul>\n<li>デフォルトはversion=1です</li>\n</ul>\n</li>\n<li>R__で作成しているリピータブルマイグレーションにはバージョン番号が付与されていません</li>\n<li>checksumが格納されています\n<ul>\n<li>R__のファイルはファイルに修正が入ると次回実行されます</li>\n</ul>\n</li>\n<li>次はV3__hoge.sqlからSQLファイルが実行されます</li>\n</ul>\n<p>以下は調査記録です</p>\n<p>https://zenn.dev/misaka/scraps/4fb5a7efcadaf5</p>\n<p>今回のソースコードは以下にあげております</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample</p>\n<h2>参考</h2>\n<ul>\n<li>https://kojion.com/posts/806\n<ul>\n<li>とても丁寧に解説されています</li>\n</ul>\n</li>\n</ul>","slug":"p2595"},"__N_SSG":true}