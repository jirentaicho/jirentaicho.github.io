{"pageProps":{"frontMatter":{"title":"バリデーション | 現場至上主義 Spring Boot2 徹底活用","date":"2022.02.20","description":"バリデーション | 現場至上主義 Spring Boot2 徹底活用","categories":["Spring"]},"content":"<p>この本はGithubからコードを持ってくるのが前提なのですが、内容としては非常に濃いので結構読んでいます。</p>\n<p>というわけでこの本を使って勉強した記録を残していきます。</p>\n<p>本</p>\n<p>現場至上主義 Spring Boot2 徹底活用 単行本 – 2018/11/30</p>\n<p>ソース全体</p>\n<p>https://github.com/miyabayt/spring-boot-doma2-sample</p>\n<p>以前の記事(起動）</p>\n<p><a href=\"/posts/p459\">リンク</a></p>\n<h2>バリデーション</h2>\n<p>SpringのバリデーションはValidatorインターフェースを実装して、@InitBinderアノテーションを付けたコントローラーのメソッドからValidatorの実装クラスをWebDataBinderに紐づけます。</p>\n<p>※例</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span>\n <span class=\"token class-name\">UserFormValidator</span> validator<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@initBinder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userForm\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">initBind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span>\n binder<span class=\"token punctuation\">.</span><span class=\"token function\">addValidators</span><span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>入力チェックとしてのバリデーションは、基底クラスにAbstractValidatorという抽象クラスを用意して、StaffFormValidatorのように継承して利用する。</p>\n<p>ここはテンプレートメソッドパターンで入力チェックの詳細(doValidate)は実装クラスに任せる。</p>\n<p>型をとすることでObject型をT型にキャストしている。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doValidate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StaffForm</span> form<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Errors</span> errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// TODO check</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">StaffHtmlControllerクラスでバインドしています。</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@InitBinder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"staffForm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validatorBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        binder<span class=\"token punctuation\">.</span><span class=\"token function\">addValidators</span><span class=\"token punctuation\">(</span>staffFormValidator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<h3>Errors</h3>\n<p>バリデーションの結果はBindingResultから取得できます。</p>\n<p>ここはvalidateメソッドの引数に渡っているErrorsに対してrejectValueメソッドにエラー項目とメッセージを渡すことでErrorsにエラーを格納できて、hasErrorsメソッドなどで有無を確認できます</p>\n<p>https://spring.pleiades.io/spring-framework/docs/current/javadoc-api/org/springframework/validation/AbstractBindingResult.html</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//エラーあり</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","slug":"p1267"},"__N_SSG":true}