{"pageProps":{"frontMatter":{"title":"TypeScript | Webpack | 自分のコレクションサイトを作る","date":"2022.02.05","description":"TypeScript | Webpack | 自分のコレクションサイトを作る","categories":["未分類"]},"content":"<p>フィギュアやぬいぐるみなど、家にコレクションしているものが多くなってくると、飾っておくのが困難になりますよね。</p>\n<p>かといってどこかにしまってしまえば、それはもうフィギュアではなく、しまった物になってしまいます。</p>\n<p>そんな悩みを解決するためにコレクションサイトを作りました。</p>\n<p>https://github.com/jirentaicho/typescript-figurecollection</p>\n<p>下が棚（カテゴリ）で上が、そのカテゴリに属する画像の一覧です。</p>\n<p><img src=\"/920/1.png\" alt=\"画像\"></p>\n<p>画像をクリックすると画像の詳細が表示されます。</p>\n<p><img src=\"/920/2.png\" alt=\"画像\"></p>\n<p>当記事ではソースコードはザックリ解説して、環境構築部分は流すコマンドを記載します（自分のメモです）</p>\n<h2>環境構築</h2>\n<p>今回は以下のものを揃えます</p>\n<ul>\n<li>TypeScirpt</li>\n<li>Webpack</li>\n<li>ts-loader</li>\n<li>sass</li>\n<li>Animjs</li>\n<li>tailwind3</li>\n</ul>\n<p>Node.jsは予めインストールしてある状態で記載していきます。</p>\n<h4>TypeScriptの導入</h4>\n<p>以下のコマンドを実施します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm init -y\nnpm install typescript</code></pre></div>\n<p>バージョン確認</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx tsc --version\nVersion 4.5.5</code></pre></div>\n<h4>tsconfigの作成</h4>\n<p>今回は特に修正を行いませんが、設定ファイルは作成します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx tsc --init</code></pre></div>\n<h4>webpackの導入</h4>\n<p>あとで設定ファイルを修正します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i webpack\nnpm i webpack-cli</code></pre></div>\n<h4>ts-loaderの導入</h4>\n<p>typescriptを使うので導入します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i ts-loader</code></pre></div>\n<h4>sassの導入</h4>\n<p>一部スタイルをsassにて記載。一緒にローダーもインストールします</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i --dev sass sass-loader css-loader style-loader</code></pre></div>\n<h4>webpack.config.js</h4>\n<p>ファイルを手動で作成して、以下のように修正する</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//mode: \"development\", // バンドルモード</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/main.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 入口となるファイル</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//　バンドルしたファイルの出力先</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// publicフォルダ</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//インポート時ファイル拡張子を省略します</span>\n        <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>scss</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//後ろから適用される</span>\n                <span class=\"token comment\">// style-loader = JS の文字列から `style` ノードを生成する。</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>ts<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">performance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">maxAssetSize</span><span class=\"token operator\">:</span> <span class=\"token number\">99999999</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//バンドル可能サイズを変更する</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>Animjsをインストール</h4>\n<p>typescriptで使うので以下のようにしてインストール</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm install --save @types/animejs</code></pre></div>\n<h4>tailwindをインストール</h4>\n<p>tailwind3から若干設定ファイルの記述が変わったようですが、今回は対象とするものを指定するだけです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i -D tailwindcss</code></pre></div>\n<p>初期化します。これでtailwind.config.jsが作成されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx tailwindcss init</code></pre></div>\n<p>以下のように修正。今回はtsファイルを使うのがポイントです。ここを記載しないと利用するクラスが出力されません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//tailwwindを利用している箇所を指定する（→cssの出力対象にするため）</span>\n  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>input.cssをoutput.cssとしてファイルを出力します。</p>\n<p>input.cssをルートに作成</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> base<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> components<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> utilities<span class=\"token punctuation\">;</span></span>\n</code></pre></div>\n<p>以下のコマンドでoutput.cssを出力します。tsファイルの中で利用しているtailwindcssのクラスが出力されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx tailwindcss -i ./src/input.css -o ./public/output.css</code></pre></div>\n<h4>index.htmlの作成</h4>\n<p>webpackによるバンドルは以下のコマンドで行います</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx webpack</code></pre></div>\n<p>output.cssとbundle.jsをindex.htmlで読み込みます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h2>ソースコード</h2>\n<p>サイトは以下のような構成です。画面上の80vhはコレクションの一覧エリアです。</p>\n<p>そして画面下の20vhがカテゴリ(棚)です。</p>\n<p>カテゴリをクリックすると、カテゴリに登録されている画像の一覧が画像一覧エリアに表示されます。</p>\n<p><img src=\"/920/3.png\" alt=\"画像\"></p>\n<h3>DomCreatorの作成</h3>\n<p>今回は全てをtsで作成することになります。通常はcreateElementメソッドを利用してElementを作成します。しかし、これは記載量が増えてしまいます</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&#x3C;</span>HTMLDivElement<span class=\"token operator\">></span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OUTER_STYLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>そのためDomCreatorというビルダークラスを作りました。以下のように利用できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> itemarea <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DomCreator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">idName</span><span class=\"token punctuation\">(</span>DomConst<span class=\"token punctuation\">.</span><span class=\"token constant\">ITEM_AREA_ID</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span>PageLogic<span class=\"token punctuation\">.</span><span class=\"token constant\">ITEM_AREA_STYLE</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>画像Elementは多用するので、同じように作成したいのですが実は型が適合しないのでsrcメソッドが使えなくなります。</p>\n<p>HTMLElementを受取るという仕組みなら、divやらclassやらを設定できますが、画像のアドレスは設定できないのです。</p>\n<p>srcはHTMLImageElementのメソッドだからです。</p>\n<p>そのため、DomCreatorクラスは宣言を以下のようにしています</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">class DomCreator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>K</span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">keyof</span> <span class=\"token attr-name\">HTMLElementTagNameMap</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>HTMLElementTagNameMapというのはHTMLタグが定義されたインターフェースなので、Element作成時に以下のようにHTMLElementTagNameMapから適合する型を取得するようにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>HTMLElementTagNameMap[K]</span><span class=\"token punctuation\">></span></span>document.createElement(tagName);\n</code></pre></div>\n<p>ちなみにこの処理は、既存の処理をまねています。typescriptのソースで以下のような記載があるので、そこを参考にしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**\n     * Creates an instance of the element for the specified tag.\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">tagName</span> The name of an element.\n     */</span>\n    <span class=\"token generic-function\"><span class=\"token function\">createElement</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> HTMLElementTagNameMap<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>tagName<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ElementCreationOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLElementTagNameMap<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ソースコードは以下になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DomCreator<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> HTMLElementTagNameMap<span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> result <span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">|</span> HTMLImageElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>tagName<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token operator\">&#x3C;</span>HTMLElementTagNameMap<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">idName</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DomCreator<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">className</span><span class=\"token punctuation\">(</span>className<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DomCreator<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">srcName</span><span class=\"token punctuation\">(</span>srcName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DomCreator<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLImageElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> srcName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is not HTMLImageElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>アニメーション</h3>\n<p>https://animejs.com/</p>\n<p>anime.jsを利用すれば簡単にアニメーション効果を利用することができますし、animeメソッドにパラメータを渡すだけでOKです。</p>\n<p>Animateクラスを作成して、anime.jsをラップしました。これによってDomElementを渡すか、IDを渡すかという選択肢でアニメーションさせられます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> anime <span class=\"token keyword\">from</span> <span class=\"token string\">'animejs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animate</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">PlayWithId</span><span class=\"token punctuation\">(</span>targetId <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> anime<span class=\"token punctuation\">.</span>AnimeParams<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n        params<span class=\"token punctuation\">.</span>targets <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>targetId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">anime</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">PlayWithDom</span><span class=\"token punctuation\">(</span>dom<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> anime<span class=\"token punctuation\">.</span>AnimeParams<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n        params<span class=\"token punctuation\">.</span>targets <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dom<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">anime</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>オーバーレイ</h3>\n<p>普段はオーバーレイは非表示ですが、画像の詳細をクリックしたときには、背景を暗くして（オーバーレイを表示して）画像を中央に表示します。</p>\n<p>これはtailwindcssのhiddenプロパティをつけるかつけないかで、表示非表示を切り替えることができます。</p>\n<ul>\n<li>写真をクリックしたらオーバーレイ表示</li>\n<li>オーバーレイをクリックしたら非表示</li>\n</ul>\n<p>としてあげれば簡潔です。</p>\n<p>システムの初期化時に以下のようにしてオーバーレイを作成しておきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// オーバーレイエリアの作成</span>\n<span class=\"token keyword\">const</span> overrayarea <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DomCreator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">idName</span><span class=\"token punctuation\">(</span>DomConst<span class=\"token punctuation\">.</span><span class=\"token constant\">OVERRAY_AREA_ID</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span>PageLogic<span class=\"token punctuation\">.</span><span class=\"token constant\">OVER_RAY_STYLE</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// オーバーレイを閉じる時の動作になります。</span>\noverrayarea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Animate<span class=\"token punctuation\">.</span><span class=\"token function\">PlayWithId</span><span class=\"token punctuation\">(</span>DomConst<span class=\"token punctuation\">.</span><span class=\"token constant\">CURRENT_IMAGE_ID</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        scale<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n        easing<span class=\"token operator\">:</span> <span class=\"token string\">'easeInOutSine'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">complete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>anime.jsではアニメーション完了時にcompleteでコールバック関数を実行することもできます</p>\n<p>オーバーレイを表示したら、表示中の画像にアニメーションをさせて、オーバーレイを閉じています。</p>\n<h3>Dom</h3>\n<p>Dom操作に関するクラスを作成しておいて、必要な時に使っています。（オーバーレイの追加などは、このクラスを介さずに使ってます）</p>\n<p>主に子要素の一括登録や、一括削除や、要素の取得処理を実装します。</p>\n<p>要素の取得についてはgetElementByIdメソッドを使うのですが、これはnullが返る場合もあるので、nullなら例外みたいにしてしまって面倒な処理をメソッドに押し込んでいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**\n     * idのDomを取得します。\n     * 取得に失敗した場合は例外とします。\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">id</span> \n     * <span class=\"token keyword\">@returns</span> HTMLElement\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getElementByIdWithException</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">対象のDOMが存在しません id : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">対象のDOMが存在しません id : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ItemとShelf</p>\n<p>Itemはコレクションの画像（写真）を表しています。Shelfは棚で棚の中に写真がいくつか管理されている状態になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> shelfa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shelf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ラブライブ\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kanon.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chisato.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ren.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keke.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sumire.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ItemもShelfもそれぞれ、自身をHTMLとして表示する機能と、クリックイベントを持っています。</p>\n<p>例えばShelfのクリックイベントで、自身が保有しているItemをHTMLに表示してあげる必要があります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">clickEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> parrent <span class=\"token operator\">=</span> Dom<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByIdWithException</span><span class=\"token punctuation\">(</span>DomConst<span class=\"token punctuation\">.</span><span class=\"token constant\">ITEM_AREA_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 対象DIVのDOMの要素を空にする必要がある</span>\n    Dom<span class=\"token punctuation\">.</span><span class=\"token function\">clearChildNode</span><span class=\"token punctuation\">(</span>parrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 対象DIVにITEMを全て追加する</span>\n    Dom<span class=\"token punctuation\">.</span><span class=\"token function\">appendAllChild</span><span class=\"token punctuation\">(</span>\n        parrent<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHTMLElementArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>棚は画像とテキストでできています。innerElementが文字列の箇所です。</p>\n<p>さらに棚自体に先ほど定義したクリックイベントをイベントリスナーにアタッチしてあげます。</p>\n<p><img src=\"/920/4.png\" alt=\"画像\"></p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// まずはshelfとしてのdiv要素を作成する</span>\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DomCreator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">idName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OUTER_STYLE</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageName <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url(asset/images/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clickEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> innerElement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DomCreator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INNERT_STYLE</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    innerElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>                            \n\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>innerElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Itemも同じような作りなので、Shelfが持っているItemを描画する際には、ItemのgetHtmlメソッドを呼び出す必要があります。</p>\n<p>ShelfはItemを配列で管理しているので、それぞれItem#getHtmlの結果を返してあげるメソッドを定義しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**\n     * ITEM配列をHTMLElementの配列に変換して返します。\n     * <span class=\"token keyword\">@returns</span> Array&#x3C;HTMLElement>\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">toHTMLElementArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&#x3C;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> item <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このような関数型ライクな書き方は、様々な言語で使えるので引き出しとして持っておくと良いと思います。</p>\n<h3>棚を管理するクラス</h3>\n<p>棚を管理するクラスを作れば、全ての棚を画面に描画できます。</p>\n<p>Settingクラスという名前にしていますが、変えてもよさそうです。。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">private</span> shelfs<span class=\"token operator\">:</span> Record<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>Shelf<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addShelf</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> shelf <span class=\"token operator\">:</span> Shelf<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shelfs<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> shelf<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">drawDomShelfs</span><span class=\"token punctuation\">(</span>parrent <span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shelfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            parrent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shelfs<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Record型を使っていますが特別な理由がないので使わなくてもOKです。動きを見るために使ったままになっていました。</p>\n<h3>定数</h3>\n<p>id名などは定数専門のDomConstクラスに定義しましたが、スタイルなどはItemとShelfでそれぞれ定義しました。</p>\n<p>こういったDomの操作を全てTypeScriptから行うのも楽しいですね。</p>","slug":"p920"},"__N_SSG":true}