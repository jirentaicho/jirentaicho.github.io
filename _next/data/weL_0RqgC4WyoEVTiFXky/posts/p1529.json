{"pageProps":{"frontMatter":{"title":"Java | ddd-javaからトランザクション処理を学ぶ","date":"2022.03.11","description":"Java | ddd-javaからトランザクション処理を学ぶ","categories":["Java"]},"content":"<p>私が好きなプロジェクト</p>\n<p>https://github.com/jkazama/ddd-java</p>\n<p>このプロジェクトでは以下のように流れるようなインターフェースで処理の見通しが良くなっている。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CashInOut</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUnprocessedCashOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> accId <span class=\"token operator\">=</span> <span class=\"token function\">actor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TxTemplate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>txm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readIdLock</span><span class=\"token punctuation\">(</span>idLock<span class=\"token punctuation\">,</span> accId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tx</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">CashInOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">findUnprocessed</span><span class=\"token punctuation\">(</span>rep<span class=\"token punctuation\">,</span> accId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>トランザクションテンプレートを取得して、参照専用にして、指定したIDにロックをかけて、振込依頼情報を検索する。</p>\n<p>メソッドチェーンは自身のインスタンスを返して実現しています。</p>\n<ul>\n<li>ofしてインスタンスを取得して、readOnlyは自身のインスタンスを返却しています</li>\n<li>readIdLockも仕組みは同じです。自身のインスタンスを返却しています</li>\n</ul>\n<p>txメソッドはSupplierを受取ります。SupplierはfactoryのようなものでT型のインスタンスを返却するラムダ式を渡します。ここではDBから取得したListを返却します。</p>\n<p>順序をまとめると</p>\n<ul>\n<li>TxTemplateを作成する(TransactionTemplateを変数で保持しているクラス)</li>\n<li>TransactionTemplateを読取専用にする\n<ul>\n<li>自身のインスタンスを返却</li>\n</ul>\n</li>\n<li>指定したIDの参照ロックをかける\n<ul>\n<li>自身のインスタンスを返却</li>\n</ul>\n</li>\n<li>txメソッドはTransactionTemplate#executeの呼び出しを行う\n<ul>\n<li>ここはトランザクション処理が働くのでここでDBアクセスを行うexecuteメソッドの戻り値はSupplierの結果\n<ul>\n<li>executeメソッドの戻り値はSupplierの結果</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>txメソッドの戻り値(Supplierの結果)がfindUnprocessedCashOutメソッドの戻り値として返却されます。</li>\n<li>コントローラーではDtoに変換して結果を戻します。</li>\n</ul>\n<h2>TransactionCallback</h2>\n<p>tmpl.execute(status -> supplier.get()));という個所が今回のポイントです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span>  <span class=\"token function\">tx</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> supplier<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>idLock<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>idLock<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">this<span class=\"token punctuation\">.</span></span>IdLockPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">this<span class=\"token punctuation\">.</span></span>IdLockPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLockType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> tmpl<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">-></span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> tmpl<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">-></span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>TransactionTemplate#executeはTransactionCallbackを引数に取ります。</p>\n<p>TransactionCallbackはorg.springframework.transaction.supportパッケージにありクラスの説明は以下のようになっています</p>\n<p>とりあえずトランザクションを行うコードをここに記載するようです。</p>\n<p>execute内からdoInTransactionメソッドが呼ばれて戻り値を得るようです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No PlatformTransactionManager set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CallbackPreferringPlatformTransactionManager</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CallbackPreferringPlatformTransactionManager</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">T</span> result<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tresult <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">doInTransaction</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Error</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// Transactional code threw application exception -> rollback</span>\n\t\t\t\t<span class=\"token function\">rollbackOnException</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// Transactional code threw unexpected exception -> rollback</span>\n\t\t\t\t<span class=\"token function\">rollbackOnException</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UndeclaredThrowableException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransactionCallback threw undeclared checked exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ちなみに戻り値を必要としないTransactionCallbackWithoutResultも利用できるそうです。https://www.techscore.com/tech/Java/Others/Spring/7-2/</p>\n<p>ここでいう戻り値はSupplierの結果になります。とりあえずまとめると</p>\n<ul>\n<li>executeメソッドにはデータアクセスをする処理を記載する</li>\n<li>データアクセスする処理とその結果の取得はSupplierで実装している</li>\n</ul>\n<p>サービスクラスからの呼び出し方がカッコイイです。。</p>","slug":"p1529"},"__N_SSG":true}