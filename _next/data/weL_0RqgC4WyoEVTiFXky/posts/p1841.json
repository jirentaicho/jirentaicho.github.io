{"pageProps":{"frontMatter":{"title":"クリーンアーキテクチャ | 学習１","date":"2022.04.04","description":"クリーンアーキテクチャ | 学習１","categories":["アーキテクチャ"]},"content":"<p>クリーンアーキテクチャについての勉強メモです。</p>\n<p>クリーンアーキテクチャの目的は「関心事の分離」でソフトウェアをレイヤーに分割する</p>\n<p>どんなレイヤーにわけるのか</p>\n<ul>\n<li>企業のビジネスルール\n<ul>\n<li>エンティティ企業の最重要ビジネスルールをカプセル化したものメソッドを持ったオブジェクトでも、データ構造と関数でも構わない\n<ul>\n<li>企業の最重要ビジネスルールをカプセル化したもの</li>\n<li>メソッドを持ったオブジェクトでも、データ構造と関数でも構わない</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>アプリケーションのビジネスルール\n<ul>\n<li>ユースケースアプリケーション固有のビジネスルールエンティティに入出力するデータの流れを調整するエンティティを操作するこのレイヤーの変更はエンティティに影響を与えない\n<ul>\n<li>アプリケーション固有のビジネスルール</li>\n<li>エンティティに入出力するデータの流れを調整する</li>\n<li>エンティティを操作する</li>\n<li>このレイヤーの変更はエンティティに影響を与えない</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>インターフェースアダプター\n<ul>\n<li>コントローラー、プレゼンター、ゲートウェイユースケースやエンティティのフォーマットから、外部エージェントに便利なフォーマットにデータを変換するアダプターモデルは以下のために利用されるデータ構造コントローラーからユースケースに渡されるユースケースからプレゼンターとビューに戻されるエンティティやユースケースのフォーマットから、データーベース用のフォーマットにデータを変換する（内側はデータベースについては何も知らない）外部サービスなどの外部形式からユースケースやエンティティが利用する内部形式にデータを変換する\n<ul>\n<li>ユースケースやエンティティのフォーマットから、外部エージェントに便利なフォーマットにデータを変換するアダプター</li>\n<li>モデルは以下のために利用されるデータ構造コントローラーからユースケースに渡されるユースケースからプレゼンターとビューに戻される</li>\n<li>エンティティやユースケースのフォーマットから、データーベース用のフォーマットにデータを変換する（内側はデータベースについては何も知らない）</li>\n<li>外部サービスなどの外部形式からユースケースやエンティティが利用する内部形式にデータを変換する</li>\n<li>コントローラーからユースケースに渡される</li>\n<li>ユースケースからプレゼンターとビューに戻される</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>フレームワークとドライバ\n<ul>\n<li>ウェブ、デバイス、DB、外部インターフェース、UIウェブ、データベースなどは詳細である\n<ul>\n<li>ウェブ、データベースなどは詳細である</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>クリーンアーキテクチャは以下の特性を持つ</p>\n<ul>\n<li>フレームワーク非依存\n<ul>\n<li>フレームワークをツールとして利用</li>\n</ul>\n</li>\n<li>テスト可能\n<ul>\n<li>ビジネスルールがどこにも依存しないため独立してテストできる</li>\n</ul>\n</li>\n<li>UI非依存\n<ul>\n<li>ウェブUIをコンソールUIに置き換える際に、ビジネスロジックの変更がいらない</li>\n</ul>\n</li>\n<li>データベース非依存\n<ul>\n<li>ビジネスロジックが特定のデータベースに依存しない</li>\n</ul>\n</li>\n<li>外部エージェント非依存\n<ul>\n<li>ビジネスルールが外界のインターフェースについて何も知らない</li>\n</ul>\n</li>\n</ul>\n<p>円図</p>\n<ul>\n<li>円の外側が仕組み</li>\n<li>内側が方針</li>\n<li>内側ほどソフトウェアのレベルが上がる</li>\n<li>4つの円である必要はない\n<ul>\n<li>ただし依存性のルールは守ること</li>\n</ul>\n</li>\n</ul>\n<h2>境界線</h2>\n<p>クリーンアーキテクチャの有名な図は、依存の方向が一方通行であり、内側の円にあるレイヤーが外側のレイヤーに触れてはいけないようになっている。</p>\n<p>そのため境界線を越えるには依存関係逆転の原則を利用する</p>\n<ul>\n<li>ユースケースからプレゼンターを呼び出したい\n<ul>\n<li>ポリモーフィズムを利用して制御の流れと反対のソースコードの依存関係を生み出すユースケースの内側にインターフェースを置く(図のユースケース出力ポート)プレゼンターがそのインターフェースを実装する</li>\n<li>例UseCase#executeからPresenter#outputを呼ぶPresenterはインターフェースPresenter層がPresenterインターフェースの実装を行う\n<ul>\n<li>ユースケースの内側にインターフェースを置く(図のユースケース出力ポート)</li>\n<li>プレゼンターがそのインターフェースを実装する</li>\n<li>UseCase#executeからPresenter#outputを呼ぶPresenterはインターフェース</li>\n<li>Presenter層がPresenterインターフェースの実装を行う</li>\n<li>Presenterはインターフェース</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>データを渡す\n<ul>\n<li>単純な独立したデータ構造で構成されたデータを利用する(dtoなど)関数の引数にするハッシュマップに詰める</li>\n<li>エンティティオブジェクトやデータベースの行構造をそのまま渡すことは禁止</li>\n<li>依存性を持ったデータ構造は渡せない\n<ul>\n<li>関数の引数にする</li>\n<li>ハッシュマップに詰める</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>サンプル</h2>\n<p>サンプルを考えて作りました。</p>\n<p>以前作ったガチャAPIにキャラクター詳細情報取得処理を追加します。</p>\n<h2>コントローラー</h2>\n<p>やること</p>\n<ul>\n<li>リクエストの内容をInputDataに変換</li>\n<li>ユースケースに処理を渡す</li>\n<li>ユースケースの結果を返却\n<ul>\n<li>ユースケースからプレゼンターをばず、値をコントローラーに返します</li>\n<li>ViewModelはJSON形式で返すため使わずに、OutputDataをそのまま返却しました単純なDTOなのでいいかな？\n<ul>\n<li>単純なDTOなのでいいかな？</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/character\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@CrossOrigin</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">CharacterOutputData</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">CharacterCommand</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// InputDataの作成</span>\n    <span class=\"token class-name\">CharacterGetInputData</span> inputData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterGetInputData</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">getCharacter_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//　UseCaseの実行</span>\n    <span class=\"token class-name\">CharacterOutputData</span> outputData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterGetUseCase<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>inputData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Json形式で返すのでViewModelは作成せず返します</span>\n    <span class=\"token keyword\">return</span> outputData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>InputData</h4>\n<p>リクエストの内容を上位レイヤーに渡すためのDTOです。やることがシンプルなので実装もシンプルになりました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterGetInputData</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>ユースケース</h2>\n<p>やること</p>\n<ul>\n<li>リポジトリからキャラクターを取得する\n<ul>\n<li>リポジトリの実装についてはユースケースでは全く知らない状況です</li>\n<li>キャラクターはEntityですが特段ドメイン要素が今のところ無いですが、一応Entityの位置にいます。</li>\n</ul>\n</li>\n<li>OutputDataにしてコントローラーに返す\n<ul>\n<li>今回はプレゼンターを呼ばすに値を返しています。</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterGetUseCaseImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CharacterGetUseCase</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CharacterRepository</span> characterRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharacterOutputData</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharacterGetInputData</span> inputData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// キャラクターの取得</span>\n        <span class=\"token class-name\">Character</span> character <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>inputData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// OutPutDataの作成と返却</span>\n        <span class=\"token comment\">// OutputBoundaryの呼出しをせずに、値を返しています。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterOutputData</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>character<span class=\"token punctuation\">.</span><span class=\"token function\">getLank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>リポジトリ</h2>\n<p>JPAを使っていますが、実装クラスを別の機能に差し替えることもできます。</p>\n<p>インターフェース</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CharacterRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Character</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>実装クラス</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CharacterRepository</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CharacterJpaRepository</span> characterJpaRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Character</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>トランザクション</h4>\n<p>ところでトランザクションはどのようにして扱うのか？</p>\n<p>今回のケースではトランザクション処理は必要ないかもしれませんが、もしもトランザクションが必要となるケースに遭遇した場合はどうすればいいのか？</p>\n<p>UseCase側でトランザクションを開始することを明示できればいいかなと。今回はアノテーションを利用してみることにしました。これならソースコード側にトランザクションコードが入り込まないで良いかと思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharacterOutputData</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharacterGetInputData</span> inputData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// キャラクターの取得</span>\n        <span class=\"token class-name\">Character</span> character <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>characterRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>inputData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// OutPutDataの作成と返却</span>\n        <span class=\"token comment\">// OutputBoundaryの呼出しをせずに、値を返しています。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterOutputData</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>character<span class=\"token punctuation\">.</span><span class=\"token function\">getLank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ただデータベースの処理が入り込んでしまっていると思いますので、以下のサイトのようにUsecaseからトランザクションを管理できるクラスを呼び出すのも良いと思いした。</p>\n<p>https://jpcodeqa.com/q/a680d2d59fab12a8b8dc326cbd9ae05e</p>\n<p>他にも以下のサイトが参考になります</p>\n<p>http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html</p>\n<ul>\n<li>BusinessRule(Usecase)クラスでSomething(Entity)というエンティティを操作します</li>\n<li>gateway(Repository)を通じてトランザクションを管理します</li>\n<li>gatewayを通じてデータを永続化します</li>\n</ul>\n<h2>結果</h2>\n<p>Postmanで確認して想定通り結果が取得できました。</p>\n<p><img src=\"/1841/1.png\" alt=\"画像\"></p>\n<h2>テスト</h2>\n<p>ビジネスルールがどこにも依存してないため、テストが独立してできる※以下の記事でテストしています</p>\n<p><a href=\"/posts/p1826\">リンク</a></p>\n<h4>UseCaseがPresenterを呼ばずにコントローラーに値を返すようにした</h4>\n<p>参考</p>\n<p><a href=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fizumisy.work%2Fentry%2F2019%2F12%2F12%2F000521\">参考</a></p>\n<p>次はサンプルっぽいプロジェクトを探してリーディングしてみたいと思います。</p>","slug":"p1841"},"__N_SSG":true}