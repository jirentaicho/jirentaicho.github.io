{"pageProps":{"frontMatter":{"title":"Laravel | モック","date":"2022.03.24","description":"Laravel | モック","categories":["Laravel"]},"content":"<p>Laravelでテストコードを書くための勉強記録です。</p>\n<p>Laravelの公式ドキュメントを読んでいるとMockeryというのが出てきます</p>\n<p>Mockery1.0 Mockery</p>\n<p>JavaでいうところのMockitoでしょうか。手探りですが触っていきます</p>\n<p>今回テストするサービスクラスです。</p>\n<ul>\n<li>リポジトリからもモデルを取得する</li>\n<li>ドメインチェックを行う</li>\n<li>イベントをディスパッチする</li>\n<li>addStoneは他のサービスに移動する予定のものです</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">GachaServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GachaService</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">UserDataRepository</span> <span class=\"token variable\">$userDataRepository</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">CharacterRepository</span> <span class=\"token variable\">$characterRepository</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name type-declaration\">UserDataRepository</span> <span class=\"token variable\">$userDataRepository</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name type-declaration\">CharacterRepository</span> <span class=\"token variable\">$characterRepository</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">userDataRepository</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$userDataRepository</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characterRepository</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$characterRepository</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">play</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$user_id</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">CharacterList</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$userData</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">userDataRepository</span><span class=\"token operator\">-></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$userData</span><span class=\"token operator\">-></span><span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// error</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'result'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'ガチャ石が足りません'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">userDataRepository</span><span class=\"token operator\">-></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//　イベントの発火(メール処理とか本来はここでやるといい)</span>\n        <span class=\"token scope\">UsedStone<span class=\"token punctuation\">::</span></span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//　ガチャ設定</span>\n        <span class=\"token variable\">$gacha</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NormalGacha</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">characterRepository</span><span class=\"token operator\">-></span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$gacha</span><span class=\"token operator\">-></span><span class=\"token function\">getCharacters</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">addStone</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$user_id</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$amt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$userdata</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">userDataRepository</span><span class=\"token operator\">-></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$userdata</span><span class=\"token operator\">-></span><span class=\"token function\">addStone</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$amt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">userDataRepository</span><span class=\"token operator\">-></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$userdata</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>事前確認</h2>\n<p>Laravelのartisanコマンドでテストクラスを作成するとuse PHPUnit\\Framework\\TestCase;のようになっていますが、書き換えます</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">//use PHPUnit\\Framework\\TestCase; これEventでエラーになる</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これで$this->mockなどが使えるようになります。</p>\n<h2>サービスコンテナに対してMockを登録する</h2>\n<p>まず今回のテスト対象は普通にnewすると引数にリポジトリクラスが必要になってしまうので、resolveメソッドを使ってサービスコンテナから取得してテストを実行します。</p>\n<p>テスト実行時のサービスコンテナは何もバインドされていない状態なので、自分でバインドしてあげます。</p>\n<p>まずテスト対象となるクラスをサービスコンテナに登録するのですが、インターフェースをキーに登録します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// サービスコンテナに登録する</span>\n        <span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>\n            <span class=\"token scope\">GachaService<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token scope\">GachaServiceImpl<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これでresolveメソッドを利用して実装クラスが取得できるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// サービスコンテナからGachaServiceをキーにサービスの実装クラスを取得します</span>\n<span class=\"token variable\">$service</span> <span class=\"token operator\">=</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token scope\">GachaService<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかしリポジトリクラスがないのでエラーになります。コンストラクタインジェクションできませんよ？ってエラーです</p>\n<p>なのでリポジトリクラスもサービスコンテナに登録してあげますが、今回は以下のポイントがあります。</p>\n<ul>\n<li>サービスクラスが依存しているリポジトリはモックを利用する</li>\n<li>Eventはfakeを利用する</li>\n</ul>\n<p>UserDataRepositoryのモックを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token scope\">UserDataRepository<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token scope\">Mockery<span class=\"token punctuation\">::</span></span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token scope\">UserDataRepositoryImpl<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">MockInterface</span> <span class=\"token variable\">$mock</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$mock</span><span class=\"token operator\">-></span><span class=\"token function\">shouldReceive</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'find'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引数1で呼ばれた場合</span>\n        <span class=\"token variable\">$mock</span><span class=\"token operator\">-></span><span class=\"token function\">shouldReceive</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'find'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引数2で呼ばれた場合</span>\n        <span class=\"token variable\">$mock</span><span class=\"token operator\">-></span><span class=\"token function\">shouldReceive</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'save'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">withAnyArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//saveメソッドに何らかの引数</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>利用するメソッドはshouldReceiveで指定する</li>\n<li>onceは1回呼ばれることを確認する\n<ul>\n<li>times(n)で回数を指定できます。onceもtimesを返しているだけ</li>\n</ul>\n</li>\n<li>引数はwith</li>\n<li>andReturnで戻り値を指定</li>\n<li>引数に何かが渡っていれば発火条件とするにはwithAnyArgsを利用する</li>\n</ul>\n<p>Laravelが提供するメソッドでも同様のことができます</p>\n<ul>\n<li>$this->mock();\n<ul>\n<li>use Tests\\TestCase;していること</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token scope\">CharacterRepository<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token scope\">CharacterRepositoryImpl<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">MockInterface</span> <span class=\"token variable\">$mock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$mock</span><span class=\"token operator\">-></span><span class=\"token function\">shouldReceive</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'find'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$mock</span><span class=\"token operator\">-></span><span class=\"token function\">shouldReceive</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'findAll'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>初期化メソッド</h2>\n<p>モックの登録などを記載する際に初期化メソッドがあれば便利だと思う場合は、以下のようにしてsetUpメソッドを作成して初期化メソッドを定義できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// 初期化</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span> \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// must</span>\n        <span class=\"token scope\"><span class=\"token keyword\">parent</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 処理</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>必ずparent::setUp()を記載します</li>\n</ul>\n<h2>Eventの取り扱い</h2>\n<p>このサービスクラスはイベントのディスパッチを行っていますが、テスト時には当然動きません。ここはEventのfakeメソッドを利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">test_example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// サービスコンテナからGachaServiceをキーにサービスの実装クラスを取得します</span>\n        <span class=\"token variable\">$service</span> <span class=\"token operator\">=</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token scope\">GachaService<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// イベントについてはfakeする</span>\n        <span class=\"token comment\">//Event::fake();</span>\n        <span class=\"token comment\">// 特定のイベントのみ</span>\n        <span class=\"token scope\">Event<span class=\"token punctuation\">::</span></span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token scope\">UsedStone<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$service</span><span class=\"token operator\">-></span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//　イベントがディパッチされたことを確認する</span>\n        <span class=\"token scope\">Event<span class=\"token punctuation\">::</span></span><span class=\"token function\">assertDispatched</span><span class=\"token punctuation\">(</span><span class=\"token scope\">UsedStone<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>use Tests\\TestCase; を利用する\n<ul>\n<li>use PHPUnit\\Framework\\TestCase;はだめ</li>\n</ul>\n</li>\n<li>fake()とすれば全てのEventをfakeできます。</li>\n</ul>","slug":"p1706"},"__N_SSG":true}