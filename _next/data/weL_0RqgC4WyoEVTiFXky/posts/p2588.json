{"pageProps":{"frontMatter":{"title":"SpringBoot | SpockでSpyしてSpringのテストを行う","date":"2022.05.24","description":"SpringBoot | SpockでSpyしてSpringのテストを行う","categories":["Spring"]},"content":"<p>前回の記事</p>\n<p><a href=\"/posts/p2570\">リンク</a></p>\n<p>前回はSpockの基本的な書き方を見てきました。今回はSpringでの利用とスパイについて見ていきます。\nspock-springを使うことでSpringでSpockを利用することができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">testImplementation <span class=\"token string\">'org.spockframework:spock-spring:2.1-groovy-3.0'</span>\n</code></pre></div>\n<p>今回のテスト対象は以下のクラスです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StockRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StockRepository</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JpaStockDao</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">StockEntity</span><span class=\"token punctuation\">></span></span> jpaStockDao<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stock</span> <span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> itemId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StockEntity</span> stockEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jpaStockDao<span class=\"token punctuation\">.</span><span class=\"token function\">findByItemId</span><span class=\"token punctuation\">(</span>itemId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span>stockEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>stockEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getItem_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>stockEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> stock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stock</span> stock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// データベース用のオブジェクトに変換します</span>\n        <span class=\"token class-name\">StockEntity</span> stockEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StockEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stockEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stockEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setItem_id</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stockEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jpaStockDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>stockEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このうちfindStockByItemIdメソッドのテストコードを書いていきます。※トランザクションの動きを見るために作ったコードなので不備があります。</p>\n<h2>テストコードの記載</h2>\n<p>JpaStockDaoクラスについては実装はあり、メソッドだけをいじりたいのでSpyを利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//SpringBootのアノテーションが利用できる</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StockRepositoryImplTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Specification</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">StockRepositoryImpl</span> stockRepository\n\n    def <span class=\"token string\">\"Stockクラスのオブジェクトが正しく取得できる\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 対象クラスの準備</span>\n        given<span class=\"token operator\">:</span> <span class=\"token string\">\"Spyの設定とインジェクトする\"</span>\n        <span class=\"token comment\">// daoの戻り値を作成する</span>\n        def entity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StockEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        entity<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        entity<span class=\"token punctuation\">.</span>item_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        entity<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n        <span class=\"token comment\">// spyを利用する</span>\n        def jpaStockDao <span class=\"token operator\">=</span> <span class=\"token class-name\">Spy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JpaStockDao</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// findByItemId(_)の戻り値をentityに設定する</span>\n        <span class=\"token comment\">// any()は使わず_でその代用ができる</span>\n        jpaStockDao<span class=\"token punctuation\">.</span><span class=\"token function\">findByItemId</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> entity\n        <span class=\"token comment\">// テスト対象のStockRepositoryImplのjpaStockDaoをspyしたオブジェクトに書き換える</span>\n        <span class=\"token class-name\">StockRepositoryImpl</span><span class=\"token punctuation\">.</span>metaClass<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>stockRepository<span class=\"token punctuation\">,</span><span class=\"token string\">\"jpaStockDao\"</span><span class=\"token punctuation\">,</span>jpaStockDao<span class=\"token punctuation\">)</span>\n\n        when<span class=\"token operator\">:</span> <span class=\"token string\">\"Stockの取得を行う\"</span>\n        def result <span class=\"token operator\">=</span> stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        then<span class=\"token operator\">:</span> <span class=\"token string\">\"Stockクラスであること、値のマッピングを確認する\"</span>\n        <span class=\"token comment\">// Stockクラスであること。StockEntity→Stockへの変換ができていること</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n        result<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n        result<span class=\"token punctuation\">.</span>itemId <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n        result<span class=\"token punctuation\">.</span>count <span class=\"token operator\">==</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>@SpringBootTestも使えるため、コンポーネントスキャンなど実施されます\n<ul>\n<li>@Autowiredでテストに必要なクラス(テスト対象)をインジェクションできます</li>\n</ul>\n</li>\n<li>Spy(JpaStockDao)\n<ul>\n<li>テスト対象で必要しているコンポーネントをSpyによって作成します</li>\n</ul>\n</li>\n<li>jpaStockDao.findByItemId(_) >> entity\n<ul>\n<li>Spyによって作成したクラスのfindByItemIdメソッドは定義しているentityを返すようにします</li>\n<li>任意の引数を表す時には_を利用します</li>\n</ul>\n</li>\n<li>StockRepositoryImpl.metaClass.setAttribute(stockRepository,”jpaStockDao”,jpaStockDao)\n<ul>\n<li>テスト対象のクラスのprivateな変数をSpyにて作成したjpaStockDaoに書き換えます</li>\n<li>mockitoの@InjectMockのようなことをしています</li>\n</ul>\n</li>\n</ul>\n<p>依存コンポーネントのインジェクトの仕方がとても直感的ですね。悪く言えばリフレクションチックとでもいいましょうか。</p>\n<p>SpringでSpockを利用できることが確認できました。またSpyについても簡単にできることが確認できました。</p>\n<p>今回のソースコードは以下のブランチにあげております</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/test-spring</p>\n<p>関連記事</p>\n<p><a href=\"/posts/p1729\">リンク</a></p>","slug":"p2588"},"__N_SSG":true}