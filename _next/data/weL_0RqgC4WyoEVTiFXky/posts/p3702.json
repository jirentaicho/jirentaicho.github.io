{"pageProps":{"frontMatter":{"title":"Rust – Bevyでノベルゲームを作る 枠の表示","date":"2022.09.10","description":"Rust – Bevyでノベルゲームを作る 枠の表示","categories":["Rust"]},"content":"<p>前回の続きです</p>\n<p>前回は単純な文字列を表示することができましたので、今回は枠を作ってそこに文字列を表示させるようにします。</p>\n<p>黒い枠を100%100%で表示してみます。前回のテキストを表示の手前に実装を書きます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .run();\n}\n\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // 枠の生成\n    command.spawn_bundle(NodeBundle{\n                style: Style {\n                    size: Size::new(Val::Percent(100.0), Val::Percent(100.0)),\n                    margin: UiRect::all(Val::Px(50.0)),\n                    ..default()\n                },\n                color: Color::BLACK.into(),\n                ..default()\n    });\n    // テキストの生成\n    command.spawn_bundle(TextBundle::from_section(\n        &#x26;quot;Bevy | Rust&#x26;quot;,\n        TextStyle {\n            font: font.clone(), //取得したフォント\n            font_size: 60.0,\n            color: Color::rgb(0.9, 0.9, 0.9)\n        })\n        .with_style(Style{\n            margin: UiRect::all(Val::Px(50.0)), // ウインドウの左下を起点に(50.0)のマージンを取る\n            ..default()\n        }),\n    );\n}</code></pre></div>\n<ul>\n<li>NodeBundleで空の要素を作成します。に相当するらしいです\n<ul>\n<li>https://bevy-cheatbook.github.io/builtins.html?highlight=rect#bundles</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/3702/1.png\" alt=\"画像\"></p>\n<p>100%になっているのは高さだけで、横幅は100%になっていません。</p>\n<p>と、コードを書きつつ、実行結果を見て思ったのはこれはHTMLとCSSにソックリだということです。今はNodeBundleという要素の横に、TextBundleという要素が横並びになっているような状態ではないでしょうか？</p>\n<p>試しにTextBundleを消して実行すると、マージンを除けばだいたい100%で表示されました。</p>\n<p><img src=\"/3702/2.png\" alt=\"画像\"></p>\n<p>HTMLとCSSに似ていると書きましたが、これはWasmでWebAssemblyとして利用できるので当然だと思います。実際にStyleはcssのflexboxシステムを利用していると書いてありました。</p>\n<p>枠に対してテキストを子要素として登録することで、横並びの問題は解決できそうです。とりあえずテキストの位置とかは気にしないでやってみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\">use bevy<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>prelude<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\nfn main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>new<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>add_plugins<span class=\"token punctuation\">(</span>DefaultPlugins<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>add_startup_system<span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfn setup<span class=\"token punctuation\">(</span>\n    mut command<span class=\"token punctuation\">:</span> Commands<span class=\"token punctuation\">,</span>\n    asset_server<span class=\"token punctuation\">:</span> Res<span class=\"token operator\">&#x3C;</span>AssetServer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">//</span> フォントの取得\n    let font <span class=\"token operator\">=</span> asset_server<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"fonts/FiraMono-Medium.ttf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">//</span> カメラの生成\n    command<span class=\"token punctuation\">.</span>spawn_bundle<span class=\"token punctuation\">(</span>Camera2dBundle<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>default<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">//</span> 枠の生成\n    command<span class=\"token punctuation\">.</span>spawn_bundle<span class=\"token punctuation\">(</span>NodeBundle<span class=\"token punctuation\">{</span>\n                style<span class=\"token punctuation\">:</span> Style <span class=\"token punctuation\">{</span>\n                    size<span class=\"token punctuation\">:</span> Size<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>new<span class=\"token punctuation\">(</span>Val<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Percent<span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Val<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Percent<span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    margin<span class=\"token punctuation\">:</span> UiRect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>Val<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Px<span class=\"token punctuation\">(</span><span class=\"token number\">50.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                color<span class=\"token punctuation\">:</span> Color<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>BLACK<span class=\"token punctuation\">.</span>into<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">//</span> テキストを子要素にする\n    <span class=\"token punctuation\">.</span>with_children<span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>parent<span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">//</span> クロージャでparentに対してspawnするように記載\n            parent<span class=\"token punctuation\">.</span>spawn_bundle<span class=\"token punctuation\">(</span>TextBundle<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>from_section<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Bevy | Rust\"</span><span class=\"token punctuation\">,</span>\n                TextStyle <span class=\"token punctuation\">{</span>\n                    font<span class=\"token punctuation\">:</span> font<span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span>取得したフォント\n                    font_size<span class=\"token punctuation\">:</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span>\n                    color<span class=\"token punctuation\">:</span> Color<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>rgb<span class=\"token punctuation\">(</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span>with_style<span class=\"token punctuation\">(</span>Style<span class=\"token punctuation\">{</span>\n                    margin<span class=\"token punctuation\">:</span> UiRect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>Val<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Px<span class=\"token punctuation\">(</span><span class=\"token number\">50.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> ウインドウの左下を起点に<span class=\"token punctuation\">(</span><span class=\"token number\">50.0</span><span class=\"token punctuation\">)</span>のマージンを取る\n                    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/3702/3.png\" alt=\"画像\"></p>\n<p>クロージャを利用してNodeBundleに対してTextBundleを追加しているようなイメージですね。</p>\n<p>少しスタイルを変えてみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .run();\n}\n\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // 枠の生成\n    command.spawn_bundle(NodeBundle{\n                style: Style {\n                    //高さは50%に指定\n                    size: Size::new(Val::Percent(100.0), Val::Percent(50.0)),\n                    //marginは0にしておく\n                    margin: UiRect::all(Val::Px(0.0)),\n                    // 追加位置を指定する（感覚cssと同じ)\n                    align_items: AlignItems::FlexStart,\n                    ..default()\n                },\n                color: Color::BLACK.into(),\n                ..default()\n    })\n    .with_children(|parent| {\n            parent.spawn_bundle(TextBundle::from_section(\n                &#x26;quot;Bevy | Rust&#x26;quot;,\n                TextStyle {\n                    font: font.clone(),\n                    font_size: 60.0,\n                    color: Color::rgb(0.9, 0.9, 0.9)\n                })\n                // 位置は親要素に依存させるため記載除去\n                /*\n                .with_style(Style{\n                    margin: UiRect::all(Val::Px(50.0)), \n                    ..default()\n                }),\n                */\n            );\n\n        }\n    );\n}</code></pre></div>\n<p><img src=\"/3702/4.png\" alt=\"画像\"></p>\n<ul>\n<li>align_items: AlignItems::FlexStart,\n<ul>\n<li>これが左下起点？</li>\n</ul>\n</li>\n</ul>\n<p>というわけでFlexEndにすると</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">// 追加位置を指定する（感覚cssと同じ)\nalign_items: AlignItems::FlexEnd,</code></pre></div>\n<p><img src=\"/3702/5.png\" alt=\"画像\"></p>\n<p>イイ感じになりました。これでテキストに関しては親要素の左上起点にして表示されています。</p>\n<p>この親要素と子要素という考え方は、UIとか作る際には重要になりそうです。</p>\n<h2>シリーズ記事</h2>\n<p>◆Rust – Bevyでノベルゲームを作る 文字の表示</p>\n<p><a href=\"/posts/p3690\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 枠の表示</p>\n<p><a href=\"/posts/p3702\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 次の文字を表示</p>\n<p><a href=\"/posts/p3716\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る キャラクターを表示する</p>\n<p><a href=\"/posts/p3731\">リンク</a></p>","slug":"p3702"},"__N_SSG":true}