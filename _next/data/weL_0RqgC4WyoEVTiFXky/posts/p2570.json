{"pageProps":{"frontMatter":{"title":"SpringBoot | Spockでテストコードを書く","date":"2022.05.23","description":"SpringBoot | Spockでテストコードを書く","categories":["Spring"]},"content":"<p>前回はSpockのテストコードが実行できる環境を整えるところまで行いました</p>\n<p><a href=\"/posts/p2548\">リンク</a></p>\n<p>今回は実際にgroovyでテストコードを書いてみます。</p>\n<h2>テストの記載</h2>\n<p>今回確認するべき点は３つです</p>\n<ul>\n<li>基本的な書き方</li>\n<li>データ駆動テスト</li>\n<li>Power Assertions</li>\n</ul>\n<h3>基本的な書き方</h3>\n<p>今回のテスト対象のクラスです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> itemId<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// そのままintを定義しています</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> add<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-=</span> sub<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">willBeMinus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> subCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> subCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>テストコードを以下のように記載しました</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StockTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token namespace\">spock<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Specification</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// テストケースはコメントで記載できる</span>\n    def <span class=\"token string\">\"在庫カウント100からsubCountで30減らすと70になる\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// givenブロックにはオブジェクトの準備など</span>\n        given<span class=\"token operator\">:</span> <span class=\"token string\">\"Stockをcount100で生成する\"</span>\n        def stock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// whenブロックには動作の実行などします</span>\n        when<span class=\"token operator\">:</span> <span class=\"token string\">\"countをsubCountで30減らします\"</span>\n        stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// thenブロックにはアサーションを記載</span>\n        then<span class=\"token operator\">:</span> <span class=\"token string\">\"countが70になる\"</span>\n        stock<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">70</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>テスト名は自由にコメント記載ができる</li>\n<li>各ブロックごとに担当を振り分けることで見やすいコードが書けます</li>\n<li>各ブロックにもコメントを記載できます\n<ul>\n<li>givenオブジェクトの準備など初期処理の記載setupと記載されている場合もあります(givenはエイリアス)</li>\n<li>when処理の実行を記載</li>\n<li>thenテストの結果を記載。アサーション\n<ul>\n<li>オブジェクトの準備など初期処理の記載</li>\n<li>setupと記載されている場合もあります(givenはエイリアス)</li>\n<li>処理の実行を記載</li>\n<li>テストの結果を記載。アサーション</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>メソッド単位で実行する場合は左の実行ボタンを押すと実行されます</p>\n<p><img src=\"/2570/1.png\" alt=\"画像\"></p>\n<h2>andで繋げる</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">def <span class=\"token string\">\"在庫カウント100の時addCount10した後にsubCount10すると100になる\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    given<span class=\"token operator\">:</span> <span class=\"token string\">\"Stockをcount100で生成する\"</span>\n    def stock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n    when<span class=\"token operator\">:</span> <span class=\"token string\">\"countをaddCountで10増やす\"</span>\n    stock<span class=\"token punctuation\">.</span><span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// and で条件を連結させる</span>\n    and<span class=\"token operator\">:</span> <span class=\"token string\">\"countをsubCountで10減らす\"</span>\n    stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n    then<span class=\"token operator\">:</span> <span class=\"token string\">\"countが100になる\"</span>\n    stock<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>ブロックをandで繋げることができます</li>\n<li>andを書かなくても問題ないです\n<ul>\n<li>書くことでコメントの記載ができる</li>\n<li>ブロックが明確になる</li>\n</ul>\n</li>\n</ul>\n<p>ちなみにテストに失敗すると何がダメか丁寧に教えてくれます</p>\n<p><img src=\"/2570/2.png\" alt=\"画像\"></p>\n<p><img src=\"/2570/3.png\" alt=\"画像\"></p>\n<h3>データ駆動テスト</h3>\n<ul>\n<li>Spockはデータ駆動テストをサポートしている</li>\n<li>繰り返し入力のテストが簡潔になる</li>\n<li>パイプ記法が使える</li>\n</ul>\n<p>まずはexpectとwhereを使って繰り返し入力のテストを行います</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">def <span class=\"token string\">\"マイナス状態チェック\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    expect<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token comment\">// whereで定義している変数が利用可能</span>\n    stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> isMinus\n\n    <span class=\"token comment\">// 入力データと期待値を定義する</span>\n    where<span class=\"token operator\">:</span> <span class=\"token string\">\"データと期待値を定義する\"</span>\n    stock               <span class=\"token operator\">||</span> isMinus\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>expectに対してwhereを設定しています</li>\n<li>expect\n<ul>\n<li>whenとthenを合わせたような感じ</li>\n<li>処理の実行と結果を確認できる</li>\n</ul>\n</li>\n<li>where\n<ul>\n<li>複数のデータの準備</li>\n<li>テーブル記法の場合は先頭を変数名として使える</li>\n</ul>\n</li>\n</ul>\n<p>パイプ記法を使って書くこともできます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">def <span class=\"token string\">\"マイナス状態チェック\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    expect<span class=\"token operator\">:</span> <span class=\"token string\">\"isMinusメソッドがcountがマイナス値の場合はtrueを返す\"</span>\n    <span class=\"token comment\">// whereで定義している変数が利用可能</span>\n    stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> isMinus\n\n    <span class=\"token comment\">// 入力データと期待値を定義する</span>\n    where<span class=\"token operator\">:</span> <span class=\"token string\">\"データと期待値を定義する\"</span>\n    stock <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    isMinus <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>もっと単純なデータを扱う場合はパイプ記法のほうが簡潔です\n<ul>\n<li>今回はnewしているので少し長くなってしまっています</li>\n</ul>\n</li>\n</ul>\n<h3>Power Assertions</h3>\n<p>先ほども失敗時のログを見ましたが、もう一度見てみます。データ駆動テストの際に失敗するケースを書いて実行してみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">def <span class=\"token string\">\"マイナス状態チェック\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        expect<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token comment\">// whereで定義している変数が利用可能</span>\n        stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> isMinus\n\n        <span class=\"token comment\">// 入力データと期待値を定義する</span>\n        where<span class=\"token operator\">:</span> <span class=\"token string\">\"データと期待値を定義する\"</span>\n        stock               <span class=\"token operator\">||</span> isMinus\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//ここでエラー</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/2570/4.png\" alt=\"画像\"></p>\n<ul>\n<li>stock.isMinus()の結果はfalse</li>\n<li>isMinusはtrue</li>\n<li>==の結果はfalse</li>\n</ul>\n<p>テスト失敗の原因特定が用意です。</p>\n<p>今回のソースコードは以下のブランチにあげております</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/test</p>\n<h2>参考</h2>\n<ul>\n<li>現場至上主義　Spring Boot2徹底活用</li>\n<li>https://koji-k.github.io/groovy-tutorial/unit-test/index.html</li>\n</ul>","slug":"p2570"},"__N_SSG":true}