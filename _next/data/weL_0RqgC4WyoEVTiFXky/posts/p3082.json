{"pageProps":{"frontMatter":{"title":"Java | スレッドプール","date":"2022.07.26","description":"Java | スレッドプール","categories":["Java"]},"content":"<p>Javaでは簡単にスレッドプールを利用できます。スレッドプールは生成したスレッドを待機させて、必要になったら利用し終わったらまた待機して使いまわす技法です。</p>\n<p>スレッドを大量に生成することで実行性能に影響がある場合に、スレッドプールを利用して性能を上げることができます※スレッド生成自体は重い処理でなく極限までチューニングする手法として一般的。</p>\n<h2>スレッドプールを試す</h2>\n<p>Executorsを生成する際にスレッドプールのスレッド数を指定して、スレッドを使いまわしている様子を確認します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Runnable</span> run <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"処理完了\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>前回の記事のソースを使い回していますが、やっていることはアトミックなカウンターをインクリメントするだけです。この時スレッドを一時的にスリープして止めています。</p>\n<p>スレッド数を3でスレッドプールを作成して、executeメソッドを5回実行することで5スレッド分の処理を実施します。</p>\n<p>ログは以下のようになります</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">current1\r\r\n処理完了pool-1-thread-1\r\r\ncurrent3\r\r\n処理完了pool-1-thread-2\r\r\ncurrent2\r\r\n処理完了pool-1-thread-3\r\r\ncurrent4\r\r\n処理完了pool-1-thread-1\r\r\ncurrent5\r\r\n処理完了pool-1-thread-2\r\r\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">\r</code></pre></div>\n<p>スレッドプールは3スレッドしかないのでスレッドを使い回していることがわかります。</p>\n<p>また、カウント4と5に関しては実行までにラグが生じます。これはスレッドプールが3つしかないので空いているスレッドがないから待機した状態になっているからです。</p>\n<p>Executorを生成する際にシングルスレッドのみにするなど様々なメソッドが用意されています</p>\n<ul>\n<li>newSingleThreadExecutor\n<ul>\n<li>1つのスレッドのみを使う。順番にタスクを処理していく</li>\n</ul>\n</li>\n<li>newCachedThreadPool\n<ul>\n<li>必要に応じてスレッドを作成して、空いた場合は使い回す</li>\n<li>短い時間に大量のタスクを行う時に便利</li>\n</ul>\n</li>\n</ul>\n<p>などなど。</p>\n<p>ためしにnewSingleThreadExecutorを使ってみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">current1\r\r\n処理完了pool-1-thread-1\r\r\ncurrent2\r\r\n処理完了pool-1-thread-1\r\r\ncurrent3\r\r\n処理完了pool-1-thread-1\r\r\ncurrent4\r\r\n処理完了pool-1-thread-1\r\r\ncurrent5\r\r\n処理完了pool-1-thread-1</code></pre></div>\n<p>タスクを順番に処理していくので時間がかかりますが、同じスレッドを使い回していることがわかります。</p>\n<p>newCachedThreadPoolを利用すると、スレッドが5つ作成されて一気に処理されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">current1\r\r\n処理完了pool-1-thread-5\r\r\ncurrent4\r\r\n処理完了pool-1-thread-1\r\r\ncurrent2\r\r\n処理完了pool-1-thread-2\r\r\ncurrent5\r\r\n処理完了pool-1-thread-3\r\r\ncurrent3\r\r\n処理完了pool-1-thread-4</code></pre></div>\n<p>このようにJavaでは簡単にスレッドプールが利用できるので、スレッドプールを自作することはしないで、既存機能を使えばOKです。</p>","slug":"p3082"},"__N_SSG":true}