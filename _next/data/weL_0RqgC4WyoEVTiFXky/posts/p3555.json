{"pageProps":{"frontMatter":{"title":"Rust – Bevyでゲームを作る勉強記録","date":"2022.09.07","description":"Rust – Bevyでゲームを作る勉強記録","categories":["Rust"]},"content":"<p>Rustのamethystを利用した本があったので、それを読み進めていたのですが実行ができなかった。多分私のGPUとかの問題？vulkan物理デバイスが見つからないと怒られmacはxcode入れるのが面倒くさいので止めました。</p>\n<p>途方に暮れていたらBEVYを見つけました。まずちゃんと起動できるかどうかを先にサンプルで試したところ、ブロック崩しのゲームが開始されたので、これはいけると思い始めました。</p>\n<h2>環境構築</h2>\n<p>Bevyのプロジェクトを立ち上げるため、環境構築をします。公式ドキュメントの通りに進めていきます。</p>\n<p>まずは普通にプロジェクトを作成</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">D:\\rust&#x26;gt;cargo new my_sample\n     Created binary (application) `my_sample` package\n\nD:\\rust&#x26;gt;cd my_sample</code></pre></div>\n<p>こうすると空のプロジェクトが作られるのでCargo.tomlは以下のようになっている</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">[package]\nname = \"my_sample\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n</code></pre></div>\n<p>次に依存を追加する</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">cargo add bevy</code></pre></div>\n<p>依存関係が追加される</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">[package]\nname = \"my_sample\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nbevy = \"0.8.1\"\n</code></pre></div>\n<h2>まずは動かす</h2>\n<p>まずはログにテキストを出力してみます。</p>\n<p>2d/sprite.rsを作成します。</p>\n<p><img src=\"/3555/1.png\" alt=\"画像\"></p>\n<p>適当にテキストをプリントしているだけです。この時点で補完が効かないのでCargo.tomlに以下を追記します。※この辺のCargo.toml修正の動きはよく理解してないのでとりあえず公式を参考にやってます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">[[example]]\nname = \"sprite\"\npath = \"2d/sprite.rs\"\n</code></pre></div>\n<p>これで実行するとログが出力されます</p>\n<p><img src=\"/3555/2.png\" alt=\"画像\"></p>\n<h2>アプリケーションの作成</h2>\n<p>今度はBevyアプリケーションを作成します。アプリケーションに対してスケジュールを登録するという単純なことをやります</p>\n<p>sprite.rsを以下のようにして実行します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main(){\n    App::new()\n    .add_startup_system(setup)\n    .run();\n}\n\nfn setup(){\n    print!(&#x26;quot;グッジョブです！と、ミサカは惜しみない賞賛を贈ります。&#x26;quot;);  \n}</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">Compiling my_sample v0.1.0 (D:\\rust\\my_sample)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.28s\n     Running `target\\debug\\examples\\sprite.exe`\nグッジョブです！と、ミサカは惜しみない賞賛を贈ります。 *  ターミナルはタスクで再利用されます、閉じるには任意のキーを押してください。 \n\n</code></pre></div>\n<h2>画像を表示する</h2>\n<p>次に画像を表示させます。</p>\n<p>assets/imagesフォルダを作成して、画像を入れておきます。</p>\n<p>sprinte.rsを以下のように修正して実行します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main(){\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .run();\n    // print!(&#x26;quot;グッジョブです！と、ミサカは惜しみない賞賛を贈ります。&#x26;quot;);  \n}\n\nfn setup(mut command: Commands, asset_server: Res&#x26;lt;AssetServer&#x26;gt;){\n    command.spawn_bundle(Camera2dBundle::default());\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        ..default()\n    });\n}</code></pre></div>\n<p>巨大な画像が表示されました。</p>\n<p><img src=\"/3555/3.png\" alt=\"画像\"></p>\n<p>Bevyは様々な機能をプラグインとして提供しているので、必要な機能のみを選んで利用することができます。例えばUIが不要ならばUiPluginを入れなければいいという感じです。</p>\n<p>手間のかからないフルエンジンであるデフォルトプラグインを利用しました。CorePluginやInputPlugin、WindowPluginなどが追加されます。</p>\n<h2>ウインドウサイズを変更する</h2>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main(){\n    App::new()\n    .insert_resource(WindowDescriptor{\n        title:&#x26;quot;サンプルゲーム&#x26;quot;.to_string(),\n        width:480.0,\n        height:320.0,\n        ..Default::default()\n    })\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .run(); \n}</code></pre></div>\n<p>指定したサイズで画面が表示さており、タイトルもサンプルゲームに変更されています。</p>\n<p><img src=\"/3555/4.png\" alt=\"画像\"></p>\n<h2>画像のスケール</h2>\n<p>表示されている画像が大きいので縮小して表示させます。利用した画像が大きかったのでかなり縮小して表示しています。</p>\n<p>SpriteBundleのtransformを指定しています</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">fn setup(mut command: Commands, asset_server: Res&#x26;lt;AssetServer&#x26;gt;){\n    command.spawn_bundle(Camera2dBundle::default());\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        transform: Transform {\n            scale: Vec3::new(0.1,0.1,1.0),\n            ..Default::default()\n        },\n        ..default()\n    });\n}</code></pre></div>\n<p><img src=\"/3555/5.png\" alt=\"画像\"></p>\n<p>かなり縮小してイイ感じ</p>\n<h2>動かす</h2>\n<p>表示したキャラクターを動かしてみます。通常は画像を切り替えてアニメーションを表現しますが、今回はこの画像のまま座標移動のみをやってみます。</p>\n<p>ところで画像を表示する時はadd_startup_systemを使いましたが、add_systemというのもあり、これを使うと何度も呼ばれることになります。</p>\n<p>以下のようなコンソール出力を行うsample関数を登録すると…</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main(){\n    App::new()\n    .insert_resource(WindowDescriptor{\n        title:&#x26;quot;サンプルゲーム&#x26;quot;.to_string(),\n        width:480.0,\n        height:320.0,\n        ..Default::default()\n    })    \n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(sample)\n    .run(); \n}\n\nfn sample(){\n    println!(&#x26;quot;御坂美琴&#x26;quot;);\n}</code></pre></div>\n<p><img src=\"/3555/6.png\" alt=\"画像\"></p>\n<p>何度もログが出力されていることがわかります。</p>\n<p>そのため移動系のメソッドは、add_systemを利用して関数を登録することにします</p>\n<h3>Query</h3>\n<p>Entityのcomponentsを取得することができます。ここを見ると詳しく書いてます</p>\n<p>https://bevy-cheatbook.github.io/programming/queries.html?highlight=query#queries</p>\n<p>とりあえずコンポーネントを付けないといけないのでNameというコンポーネントをSpriteBundleに対して登録します。</p>\n<p>そしてmovementメソッドをadd_systemに渡します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\n// コンポーネントを定義する\n#[derive(Component)]\nstruct Name {\n    name: String,\n}\n\nfn main(){\n    App::new()\n    .insert_resource(WindowDescriptor{\n        title:&#x26;quot;サンプルゲーム&#x26;quot;.to_string(),\n        width:480.0,\n        height:320.0,\n        ..Default::default()\n    })    \n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(movement)\n    .run(); \n}\n\n// NameとTransformコンポーネントを持つエンティティへのアクセス\nfn movement(mut query: Query&#x26;lt;(&#x26;amp;Name, &#x26;amp;mut Transform)&#x26;gt;){\n    for( name, mut transform) in query.iter_mut(){\n        transform.translation.x += 0.1;\n        println!(&#x26;quot;{}&#x26;quot;, name.name);\n    }\n}\n\nfn setup(mut command: Commands, asset_server: Res&#x26;lt;AssetServer&#x26;gt;){\n    command.spawn_bundle(Camera2dBundle::default());\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        transform: Transform {\n            scale: Vec3::new(0.1,0.1,1.0),\n            ..Default::default()\n        },\n        ..default()\n    })\n    // コンポーネントを登録する\n    .insert(Name { name:&#x26;quot;垣根提督&#x26;quot;.to_string() } );\n}</code></pre></div>\n<p>少しずつ画像が移動しているのがわかります。(無駄にログ出力していますがお許しください）</p>\n<p><img src=\"/3555/7.png\" alt=\"画像\"></p>\n<p>取得できるEntityが一つだと保証できる場合はsingle_mutメソッドが利用できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">fn movement(mut query: Query&#x26;lt;(&#x26;amp;Name, &#x26;amp;mut Transform)&#x26;gt;){\n    let (name, mut transform) = query.single_mut();\n    transform.translation.x += 0.1;\n    println!(&#x26;quot;{}&#x26;quot;, name.name);\n}</code></pre></div>\n<p>この辺のライフタイムは全く勉強してないので宿題です…</p>\n<h2>Playerにする</h2>\n<p>今はNameというコンポーネントで無理やりクエリに適合させていますが？Playerというコンポーネントを使って再定義します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\n\n// Playerコンポーネントを定義する\n#[derive(Component)]\nstruct Player;\n\nfn main(){\n    App::new()\n    .insert_resource(WindowDescriptor{\n        title:&#x26;quot;サンプルゲーム&#x26;quot;.to_string(),\n        width:480.0,\n        height:320.0,\n        ..Default::default()\n    })    \n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(movement)\n    .run(); \n}\n\n\n// TransformとPlayerコンポーネントを持つエンティティへのアクセス(クエリフィルタの利用)\nfn movement(mut query: Query&#x26;lt;&#x26;amp;mut Transform,With&#x26;lt;Player&#x26;gt;&#x26;gt;){\n    let mut transform = query.single_mut();\n    transform.translation.x += 0.1;\n}\n\n\nfn setup(mut command: Commands, asset_server: Res&#x26;lt;AssetServer&#x26;gt;){\n    command.spawn_bundle(Camera2dBundle::default());\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        transform: Transform {\n            scale: Vec3::new(0.1,0.1,1.0),\n            ..Default::default()\n        },\n        ..default()\n    })\n    // Playerを登録する\n    .insert(Player);\n}</code></pre></div>\n<p>出力結果は同じですが、こっちのほうがわかりやすいですね。</p>\n<h2>キーボードで動かす</h2>\n<p>最後に画像をキーボードで動かします。</p>\n<p>movementメソッドでkeyイベントを受け取るようにすればOKです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\n// Playerコンポーネントを定義する\n#[derive(Component)]\nstruct Player;\n\nfn main(){\n    App::new()\n    .insert_resource(WindowDescriptor{\n        title:&#x26;quot;サンプルゲーム&#x26;quot;.to_string(),\n        width:480.0,\n        height:320.0,\n        ..Default::default()\n    })    \n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(movement)\n    .run(); \n}\n\nfn movement(\n    // キーイベントを追加\n    key_input : Res&#x26;lt;Input&#x26;lt;KeyCode&#x26;gt;&#x26;gt;,\n    mut query: Query&#x26;lt;&#x26;amp;mut Transform,With&#x26;lt;Player&#x26;gt;&#x26;gt;\n){\n    // transformの取得\n    let mut transform = query.single_mut();\n    // →キーを押している場合\n    if key_input.pressed(KeyCode::Right) {\n        // 移動量増やしています\n        transform.translation.x += 0.8;\n    }\n}\n\n/*\n// TransformとPlayerコンポーネントを持つエンティティへのアクセス(クエリフィルタの利用)\nfn movement(mut query: Query&#x26;lt;&#x26;amp;mut Transform,With&#x26;lt;Player&#x26;gt;&#x26;gt;){\n    let mut transform = query.single_mut();\n    transform.translation.x += 0.1;\n}\n*/\n\nfn setup(mut command: Commands, asset_server: Res&#x26;lt;AssetServer&#x26;gt;){\n    command.spawn_bundle(Camera2dBundle::default());\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        transform: Transform {\n            scale: Vec3::new(0.1,0.1,1.0),\n            ..Default::default()\n        },\n        ..default()\n    })\n    // Playerを登録する\n    .insert(Player);\n}</code></pre></div>\n<p>矢印キーの右を押している間だけ右に動きます。</p>\n<p><img src=\"/3555/8.png\" alt=\"画像\"></p>\n<p>駆け足で色々無視しながらですが、キーボードで画像を動かすところまではできました。簡単にキーイベントも受け取れるのが便利です。</p>\n<h4>最後に一言</h4>\n<p>そもそも、もっとRust自体の勉強をしないといけないということがよくわかりました（笑）</p>\n<h4>利用させていただいた画像</h4>\n<p>https://www.ac-illust.com/main/profile.php?id=DQO9yeUP&#x26;area=1</p>","slug":"p3555"},"__N_SSG":true}