{"pageProps":{"frontMatter":{"title":"SpringBoot | Kubernetesにデプロイ ConfigMapで環境変数を切り替える","date":"2022.08.07","description":"SpringBoot | Kubernetesにデプロイ ConfigMapで環境変数を切り替える","categories":["Kubernetes"]},"content":"<p>この記事の内容は「現場至上主義 Spring Boot2 徹底活用」を参考に実施しています。</p>\n<p>今回はVirtualBoxのLinux環境にて行います。Kubernetesの環境構築については以下の記事に記載しています。バージョンが古い可能性があるのでご注意ください</p>\n<p><a href=\"/posts/p292\">リンク</a></p>\n<p>前回の記事でアプリケーションを起動する環境ごとに設定を変更したい場合についての記事を書きました。</p>\n<p>今回はKubernetesを使って環境変数を簡単に切り替えることができる環境を作成して、アプリケーションを動かしてみます。</p>\n<p>利用するjarファイルは前回の記事で作ったjarファイルです。本番環境とテスト環境によって読み込む設定ファイルを切り替えることで、表示するメッセージを変更するだけのアプリケーションです。</p>\n<p><a href=\"/posts/p3258\">リンク</a></p>\n<h2>アプリケーション</h2>\n<p>前回の記事で作成した環境によって設定ファイルを切り替えて、表示するメッセージを変更するだけのアプリケーションを用意しました。そしてこのプロジェクトのjarファイルを作成して準備しておきます。</p>\n<p><img src=\"/3270/1.png\" alt=\"画像\"></p>\n<h2>コンテナの起動</h2>\n<p>まずはDockerコンテナでjarファイルを起動して動きを確認します。</p>\n<p>以下のDockerfileを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\">FROM <span class=\"token property\">openjdk</span><span class=\"token punctuation\">:</span><span class=\"token number\">17.0</span><span class=\"token number\">.1</span>\nADD Executor-0.0.1-SNAPSHOT.jar Executor-0.0.1-SNAPSHOT.jar\nENTRYPOINT [<span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-jar\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/Executor-0.0.1-SNAPSHOT.jar\"</span>]\n</code></pre></div>\n<p>上記設定ファイルを元にDockerimageをサンプルという名前で作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sudo docker build -t sample .\n</code></pre></div>\n<p>イメージのビルドが完了したら次はDockerコンテナを起動します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sudo docker run --name=sample -e &#x26;quot;SPRING_PROFILES_ACTIVE=production&#x26;quot; -p 8080:8080 sample\n</code></pre></div>\n<ul>\n<li>docker run\n<ul>\n<li>イメージからコンテナを作成して起動します</li>\n</ul>\n</li>\n<li>–name\n<ul>\n<li>コンテナに名前をつけます</li>\n</ul>\n</li>\n<li>-e\n<ul>\n<li>envです</li>\n</ul>\n</li>\n<li>-p\n<ul>\n<li>ポートを8080とコンテナの8080を紐づけます</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/3270/2.png\" alt=\"画像\"></p>\n<p>ブラウザにアクセスすると本番環境用のメッセージを取得しています。これは環境変数としてproductionを指定しているためです。</p>\n<p><img src=\"/3270/3.png\" alt=\"画像\"></p>\n<p>これでjarファイルをDockerコンテナにて実行することができました。</p>\n<h2>Deploymentsの作成</h2>\n<p>以下の内容でを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sample\nspec:\n  selector:\n    matchLabels:\n      app: sample\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: sample\n    spec:\n      containers:\n      - name: sample\n        image: sample\n        imagePullPolicy: Never\n        env:\n        - name: SPRING_PROFILES_ACTIVE\n          value: development\n        ports:\n        - containerPort: 8080\n\n</code></pre></div>\n<ul>\n<li>Neverをつけてローカルのイメージを取得するようにしています\n<ul>\n<li>参考:https://www.opensourcetech.tokyo/entry/20190223/1550908537</li>\n</ul>\n</li>\n</ul>\n<p>以下のコマンドでリソースの作成を実行します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sudo kubectl apply -f deployment.yaml \n</code></pre></div>\n<p><img src=\"/3270/4.png\" alt=\"画像\"></p>\n<p>失敗した余計なものが写っていますが、podがRunningになっていればOKです</p>\n<p><img src=\"/3270/5.png\" alt=\"画像\"></p>\n<h2>サービスの作成</h2>\n<p>サービスを作成してPodにブラウザからアクセスできるようにします。</p>\n<p>以下の内容でyamlファイルを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: v1\nkind: Service\nmetadata:\n  name: sample-service\nspec:\n  selector:\n    app: sample\n  ports:\n    - protocol: TCP\n      port: 8080\n      targetPort: 8080\n</code></pre></div>\n<ul>\n<li>サービスの名前をsample-serviceで作成</li>\n<li>appがsampleのラベルになっているPodを対象として作成</li>\n</ul>\n<p>これをデプロイします</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sudo kubectl apply -f /home/misaka/デスクトップ/jar/service.yaml</code></pre></div>\n<p>問題なく作成されるとクラスターIPが割り当てられています</p>\n<p><img src=\"/3270/6.png\" alt=\"画像\"></p>\n<ul>\n<li>先ほど作成したsample-serviceのクラスターIPにアクセスするとSpringBootのアプリケーションが起動していることがわかります</li>\n</ul>\n<p><img src=\"/3270/7.png\" alt=\"画像\"></p>\n<ul>\n<li>環境変数のSPRING_PROFILES_ACTIVEを読み取ってdevelopmentが返ってきています</li>\n</ul>\n<h2>ConfigMap</h2>\n<p>環境変数の管理をコンテナと分離して管理できるようにする方法としてConfigMapがあります。</p>\n<p>※ただしパスワードやAPIキーなどの暗号化が必要なものについてはConfigMapに記載するべきでありません。Secretsを利用します。</p>\n<p>ConfigMapは以下のように作成します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">apiVersion<span class=\"token operator\">:</span> v1\nkind<span class=\"token operator\">:</span> ConfigMap\nmetadata<span class=\"token operator\">:</span>\n  name<span class=\"token operator\">:</span> sample<span class=\"token operator\">-</span>config\ndata<span class=\"token operator\">:</span>\n  spring<span class=\"token punctuation\">.</span>profiles<span class=\"token punctuation\">.</span>active<span class=\"token operator\">:</span> production\n</code></pre></div>\n<ul>\n<li>sample-configという名前でConfigMapを作成</li>\n<li>値をdevelopmentからproductionに変更</li>\n</ul>\n<p>次に既存のデプロイメントファイルを修正してConfigMapから値を取得するようにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sample\nspec:\n  selector:\n    matchLabels:\n      app: sample\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: sample\n    spec:\n      containers:\n      - name: sample\n        image: sample\n        imagePullPolicy: Never\n        env:\n        - name: SPRING_PROFILES_ACTIVE\n          valueFrom:\n            configMapKeyRef:\n              name: sample-config\n              key: spring.profiles.active\n        ports:\n        - containerPort: 8080\n\n</code></pre></div>\n<ul>\n<li>valueをvalueFromとしてConfigMapからspring.profiles.activeを取得するように修正</li>\n</ul>\n<p>そして以下のコマンドでデプロイします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sudo kubectl apply -f /home/misaka/デスクトップ/jar/spring-config.yaml</code></pre></div>\n<p>ConfigMapの一覧に表示されていればOKです</p>\n<p><img src=\"/3270/8.png\" alt=\"画像\"></p>\n<p>またデプロイメントの修正も反映させます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sudo kubectl apply -f /home/misaka/デスクトップ/jar/deployment.yaml</code></pre></div>\n<p>そしたらブラウザでアプリケーションを確認します</p>\n<p><img src=\"/3270/9.png\" alt=\"画像\"></p>\n<p>しっかりConfigMapの設定を読み取ってproduction環境用のメッセージを表示しています</p>\n<h2>関連記事</h2>\n<p><a href=\"/posts/p2616\">リンク</a></p>\n<p><a href=\"/posts/p389\">リンク</a></p>\n<p><a href=\"/posts/p402\">リンク</a></p>","slug":"p3270"},"__N_SSG":true}