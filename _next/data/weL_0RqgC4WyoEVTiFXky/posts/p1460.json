{"pageProps":{"frontMatter":{"title":"継承よりもコンポジションを選ぶのとデザインパターンの話","date":"2022.03.08","description":"継承よりもコンポジションを選ぶのとデザインパターンの話","categories":["Java"]},"content":"<p>今回の話はオブジェクト指向についてなので長いです。ごめんなさい。</p>\n<p>継承は、サブクラスがスーパークラスの実装に依存してしまう。「Effective Java 第3版」では、HashSetを継承したケースで起こる問題を記載している。</p>\n<p>HashSetのaddAllメソッドが内部でaddメソッドを使っています。そのためサブクラスで”要素を追加した件数をカウント”するってなった場合に、addメソッドをオーバーライドして、スーパークラスのaddAllメソッドを安易に呼び出すと不具合が起きる場合がある。（この本のサンプルはネットにゴロゴロ落ちています）</p>\n<ul>\n<li>メソッドをオーバーライドしない場合も、スーパークラスが新リリースによりサブクラスで独自に定義したのメソッドと、同名のメソッドを定義する可能性もあります。（自分がスーパークラスの実装者でない場合）</li>\n<li>スーパークラスの変数にアクセスしたいなどとなった場合はアクセス修飾子がprivateであってはいけない。→ホワイトボックス再利用</li>\n<li>スーパークラスの実装の変更がサブクラスにも影響が出る。</li>\n</ul>\n<p>そのためこのクラスのメソッド使いたいから継承しようって考えるのでなく、コンポジションを利用しようと考えます。</p>\n<h2>コンポジション</h2>\n<p>コンポジションは利用したクラスのオブジェクトを変数で保持しておいて、そのオブジェクトを利用する方法です。</p>\n<p>これならば、カプセル化の概念を破壊せずに各クラスは各クラスの責務に向き合うことができる</p>\n<p>今回は既存のメール送信クラスがあるとして、新しく予約システムの作成をする。予約完了時にメール送信するような仕組みにしたいので、予約クラスはメールクラスを継承するのでなく、コンポジションを使って利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mail</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> from <span class=\"token operator\">=</span> <span class=\"token string\">\"admin@company.com\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"to\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" / \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"from\"</span> <span class=\"token operator\">+</span> from <span class=\"token operator\">+</span> <span class=\"token string\">\" / \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"「\"</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\"」\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>メールクラスは指定の宛先に、渡されたメールの内容を送信するだけです。</p>\n<p>予約クラスはこのsendメソッドを利用して予約時にメール送信を試みます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reserve</span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Mail</span> mail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> roomNo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Reserve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> roomNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user@company.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>roomNo <span class=\"token operator\">=</span> roomNo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getReserve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 予約処理の実施</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"予約の完了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//　予約できたらメールで連絡する</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>roomNo <span class=\"token operator\">+</span> <span class=\"token string\">\"予約しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Mailクラスを変数として保持することで、予約が完了したらMailクラスのsendメソッドを利用しています。以下のようにして利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Reserve</span> reserve <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reserve<span class=\"token punctuation\">.</span><span class=\"token function\">getReserve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">予約の完了\r\ntouser@company.com / fromadmin@company.com / 「12予約しました」</code></pre></div>\n<p>ちなみにコンポジションと集約はとても似ています。</p>\n<p>http://mylifeinventory.blog.fc2.com/blog-entry-27.html</p>\n<p>「オブジェクト指向のこころ」では</p>\n<ul>\n<li>保持されているものが保持しているものの一部\n<ul>\n<li>自動車とそれを構成するエンジン</li>\n</ul>\n</li>\n<li>独立して存在できる何かのコレクションがある\n<ul>\n<li>空港とそこに駐機されている飛行機</li>\n</ul>\n</li>\n</ul>\n<p>最初の例がコンポジションで、2番目が集約、と説明されています。これはGofと逆。</p>\n<h2>デザインパターン</h2>\n<p>デザインパターンをカタログとして捉えてしまうと、パターンが目的になってしまい、オブジェクト指向の理解から遠ざかってしまうような気がしています。</p>\n<p>そのため今回はコンポジションと集約に目線を向けてデザインパターンを確認します。</p>\n<h2>アダプターパターン</h2>\n<p>アダプターパターンは継承を行うパターンと委譲を行うパターンがあります。今回は委譲を行うパターンについて説明します。</p>\n<p>アダプターパターンはインターフェースに互換性のないクラス同士を結び付けます。</p>\n<p>ポリモーフィズムで振舞を柔軟に変更している場合、互換性のないインターフェースを実装したクラスを利用したくなっても、インターフェースが合致していないため利用できません。</p>\n<p>そういった時にインターフェースを派生させた新規クラスで、利用したいクラスをラップすることでインターフェースを適合させます。</p>\n<h3>例</h3>\n<p>データベースインターフェースを実装して、OracleとMySqlクラスを作成します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Database</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Oracle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Database</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oracleデータベースに接続しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oracleのセットアップが完了しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySql</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySqlデータベースに接続しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySqlのセットアップが完了しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここまでは問題ないです。しかし次のリリースでPostgreにも対応する必要が出てきました。Postgre関連のクラスを別のチームが作っていたのですが、実装しているインターフェースも名前も適合しませんでした。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DataBaseConnection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * 既存のPostgreのクラスはそもそも実装するインターフェースもメソッド名も違う。</span>\n<span class=\"token doc-comment comment\"> * そのためDatabaseインターフェースに適合できないのでポリモーフィズムが利用できない。</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Postgre</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DataBaseConnection</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Postgreデータベースに接続しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Postgreの環境セットアップが完了しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これでは利用ができませんので、Adapterを作成してインターフェースを適合させます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * インターフェースもメソッド名も適合していないPostgreクラスのアダプタークラス</span>\n<span class=\"token doc-comment comment\"> * Databaseインターフェースを実装して、メソッドの実装はPostgreクラスのオブジェクトに委譲することで</span>\n<span class=\"token doc-comment comment\"> * PostgreクラスをDatabaseインターフェースのものとして利用する</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostgreAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 変数としてPostgreオブジェクトを保持しておく</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Postgre</span> postgre<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PostgreAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postgre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Postgre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postgre<span class=\"token punctuation\">.</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postgre<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>アダプタはDatabaseインターフェースを実装して、実装は既存のPostgreクラスのメソッドを利用します。これならば既存のPostgreクラスを一切修正することなく利用できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Database型のオブジェクトを使う</span>\n        <span class=\"token class-name\">Database</span> database <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Oracle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        database <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Postgreだけインターフェースが適合しないためエラー</span>\n        <span class=\"token comment\">// database = new Postgre();</span>\n\n        <span class=\"token comment\">// そこでadapterを利用する</span>\n        database <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostgreAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Oracleデータベースに接続しました。\r\r\nOracleのセットアップが完了しました。\r\r\nMySqlデータベースに接続しました。\r\r\nMySqlのセットアップが完了しました\r\r\nPostgreデータベースに接続しました。\r\r\nPostgreの環境セットアップが完了しました。</code></pre></div>\n<h2>デコレーターパターン</h2>\n<p>デコレーターパターンは、継承を使わずにオブジェクトに新たな責務を与えるパターンです。</p>\n<p>例えば既存の印刷処理に対してヘッダー情報とフッター情報の出力を追加したい場合に、印刷処理を行うクラスを継承してヘッダーを出力するクラスを作ったりするのではなく、既存の印刷処理をヘッダー出力クラスから委譲することで、ヘッダー出力と既存の印刷処理を実施できるようにします。</p>\n<p>以下のポイントがあります</p>\n<ul>\n<li>既存の印刷処理クラスに手を付けることはしません</li>\n<li>責務は取り外し可能\n<ul>\n<li>ヘッダーとフッターの出力は取り外せる</li>\n</ul>\n</li>\n<li>サブクラス化をしてクラス階層を莫大に増やすことをしない</li>\n</ul>\n<h3>例</h3>\n<p>Printerはシンプルに与えられた文字列をプリントするクラスで、Printインターフェースを実装します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Print</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Printer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Print</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここでヘッダーとフッターも出力できるようにしたいとなりました。しかしPrinterクラスの印刷処理は、他のシステムからも利用されているため修正することはできません。</p>\n<p>そこでデコレータークラスを作成してPrinterクラスの責務を動的に追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Printオブジェクトの責務を増やすためのクラス</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> * 既存のPrinterクラスを継承せずに処理の拡張をすることが目的です</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Print</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Print</span> print<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrintDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Print</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>print <span class=\"token operator\">=</span> print<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ヘッダー出力クラスを作成します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintHeader</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PrintDecorator</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrintHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Print</span> print<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ヘッダーの出力を行う\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>フッターの出力クラスも作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintFooter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PrintDecorator</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrintFooter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Print</span> print<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callPrint</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"フッターの出力を行います\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これらデコレータークラスは取り外し可能です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> test_ヘッダーフッター出力ができる<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Print</span> printer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Printer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintHeader</span><span class=\"token punctuation\">(</span>printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintFooter</span><span class=\"token punctuation\">(</span>printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printer<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大変いつもお世話になっております\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// まずFooter#printでFooter#callPrintが呼ばれる</span>\n        <span class=\"token comment\">//   Print#printが呼ばれる（ここではHeaderが設定されているのでHeader#printが呼ばれる)</span>\n        <span class=\"token comment\">//   　　Header#printではヘッダー情報を出力して、Header##callPrintが呼ばれる</span>\n        <span class=\"token comment\">//   　　　　Print#printが出力される(ここは既存のPrinter#print)</span>\n        <span class=\"token comment\">// 最後にFooterの出力が行われる</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ヘッダーの出力を行う\r\r\n大変いつもお世話になっております\r\r\nフッターの出力を行います</code></pre></div>\n<p>フッターが不要ならばフッターを外せばいいだけです。</p>\n<p>デコレータークラスがPrintインターフェースを実装しているので、ポリモーフィズムによってその実装クラス（HeaderとFooter）のprintメソッドが問題なくコールされます。</p>\n<h2>ブリッジパターン</h2>\n<p>ブリッジパターンは、抽象と実装を分離してそれぞれ独立して変更できるようにするパターンです。例えばJDBC（抽象）で利用するDriver（実装）を変更するだけで、接続するデータベースをOracle、Postgreなど簡単に切り替えることができます。→Class.forNameで登録しているやつ</p>\n<h3>例</h3>\n<p>OracleとPostgreに接続する例を考えてみます。まずはAPIを提供するクラスです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Access</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Driver</span> dirver<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Access</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Driver</span> driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirver <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataAccess</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Access</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataAccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Driver</span> driver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirver<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Driverが実装の詳細ですが、APIを提供するだけのクラスでは実装の詳細については関与しません。</p>\n<p>Driverインターフェースです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Driver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Postgre用のDriver実装クラスです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostgreDriver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Driver</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Postgreに接続しました\"</span> <span class=\"token operator\">+</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この時点で利用することができます。</p>\n<p>抽象と実装の橋渡しであるAccessクラスは、指定された実装クラスを利用します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Access</span> access <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataAccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PostgreDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naccess<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgre:0.0.0.0:5432\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Postgreに接続しましたpostgre:0.0.0.0:5432</code></pre></div>\n<p>OracleのDriverも追加してみますが、アダプターパターンと混ぜてみます。適合しないインターフェース</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ODriver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OracleDriver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ODriver</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oracleに接続しました\"</span> <span class=\"token operator\">+</span> url <span class=\"token operator\">+</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>アダプターを利用してDriverとして利用します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OracleDriverAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Driver</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OracleDriver</span> driver<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OracleDriverAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OracleDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">\"read setting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Access</span> access <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataAccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PostgreDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naccess<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgre:0.0.0.0:5432\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naccess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataAccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OracleDriverAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naccess<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oracle:0.0.0.0:5432\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Postgreに接続しましたpostgre:0.0.0.0:5432\r\r\nOracleに接続しましたoracle:0.0.0.0:5432read setting</code></pre></div>\n<h2>オブジェクト指向について</h2>\n<p>ブリッジパターンとアダプターパターンは似ています。実装の詳細を別のオブジェクトに委譲している点は、ほとんど同じだと言えるでしょう。</p>\n<ul>\n<li>ブリッジパターンはインターフェースと実装を分けて設計して、ロジックの取替を容易にすることでクラスが増えていくのを防止できます。</li>\n<li>アダプターパターンは既存の機能を、新しいシステムやインターフェースで使いたい時に動作させる目的です。</li>\n</ul>\n<p>今回はあえて混ぜて使ってみたので違いが割とハッキリしました。</p>\n<p>デザインパターンを利用しようとした時、どのパターンに落とし込むかを考える前に、継承をするという考えを捨ててプログラミングをしていくと、自然とパターンに当てはまっているかもしれません。</p>\n<p>そして自然とパターンに落とし込むには、ポリモーフィズムの理解が必須だということが言えると思います。</p>\n<p>今まで見てきたパターンは全てポリモーフィズムが働いています。</p>\n<p>つまりデザインパターンでオブジェクト指向を理解するには、ポリモーフィズムと委譲を上手に利用することが重要ですね。</p>","slug":"p1460"},"__N_SSG":true}