{"pageProps":{"frontMatter":{"title":"VisualStudioCode実践ガイドを読む","date":"2022.03.28","description":"VisualStudioCode実践ガイドを読む","categories":["TypeScript"]},"content":"<p>この本が手元に来たので読んでみます。VisualStudioCodeはエディタとして使うのであれば解説書などは不要ですが、より深い部分を知るには良い本だと思います。</p>\n<p>私が読みたかったのはTypeScriptでの開発というところなので、そこを中心に頑張って読み進めていきます。</p>\n<p>私の実施環境はWindowsです</p>\n<h2>ショートカットキー</h2>\n<ul>\n<li>指定行に移動\n<ul>\n<li>ctrl + G</li>\n</ul>\n</li>\n<li>行選択\n<ul>\n<li>ctrl + L</li>\n</ul>\n</li>\n<li>現在行、選択した範囲の行を上下に移動\n<ul>\n<li>alt + ↑/↓</li>\n</ul>\n</li>\n<li>コメントアウト\n<ul>\n<li>ctrl + /</li>\n</ul>\n</li>\n<li>ブロックコメント\n<ul>\n<li>alt + shift + A</li>\n</ul>\n</li>\n<li>ファイル名によるクイック検索\n<ul>\n<li>ctrl + P</li>\n</ul>\n</li>\n<li>選択語句を全て選択\n<ul>\n<li>ctrl + shift + L</li>\n</ul>\n</li>\n<li>選択語句を次に一致するものを選択\n<ul>\n<li>ctrl + D</li>\n</ul>\n</li>\n<li>マルチカーソル\n<ul>\n<li>alt + 左クリック</li>\n</ul>\n</li>\n<li>矩形選択\n<ul>\n<li>alt + shift + 左ドラッグ</li>\n</ul>\n</li>\n<li>矩形選択（キーボードのみ）\n<ul>\n<li>ctrl + alt + shift + 矢印キー</li>\n</ul>\n</li>\n</ul>\n<h2>デバッグ</h2>\n<ul>\n<li>.vscode/launch.jsonを作成する\n<ul>\n<li>デバッグの設定を記載</li>\n<li>ワークスペースごとに作成する</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/1757/1.png\" alt=\"画像\"></p>\n<p>デバッグビューからcreate launch.json fileをクリックする</p>\n<p>お好きな言語を選びます</p>\n<p><img src=\"/1757/2.png\" alt=\"画像\"></p>\n<p>変数</p>\n<ul>\n<li>tpye\n<ul>\n<li>デバッグする言語、環境の種類</li>\n</ul>\n</li>\n<li>prpgram\n<ul>\n<li>実行するプログラムのファイル</li>\n</ul>\n</li>\n<li>cwd\n<ul>\n<li>作業フォルダー</li>\n</ul>\n</li>\n<li>${workspaceFolder}\n<ul>\n<li>フルパス</li>\n</ul>\n</li>\n</ul>\n<h2>タスク</h2>\n<p>tsのコンパイルなどをタスク化できる</p>\n<p>ターミナル>タスクの設定</p>\n<p><img src=\"/1757/3.png\" alt=\"画像\"></p>\n<p>typescriptのコンパイルタスクは自動で検出してくれる</p>\n<p><img src=\"/1757/4.png\" alt=\"画像\"></p>\n<p>.vscode/tasks.jsonが作成されます</p>\n<p>別のタスクを追加する場合は同じ手順でファイルにタスクが追記される。</p>\n<p>また、同じターミナルメニューからタスクの実行などが行える。タスクはターミナルウインドウにログ等出力されます。</p>\n<h2>Mocha</h2>\n<p>普通にターミナルから実行する</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx mocha -r ts-node/register test/model/task/repository-test.ts</code></pre></div>\n<p>※絶対パスにした時の、NODE_PATHの指定が私の環境ではよくわからなかったので相対パスにて行いました。tsconfig.jsonのbaseUrlをコメントアウトして無効化しています。そのためインポート方法も参考書と異なっています</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ITask <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../src/module/task/task\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>describe<span class=\"token punctuation\">,</span> Suite<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mocha\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Repository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../src/module/task/repository\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"assert\"</span>\n</code></pre></div>\n<p>ちなみにts-nodeを使うとNode.js上で直接TypeScriptを実行できます。</p>\n<ul>\n<li>Mocha Test Explorerという拡張をインストールする</li>\n</ul>\n<p><img src=\"/1757/5.png\" alt=\"画像\"></p>\n<p>setting.jsonを修正する※ワークスペースのsetting.jsonを修正します。</p>\n<p><img src=\"/1757/6.png\" alt=\"画像\"></p>\n<p>私は戦略的撤退しました….orz</p>\n<h2>WebAPI</h2>\n<p>expressを利用したコードをコンパイルしてサーバーの起動をする</p>\n<p>ルーティングが以下のようになっています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">private</span> <span class=\"token function\">routing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>extended<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// getのリクエスト</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/tasks\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// post</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/tasks\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/tasks/:id/done\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>WebRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx tsc\nnode ./out/src/server/main.js</code></pre></div>\n<p>リクエストを投げました</p>\n<p><img src=\"/1757/7.png\" alt=\"画像\"></p>\n<p>postした後にgetする</p>\n<p><img src=\"/1757/8.png\" alt=\"画像\"></p>\n<h2>デバッグ</h2>\n<p>デバッグのlaunch.jsonを作成するときにNode.jsを選択していたので、そのファイルのprogramをmain.jsに修正しました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-JSON\"><code class=\"language-JSON\">    &#x26;quot;configurations&#x26;quot;: [\n        {\n            &#x26;quot;type&#x26;quot;: &#x26;quot;pwa-node&#x26;quot;,\n            &#x26;quot;request&#x26;quot;: &#x26;quot;launch&#x26;quot;,\n            &#x26;quot;name&#x26;quot;: &#x26;quot;Launch Program&#x26;quot;,\n            &#x26;quot;skipFiles&#x26;quot;: [\n                &#x26;quot;&#x26;lt;node_internals&#x26;gt;/**&#x26;quot;\n            ],\n            &#x26;quot;program&#x26;quot;: &#x26;quot;${workspaceFolder}/out/src/server/main.js&#x26;quot;,\n            &#x26;quot;outFiles&#x26;quot;: [\n                &#x26;quot;${workspaceFolder}/**/*.js&#x26;quot;\n            ]\n        }\n    ]</code></pre></div>\n<p>pwa-nodeとなっていますが、最新のvscodeのデフォルトらしい（間違ってたらすみません）</p>\n<p>デバッグビューから実行ボタンをクリックするとサーバーの起動が開始します。</p>\n<p><img src=\"/1757/9.png\" alt=\"画像\"></p>\n<p>ソースマップを有効にしたけどmain.tsが表示されない。。。</p>\n<p>ただtsファイルにブレークポイントを張って動かしたら止まったので問題は無さそう</p>\n<p><img src=\"/1757/10.png\" alt=\"画像\"></p>\n<p>一旦ここまで</p>","slug":"p1757"},"__N_SSG":true}