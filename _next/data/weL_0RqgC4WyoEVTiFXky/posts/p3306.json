{"pageProps":{"frontMatter":{"title":"SpringBootとPostgreのアプリケーションをKubernetesにデプロイ | Secrets","date":"2022.08.09","description":"SpringBootとPostgreのアプリケーションをKubernetesにデプロイ | Secrets","categories":["Kubernetes"]},"content":"<p>この記事のSecrets部分の内容は「現場至上主義 Spring Boot2 徹底活用」を参考に実施しています。</p>\n<p>前回の続きで、今回はデータベースのアクセス情報の記載を、Secrets利用して設定します。Secretsに関しては過去記事でも実践済なので復習の意味も込めてやっていきます。</p>\n<p>あくまで勉強目的であり、ベストプラクティスではないので注意してください。</p>\n<p><a href=\"/posts/p3270\">リンク</a></p>\n<h2>準備</h2>\n<p>データベースに接続するアプリケーションを作るのですが、環境変数から読み取るように予め定義しておきます。</p>\n<p>ここで${}になっている部分が環境変数を参照するようになっています</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">spring:\n  datasource:\n    driver-class-name: org.postgresql.Driver\n    url: jdbc:postgresql://${POSTGRE_DB_HOST}:${POSTGRE_DB_PORT}/misaka\n    username: ${POSTGRE_DB_USER}\n    password: ${POSTGRE_DB_PASSWORD}\n</code></pre></div>\n<p>今回はPostgreを用意してSpringApplicationからの接続を行います。</p>\n<h2>Postgre環境の作成と接続</h2>\n<p>以下の順序で作成します</p>\n<ul>\n<li>Secretsの作成\n<ul>\n<li>ユーザー名とパスワードをエンコードした状態で登録する</li>\n</ul>\n</li>\n<li>ConfigMapの作成\n<ul>\n<li>Postgre環境のホスト名を登録します</li>\n</ul>\n</li>\n<li>Postgreのdeployment\n<ul>\n<li>Postgreのコンテナを作成します</li>\n</ul>\n</li>\n<li>Serviceの作成\n<ul>\n<li>Postgreのホスト名を設定します</li>\n</ul>\n</li>\n<li>Springのdeployment\n<ul>\n<li>DB接続に必要となる環境変数の定義など行います</li>\n</ul>\n</li>\n</ul>\n<h4>Secrets</h4>\n<p>ユーザー名とパスワードを暗号化して設定したいので、以下のコマンドでbase64でエンコードした値が取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">└─$ echo -n &#x26;quot;misaka&#x26;quot; | base64              \r\r\nbWlzYWth\r</code></pre></div>\n<p><img src=\"/3306/1.png\" alt=\"画像\"></p>\n<p>上記の値を利用してyamlファイルを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: v1\nkind: Secret\nmetadata:\n  name: postgre-secrets\ntype: Opaque\ndata:\n  user: bWlzYWth\n  password: bWlrb3Rv\n</code></pre></div>\n<ul>\n<li>userとpasswordを設定\n<ul>\n<li>misaka/mikoto</li>\n</ul>\n</li>\n</ul>\n<p>以下のコマンドで登録します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">kubectl apply -f /home/misaka/デスクトップ/jar/postgre-secrets.yaml                                                    \r</code></pre></div>\n<p><img src=\"/3306/2.png\" alt=\"画像\"></p>\n<h4>ConfigMapの作成</h4>\n<p>postgreのホスト名はConfigMapに記載するようにします。前回作成したConfigMapのyamlを以下のように修正します</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sample-config\ndata:\n  spring.profiles.active: default\n  postgre.db.host: 10.103.127.228\n</code></pre></div>\n<ul>\n<li>postgre.db.host\n<ul>\n<li>ここはServiceを設定後に再設定します</li>\n</ul>\n</li>\n</ul>\n<p>いったん設定をapplyで登録しておきます。</p>\n<p><img src=\"/3306/3.png\" alt=\"画像\"></p>\n<h2>Postgreのdeploymentの作成</h2>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgre-sample\nspec:\n  selector:\n    matchLabels:\n      app: postgre-sample\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: postgre-sample\n    spec:\n      containers:\n      - name: postgre-sample\n        image: postgres:14\n        env:\n        - name: POSTGRE_DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: sample-config\n              key: postgre.db.host\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgre-secrets\n              key: user\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgre-secrets\n              key: password\n        ports:\n        - containerPort: 5432\n</code></pre></div>\n<ul>\n<li>host\n<ul>\n<li>configmapから取得</li>\n</ul>\n</li>\n<li>userとpassword\n<ul>\n<li>secretsから取得</li>\n</ul>\n</li>\n<li>またエラーを起こして気づいたのですが、POSTGRES_PASSWORDという環境変数名のkeyにパスワードを登録しておく必要があります</li>\n</ul>\n<h2>Serviceの作成</h2>\n<p>postgre用のサービスを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: v1\nkind: Service\nmetadata:\n  name: postgre-service\nspec:\n  selector:\n    app: postgre-sample\n  ports:\n  - port: 5432\n    targetPort: 5432\n</code></pre></div>\n<p><img src=\"/3306/4.png\" alt=\"画像\"></p>\n<p>先ほどのConfigMapのpostgre.db.hostにここのクラスターIPを設定して再度登録しておきます</p>\n<p><img src=\"/3306/5.png\" alt=\"画像\"></p>\n<h2>Springのdeploymentの修正</h2>\n<p>envのvalueは外部に設定していますが、postgreのポート番号だけはここに直接記載しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sample\nspec:\n  selector:\n    matchLabels:\n      app: sample\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: sample\n    spec:\n      containers:\n      - name: sample\n        image: sample\n        imagePullPolicy: Never\n        env:\n        - name: SPRING_PROFILES_ACTIVE\n          valueFrom:\n            configMapKeyRef:\n              name: sample-config\n              key: spring.profiles.active\n        - name: POSTGRE_DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: sample-config\n              key: postgre.db.host\n        - name: POSTGRE_DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgre-secrets\n              key: user\n        - name: POSTGRE_DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgre-secrets\n              key: password\n        - name: POSTGRE_DB_PORT\n          value: !!integer 5432\n        ports:\n        - containerPort: 8080\n</code></pre></div>\n<ul>\n<li>必要な環境変数を定義します\n<ul>\n<li>ホスト名はConfigMapから</li>\n<li>パスワードとユーザー名はSecretsから</li>\n</ul>\n</li>\n<li>環境変数のkey名はSpringBootアプリケーション側yamlで${}に定義するkey名と同じもの</li>\n<li>!!integerで数値を文字列として表現できます\n<ul>\n<li>数値のままだとエラーになります</li>\n</ul>\n</li>\n</ul>\n<p>これもapplyして登録し直します。</p>\n<p>これでブラウザにアクセスするとアプリケーションが問題なく動作している(DBに接続できている）ことがわかります</p>\n<p><img src=\"/3306/6.png\" alt=\"画像\"></p>\n<h3>DB接続エラー</h3>\n<p>virtualboxが重くてタイプミスがあったりでホスト名とかポートとかの打ち間違えがありました。うまくデータベースに接続できないとお決まりのエラーになります</p>\n<p><img src=\"/3306/7.png\" alt=\"画像\"></p>\n<p>Podにエラーがあるかどうかはget podしてSTATUSで確認できます</p>\n<p><img src=\"/3306/8.png\" alt=\"画像\"></p>\n<p>詳細ログの出し方はlogs pod名で取得できます(後述)</p>\n<h2>その他</h2>\n<h4>CrashLoopBackOff</h4>\n<p>ログを見ると速いです</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">└─$ sudo kubectl get pod                                                                                                                       1 ⨯\r\r\nNAME                              READY   STATUS             RESTARTS      AGE\r\r\npostgre-sample-86f58c6b45-7n4rs   0/1     CrashLoopBackOff   6 (15s ago)   6m9s\r\r\n\r\n└─$ sudo kubectl logs postgre-sample-86f58c6b45-7n4rs                                                                                          1 ⨯\r\r\nError: Database is uninitialized and superuser password is not specified.\r\r\n       You must specify POSTGRES_PASSWORD to a non-empty value for the\r\r\n       superuser. For example, &#x26;quot;-e POSTGRES_PASSWORD=password&#x26;quot; on &#x26;quot;docker run&#x26;quot;.\r\r\n\r\r\n       You may also use &#x26;quot;POSTGRES_HOST_AUTH_METHOD=trust&#x26;quot; to allow all\r\r\n       connections without a password. This is *not* recommended.\r\r\n\r\r\n       See PostgreSQL documentation about &#x26;quot;trust&#x26;quot;:\r\r\n       https://www.postgresql.org/docs/current/auth-trust.html\r\r\n</code></pre></div>\n<ul>\n<li>この場合は環境変数のPOSTGRES_PASSWORDを設定すれば解決します</li>\n</ul>\n<h2>exec</h2>\n<p>pod名からコンテナに入る</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">└─$ sudo kubectl exec -it postgre-sample-c4669875c-8w6s5 /bin/bash\r\r\nkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\r\r\nroot@postgre-sample-c4669875c-8w6s5:/# \r\n\r</code></pre></div>\n<h3>データベース</h3>\n<p>今回はPOSTGRES_USERとPOSTGRES_PASSWORDをmisaka/mikotoで作成しているので、misakaというデータベースが作成されています</p>\n<p><img src=\"/3306/9.png\" alt=\"画像\"></p>\n<h3>アプリケーションの依存モジュール</h3>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">dependencies {\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\n\tcompileOnly 'org.projectlombok:lombok'\n\truntimeOnly 'org.postgresql:postgresql'\n\timplementation 'org.springframework.boot:spring-boot-starter-data-jdbc'\n\tannotationProcessor 'org.projectlombok:lombok'\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n</code></pre></div>\n<h2>参考サイト</h2>\n<p>https://qiita.com/higakin/items/f94b30686aabd0186d48</p>","slug":"p3306"},"__N_SSG":true}