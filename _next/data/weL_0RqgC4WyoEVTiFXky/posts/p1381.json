{"pageProps":{"frontMatter":{"title":"Laravel | AuthManagerを理解する","date":"2022.03.02","description":"Laravel | AuthManagerを理解する","categories":["Laravel"]},"content":"<p>マルチログインの勉強をしていたんですが、どうも設定ファイルとか弄ってるだけでは納得がいかないのでソースを読むことにしました。</p>\n<p>今更な記事ですが自分用のメモ程度に残しておきます。</p>\n<p>参考</p>\n<p>【Laravel】 認証や認可に関する補足資料</p>\n<p>Laravel の Guard（認証） って実際何をやっているのじゃ？</p>\n<p>私の環境PHP 7.4.27Laravel 8.80.0</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">sail@70ee715b44b3:/var/www/html$ php -v\nPHP 7.4.27 (cli) (built: Dec 20 2021 21:28:33) ( NTS )\nCopyright (c) The PHP Group\nZend Engine v3.4.0, Copyright (c) Zend Technologies\n    with Zend OPcache v7.4.27, Copyright (c), by Zend Technologies\n    with Xdebug v3.1.2, Copyright (c) 2002-2021, by Derick Rethans\nsail@70ee715b44b3:/var/www/html$ php artisan -V\nLaravel Framework 8.80.0\nsail@70ee715b44b3:/var/www/html$</code></pre></div>\n<h2>Authファサード</h2>\n<p>普段Auth::user()のようにやっているAuthファサードはAuthManagerクラスを取得します。Illuminate\\Auth\\AuthServiceProviderにサービスコンテナへの登録が記載されている</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">/**\n     * Register the authenticator services.\n     *\n     * @return void\n     */\n    protected function registerAuthenticator()\n    {\n        $this->app->singleton('auth', function ($app) {\n            return new AuthManager($app);\n        });\n\n        $this->app->singleton('auth.driver', function ($app) {\n            return $app['auth']->guard();\n        });\n    }\n</code></pre></div>\n<p>つまりこのAuthManagerが認証クラスの肝というわけですね。</p>\n<h2>ざっくりとAuthManagerの流れ(自己解析)</h2>\n<p>プロバイダの取得はCreatesUserProvidersトレイトに処理が移ります</p>\n<ul>\n<li>AuthManager\n<ul>\n<li>コンストラクタguardメソッドを呼び出してSessionGuard/TokenGuarを取得する(設定値によるがデフォルトはこれが用意されている)</li>\n<li>guard($name = null)defaultで設定しているguardの値を$nameとしてresolveメソッドを呼び出す</li>\n<li>resolve($name)getConfigメソッドで$this->app[‘config’][“auth.guards.{$name}”]を取得するAuth::extendで設定してるガードがないか確認。あればそこで設定をreturnさせるcreate + $confid[‘driver’] + Driverメソッドを呼び出す(ucfirst:先頭文字大文字化)例えば、createSessionDriverメソッドです</li>\n<li>createSessionDriver($name, $config)$this->createUserProvider($config[‘provider’] ?? null)を発火する\n<ul>\n<li>guardメソッドを呼び出してSessionGuard/TokenGuarを取得する(設定値によるがデフォルトはこれが用意されている)</li>\n<li>defaultで設定しているguardの値を$nameとしてresolveメソッドを呼び出す</li>\n<li>getConfigメソッドで$this->app[‘config’][“auth.guards.{$name}”]を取得する</li>\n<li>Auth::extendで設定してるガードがないか確認。あればそこで設定をreturnさせる</li>\n<li>create + $confid[‘driver’] + Driverメソッドを呼び出す(ucfirst:先頭文字大文字化)</li>\n<li>例えば、createSessionDriverメソッドです</li>\n<li>$this->createUserProvider($config[‘provider’] ?? null)を発火する</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>trait CreatesUserProviders\n<ul>\n<li>createUserProvider($provider = null)getProviderConfigurationメソッドを発火する</li>\n<li>getProviderConfiguration($provider)$this->app[‘config’][‘auth.providers.’.$provider];を取得する</li>\n<li>createUserProvider($provider = null)取得したcofnigのdriver(例eloquent)をdriver変数に詰めるdriverの値に応じてcreateDatabaseProviderかcreateEloquentProviderを返す\n<ul>\n<li>getProviderConfigurationメソッドを発火する</li>\n<li>$this->app[‘config’][‘auth.providers.’.$provider];を取得する</li>\n<li>取得したcofnigのdriver(例eloquent)をdriver変数に詰める</li>\n<li>driverの値に応じてcreateDatabaseProviderかcreateEloquentProviderを返す</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AuthManager\n<ul>\n<li>createSessionDriver($name, $config)SessionGuard($name, $provider, $this->app[‘session.store’]);をnewするnewしたものはguardとしてメソッドの戻り値になる</li>\n<li>コンストラクタ取得したguardのuserメソッドを発火する\n<ul>\n<li>SessionGuard($name, $provider, $this->app[‘session.store’]);をnewする</li>\n<li>newしたものはguardとしてメソッドの戻り値になる</li>\n<li>取得したguardのuserメソッドを発火する</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>ちなみにここの$nameの引数はルーティングのミドルウェアで指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'auth:misaka'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/misaka'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"misaka\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>マジックメソッドでguardのメソッドをコールする</h4>\n<p>guradメソッドはresolveメソッドの呼び出しを行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n     * Dynamically call the default driver instance.\n     *\n     * <span class=\"token keyword\">@param</span>  <span class=\"token class-name\"><span class=\"token keyword\">string</span></span>  <span class=\"token parameter\">$method</span>\n     * <span class=\"token keyword\">@param</span>  <span class=\"token class-name\"><span class=\"token keyword\">array</span></span>  <span class=\"token parameter\">$parameters</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token keyword\">mixed</span></span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$parameters</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><span class=\"token variable\">$method</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token variable\">$parameters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Guard</h2>\n<p>認証処理を行う。Illuminate\\Contracts\\Auth\\Guardインターフェースが該当します。実装クラスはSessionGuardとTokenGuardです。SessionGuardクラスはStatefulGuardを実装して、StatefulGuardはGuardを継承している。</p>\n<p>config/auth.phpのguards.{defaults.guard}.driverによって実装クラスを変化させる</p>\n<p>機能(一部)</p>\n<h2>プロバイダ</h2>\n<p>認証ユーザの取得などを行う。CreatesUserProvidersというtraitで主にプロバイダ自体の取得処理を行う。Illuminate\\Contracts\\Auth\\UserProviderインターフェースが該当する実装クラスは、DatabaseUserProviderとEloquentUserProviderがある。</p>\n<p>config/auth.phpのproviders.{defaults.guard.provider}.driverによって取得するプロバイダが変更されます。</p>\n<p>また実装クラスのコンストラクタでconfig/auth.phpのproviders.{defaults.guard.provider}.modelで指定されたクラスを渡しています。※EloquentUserProviderの場合。※DatabaseUserProviderの場合はconfig/auth.phpのproviders.{defaults.guard.provider}.table</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n     * Create an instance of the database user provider.\n     *\n     * <span class=\"token keyword\">@param</span>  <span class=\"token class-name\"><span class=\"token keyword\">array</span></span>  <span class=\"token parameter\">$config</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>DatabaseUserProvider</span>\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">createDatabaseProvider</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$config</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$connection</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">app</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'db'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$config</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'connection'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatabaseUserProvider</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$connection</span><span class=\"token punctuation\">,</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">app</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'hash'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$config</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'table'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Create an instance of the Eloquent user provider.\n     *\n     * <span class=\"token keyword\">@param</span>  <span class=\"token class-name\"><span class=\"token keyword\">array</span></span>  <span class=\"token parameter\">$config</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>EloquentUserProvider</span>\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">createEloquentProvider</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$config</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EloquentUserProvider</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">app</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'hash'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$config</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'model'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>auth.phpの抜粋</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token string single-quoted-string\">'providers'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'users'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'driver'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'eloquent'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'model'</span> <span class=\"token operator\">=></span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// 'users' => [</span>\n        <span class=\"token comment\">//     'driver' => 'database',</span>\n        <span class=\"token comment\">//     'table' => 'users',</span>\n        <span class=\"token comment\">// ],</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>機能(一部)</p>\n<p>SessionGuardをインスタンス化する際に、コンストラクタにプロバイダーが渡されます。プロバイダーの使われ方として、例えばSessionGuardのuserメソッドではAuthenticatableを実装したクラスを、retrieveByIdメソッドにて取得しています。</p>\n<h2>Authenticatable</h2>\n<p>App\\Models\\Userクラスが継承しているクラスです。大抵はUserクラスをコピってもう一つの認証モデルを作るので意識しないですが、なぜこれを継承する必要があるのでしょうか？</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Authenticatable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">HasApiTokens</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">HasFactory</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">HasProfilePhoto</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">Notifiable</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">TwoFactorAuthenticatable</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n<p>AuthenticatableはIlluminate\\Foundation\\Auth\\Userクラスです。このクラスはIlluminate\\Contracts\\Auth\\Authenticatableインターフェースを実装しています。</p>\n<p>EloquentUserProviderクラスでは以下のようにAuthenticatableを実装したクラスが必要になるためです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Authenticatable</span> <span class=\"token keyword\">as</span> UserContract<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span><span class=\"token operator\">.</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">validateCredentials</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">UserContract</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$credentials</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$plain</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$credentials</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">hasher</span><span class=\"token operator\">-></span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$plain</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-></span><span class=\"token function\">getAuthPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>また、SessionGuardクラスでもこのインターフェースを実装したクラスを受取ることが前提になっています。</p>\n<p>そのため、ただModelを継承したクラスではダメということです。※Authenticatableを実装すれば良い</p>\n<h2>マルチログイン</h2>\n<p>ここまで入ってくると、ようやくマルチログインでauth.phpに記載する意味がわかってきます。もちろんauth.phpにはコメントもあって何をすればいいのか書いてるのですが、それだけでは、なぜそうなるのかというモヤモヤは解消されません。</p>","slug":"p1381"},"__N_SSG":true}