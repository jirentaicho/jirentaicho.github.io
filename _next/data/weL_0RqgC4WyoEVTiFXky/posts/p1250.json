{"pageProps":{"frontMatter":{"title":"Javaの@FunctionalInterfaceでラムダ式と遊ぶ","date":"2022.02.18","description":"Javaの@FunctionalInterfaceでラムダ式と遊ぶ","categories":["Java"]},"content":"<p>@FunctionalInterfaceを使ってラムダ式と遊んでみます</p>\n<h2>シンプルな例</h2>\n<p>とてもシンプルな例です。T型の引数を取ってT型を返すラムダ式を渡してあげることで実装できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\"> * 関数型インターフェースは単一の抽象メソッドを持っています</span>\n<span class=\"token comment\"> * → アノテーションを付けない場合は複数の抽象メソッドを定義できます（エラーにならない）</span>\n<span class=\"token comment\"> * また、defaultやstaticメソッドは必要に応じて定義できる</span>\n<span class=\"token comment\"> */</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SampleFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">he</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>引数で受け取って利用してみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SampleFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> r <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfunc<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleFunction</span><span class=\"token punctuation\">.</span><span class=\"token function\">he</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>misakaを渡してmikotoを付与して返すという意味のわからない実装ができました</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testの実行開始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleTestFunctional</span> sa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SampleTestFunctional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\"mikoto\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misakamikoto\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>結果</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">testの実行開始\r\r\nexecute\r\r\nhe\r</code></pre></div>\n<h2>シンプルな例２</h2>\n<p>またシンプルな例を見てみます。これはT型を受取って値を返さないインターフェースです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このインターフェースを受取るメソッドを作ってみます。Stringを受取って処理します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testExecution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tfunc<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"終了しました\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>テストで実行してみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">teste</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testeの実行開始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleTestFunctional</span> sa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SampleTestFunctional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">.</span><span class=\"token function\">testExecution</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Level5\"</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Level5が出力されます。</p>\n<h2>ラムダ式を変数に格納する</h2>\n<p>今度は実行時に型を決めるようなメソッドを定義しておきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">testGeneriExecution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfunc<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>テストしてみますが、変数にラムダ式を入れて利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">kakunoutest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kakunoutestの実行開始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleTestFunctional</span> sa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SampleTestFunctional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 変数にラムダ式を格納する</span>\n\t\t<span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> funcA <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 変数にラムダ式を格納する</span>\n\t\t<span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> funcB <span class=\"token operator\">=</span> switchFlag <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>switchFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"データベースに接続します\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"データベースに接続しませんでした\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//　変数にいれたラムダ式を渡す</span>\n\t\t<span class=\"token class-name\">String</span> re <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">.</span><span class=\"token function\">testExecution</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hogee?\"</span><span class=\"token punctuation\">,</span> funcA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Boolean</span> b <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">.</span><span class=\"token function\">testGeneriExecution</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> funcB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Boolean</span> c <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">.</span><span class=\"token function\">testGeneriExecution</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> funcB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>結果</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">kakunoutestの実行開始\r\r\nhogee?\r\r\nデータベースに接続します\r\r\nデータベースに接続しませんでした</code></pre></div>\n<h2>ラムダ式を返すラムダ式</h2>\n<p>この辺から少し頭が痛くなります。</p>\n<p>ラムダ式を返すラムダ式は () -> () -> こんな感じ記載します。実際の例は以下です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReturnLamda</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ラムダ式を返すラムダ式を期待します</span>\n\t<span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getLamda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ReturnLamdaインターフェースを利用してみます。getLamdaの戻り値はExecutionFunctionですので、変数eはExecutionFunctionになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetLamda</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span><span class=\"token class-name\">ReturnLamda</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ExecutionFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span><span class=\"token function\">getLamda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ラムダ式を返すラムダ式を記載します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_getLambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_getLambdaの実行開始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleTestFunctional</span> sa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SampleTestFunctional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsa<span class=\"token punctuation\">.</span><span class=\"token function\">testGetLamda</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lamdaじゃなくてlambda\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>  str <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>getLamdaは引数無しなので()で記載します。そしてその戻り値はStringを引数に取るexecuteメソッドの実装になります。</p>\n<p>結果</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">test_getLambdaの実行開始\r\r\nlamdaじゃなくてlambda</code></pre></div>\n<h2>コンストラクタ参照</h2>\n<p>Supplierを使ったコンストラクタ参照をやってみます。SupplierはファクトリのようなものでT型のオブジェクトを返します。何を返すのかコンストラクタ参照で実装します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// コンストラクタ参照</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getClazz</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">T</span> t <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Misakaクラスを定義しておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>volkruss<span class=\"token punctuation\">.</span>misakaspring<span class=\"token punctuation\">.</span>functional</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Misaka</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Misaka</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"グッジョブです！と、ミサカは惜しみない賞賛を贈ります。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"御坂妹\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>テストで利用してみます。Misakaクラスのコンストラクタ参照を使って、オブジェクトのインスタンス化を行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_constructor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SampleTestFunctional</span> sa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SampleTestFunctional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Misaka</span> misaka <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">.</span><span class=\"token function\">getClazz</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Misaka</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>misaka<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>結果</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">test_constructor\r\r\nグッジョブです！と、ミサカは惜しみない賞賛を贈ります。\r\r\n御坂妹\r</code></pre></div>\n<p>FunctionalInterfaceとラムダ式は、非常に柔軟な実装ができるようになりそうですね</p>","slug":"p1250"},"__N_SSG":true}