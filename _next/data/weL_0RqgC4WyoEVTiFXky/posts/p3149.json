{"pageProps":{"frontMatter":{"title":"Springにはartisanコマンドがない？ならファイル自動生成タスクを作成する","date":"2022.07.29","description":"Springにはartisanコマンドがない？ならファイル自動生成タスクを作成する","categories":["Spring"]},"content":"<p>「インターセプターのクラスを作るの面倒くさいなぁ・・・Laravelだったらartisanコマンドでやってくれそうなのに、ほんとSpringって使えねーな」</p>\n<p>と思ったそこのあなた、自動生成タスクを作成してLaravelのartisanコマンドのようにクラスを自動生成しましょう。</p>\n<p>この記事は過去記事のおさらいです。もう一回同じことやれと言われたら自信がありません。。なので順番にゆっくりと落ち着いて書いていきます。</p>\n<p><a href=\"/posts/p1294\">リンク</a></p>\n<h2>buildSrcプロジェクトの作成</h2>\n<p>ビルドスクリプトで使いたいソースを格納していきます。Gradleは自動的にクラスを読み込んでクラスパスに追加してくれます。</p>\n<p>projectroot/buildSrcとなるようにフォルダを作成します。ここには実際の処理を記載するgroovyスクリプトを置いていきます。</p>\n<p>build.gradleを作成して以下のように記載します</p>\n<div class=\"remark-highlight\"><pre class=\"language-JSON\"><code class=\"language-JSON\">buildscript {\n    ext {\n        springBootVersion = &#x26;quot;2.0.6.RELEASE&#x26;quot;\n        groovyVersion = &#x26;quot;2.5.3&#x26;quot;\n    }\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath &#x26;quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&#x26;quot;\n    }\n}\n\napply plugin: &#x26;#39;groovy&#x26;#39;\napply plugin: &#x26;quot;io.spring.dependency-management&#x26;quot;\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n}\ndependencyManagement {\n    imports {\n        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES\n    }\n}\ndependencies {\n    implementation gradleApi()\n    implementation localGroovy()\n    implementation &#x26;quot;org.apache.commons:commons-lang3&#x26;quot;\n    implementation &#x26;quot;org.thymeleaf:thymeleaf&#x26;quot;\n}</code></pre></div>\n<p>次にbuildSrcのsrc/main/groovyを作成します。groovyはgradle source setsから選択します。(青色のフォルダマークになります）</p>\n<p><img src=\"/3149/1.png\" alt=\"画像\"></p>\n<p>ArtisanPluginとArtisanTaskというGroovyClassをcom.volkrussというパッケージに作成します。</p>\n<p><img src=\"/3149/2.png\" alt=\"画像\"></p>\n<p>それぞれ以下のよう記載します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">package com.volkruss\n\nimport org.gradle.api.DefaultTask\nimport org.gradle.api.tasks.TaskAction\n\nclass ArtisanTask extends DefaultTask {\n    @TaskAction\n    def doTask(){\n        println(&#x26;quot;fire artisan command.&#x26;quot;)\n    }\n}</code></pre></div>\n<ul>\n<li>DefaultTaskを継承します</li>\n<li>タスクとして行う内容の詳細を記載します。\n<ul>\n<li>今回はログにfire artisan command.と出力するだけのタスクを定義しています</li>\n</ul>\n</li>\n<li>メソッド名のdoTaskはお好きなメソッド名でも構いません</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">package com.volkruss\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\nclass ArtisanPlugin implements Plugin&#x26;lt;Project&#x26;gt;{\n    @Override\n    void apply(Project project) {\n        project.task(&#x26;quot;This is Task Name&#x26;quot;, type: ArtisanTask)\n    }\n}</code></pre></div>\n<ul>\n<li>Pluginを実装します\n<ul>\n<li>これによってプラグインとして認識されます</li>\n</ul>\n</li>\n<li>applyメソッドで行うのは実行するタスクの設定です\n<ul>\n<li>This is Task Nameというタスクを定義して、その実装は先ほど作成したArtisanTaskになります</li>\n</ul>\n</li>\n</ul>\n<p>次にルートプロジェクトのbuild.gradleにプラグインの有効化を設定しておきます。先ほど作成したプラグインクラスをインポートして有効化します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">import com.volkruss.ArtisanPlugin\n....(省略)\napply plugin: ArtisanPlugin</code></pre></div>\n<p>ここでGradleProjectの更新を行うと先ほど登録したタスクが表示されます</p>\n<p><img src=\"/3149/3.png\" alt=\"画像\"></p>\n<p>Tasks/otherに先ほど登録した”This is Task Name”というタスクが作成されていますこれを実行すると定義したログが出力されます</p>\n<p><img src=\"/3149/4.png\" alt=\"画像\"></p>\n<p>しかしこんな変な名前のタスクは嫌なのでタスク名を変更します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">package com.volkruss\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\nclass ArtisanPlugin implements Plugin&#x26;lt;Project&#x26;gt;{\n    @Override\n    void apply(Project project) {\n        project.task(&#x26;quot;artisan&#x26;quot;, type: ArtisanTask)\n    }\n}</code></pre></div>\n<p>これで更新をするといい感じです</p>\n<p><img src=\"/3149/5.png\" alt=\"画像\"></p>\n<h2>コマンドラインから実行して引数を受け取る</h2>\n<p>コマンドラインからも実行できるのでやってみます</p>\n<p>gradle タスク名で実行できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">PS D:\\work\\automake\\automake&#x26;gt; gradle artisan\n\n&#x26;gt; Task :artisan\nfire artisan command.\n</code></pre></div>\n<p>gradleがインストールされていない場合は付属のgradlewを使えます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">PS D:\\work\\automake\\automake&#x26;gt; .\\gradlew artisan\n\n&#x26;gt; Task :artisan\nfire artisan command.\n</code></pre></div>\n<p>次に引数を渡します。引数は-Pオプションにkey=と続けることで渡すことが可能なので、引数を受け取ってログに出力してみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">package com.volkruss\n\nimport org.gradle.api.DefaultTask\nimport org.gradle.api.tasks.TaskAction\n\nclass ArtisanTask extends DefaultTask {\n    @TaskAction\n    def doTask(){\n        println(&#x26;quot;fire artisan command.&#x26;quot;)\n        if(!project.hasProperty(&#x26;quot;title&#x26;quot;)){\n            println(&#x26;quot;引数 title が設定されていません&#x26;quot;)\n            return\n        }\n        println(&#x26;quot;受け取った引数は&#x26;quot; + project.title.toString())\n        println(&#x26;quot;--------end-------&#x26;quot;)\n    }\n}</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">3 actionable tasks: 3 executed\nPS D:\\work\\automake\\automake&#x26;gt; gradle artisan -Ptitle=Rust\n\n&#x26;gt; Task :artisan\nfire artisan command.\n受け取った引数はRust\n--------end-------\n</code></pre></div>\n<p>※ちなみにnameという引数を使うと自動的にプロジェクト名が入ってきます。</p>\n<h2>設定ファイルから値の読み込み</h2>\n<p>設定ファイルから値を読み取って利用してみます</p>\n<p>まずは設定ファイルを作成します。ArtisanExtensionというGroovy Classを作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">package com.volkruss\n\nclass ArtisanExtension {\n    public String fullName = &#x26;quot;kamijo toma&#x26;quot;\n}</code></pre></div>\n<p>タスクからproject.extensions.findByType(Class)を利用することで設定クラスの値を利用することができます</p>\n<p>しかしプラグイン側でもエクステンションの利用について設定してあげる必要がありますのでやってみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">package com.volkruss\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\nclass ArtisanPlugin implements Plugin&#x26;lt;Project&#x26;gt;{\n    @Override\n    void apply(Project project) {\n        project.extensions.create(&#x26;quot;artisan&#x26;quot;,ArtisanExtension)\n        project.task(&#x26;quot;artisan&#x26;quot;, type: ArtisanTask)\n    }\n}</code></pre></div>\n<p>これを利用するには以下のようにします</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">class ArtisanTask extends DefaultTask {\n    @TaskAction\n    def doTask(){\n        def ext = project.extensions.findByType(ArtisanExtension)\n        println(ext.fullName)\n    }\n}</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;gt; Task :artisan\nkamijotoma\n</code></pre></div>\n<h2>インターセプタークラスのテンプレートファイルを作成する</h2>\n<p>次にテンプレートとなるテキストファイルを作成します。これはresourcesフォルダを作成してtemplates.srcフォルダにtxtファイルを作成します</p>\n<p><img src=\"/3149/6.png\" alt=\"画像\"></p>\n<p>今回はInterceptor.txtというファイルを作成して内容を以下のようにしました</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"></code></pre></div>","slug":"p3149"},"__N_SSG":true}