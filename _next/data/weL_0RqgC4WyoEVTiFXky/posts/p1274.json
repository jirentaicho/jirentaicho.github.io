{"pageProps":{"frontMatter":{"title":"Docker | 現場至上主義 Spring Boot2 徹底活用","date":"2022.02.21","description":"Docker | 現場至上主義 Spring Boot2 徹底活用","categories":["Spring"]},"content":"<p>Dockerを使うメリット</p>\n<ul>\n<li>環境依存がなくなる（メンバーがおなじ環境を構築できる）</li>\n<li>環境構築手順をコード化できる</li>\n<li>わざわざDBサーバーとか用意しなくていいので簡単に環境を廃棄できる</li>\n</ul>\n<p>本ではDockerfileにてイメージの定義を行って、docker-composeにて利用します。（言い方おかしい？）docker-composeは少し古いですversion:2</p>\n<p>またGradleプラグインを使うことでdocker-compose up -dとか、Docker自体のコマンドをラップすることで、dockerに詳しくないプレイヤーでも簡単に起動できるようにしている</p>\n<p>githubでは以下にDocker関連の定義があります。</p>\n<p>https://github.com/miyabayt/spring-boot-doma2-sample/tree/master/docker</p>\n<p>mysqlの設定は、my.cnfをコンテナの/etc/mysql/conf.d/にコピーしています。これは普通のコピーコマンドを実行しています。</p>\n<p>最後にフォルダの作成と権限付与を行ってイメージの作成が完了します。</p>\n<h2>GradleからDockerを利用する</h2>\n<p>本に記載の内容だと理解できなかったのでネットの情報も元にGradleからDockerを利用してみます。</p>\n<p>※本の内容が少し古いです。https://github.com/miyabayt/spring-boot-doma2-sample/commit/aeaf264470859d4439e8d33a58330a5707c5f754</p>\n<p>Dockerは開発環境で利用するのでbuildscriptの中に記載します</p>\n<div class=\"remark-highlight\"><pre class=\"language-Bash\"><code class=\"language-Bash\">buildscript {\n\text {\n\t\tdockerComposePluginVersion = &#x26;quot;0.15.0&#x26;quot;\n\t}\n\trepositories {\n\t\tmavenCentral()\n\t\tjcenter()\n\t}\n\tdependencies {\n\t\tclasspath &#x26;quot;com.avast.gradle:gradle-docker-compose-plugin:${dockerComposePluginVersion}&#x26;quot;\n\t}\n}</code></pre></div>\n<p>プラグインの有効化とdocker-compose.yamlの場所を記載する</p>\n<div class=\"remark-highlight\"><pre class=\"language-Bash\"><code class=\"language-Bash\">apply plugin: &#x26;quot;docker-compose&#x26;quot;\n\ndockerCompose {\n\tuseComposeFiles = [&#x26;quot;docker/docker-compose.yml&#x26;quot;]\n}</code></pre></div>\n<p>ついでにdocker-compose.yamlも作成しておきます</p>\n<p><img src=\"/1274/1.png\" alt=\"画像\"></p>\n<p>ここで一旦gradle buildを実行します。</p>\n<p>するとdocker-composeコマンドのTaskが追加されます。</p>\n<p><img src=\"/1274/2.png\" alt=\"画像\"></p>\n<p>postgreの環境を構築してみます。今回はDockerfileを使わずdocker-compose.ymlに記載します</p>\n<div class=\"remark-highlight\"><pre class=\"language-JSON\"><code class=\"language-JSON\">version: &#x26;#39;3.7&#x26;#39;\nservices:\n  postgre:\n    image: postgres:latest\n    ports:\n      - 5432:5432\n    container_name: misaka_postgre\n    volumes:\n      - ./data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: misaka\n      POSTGRES_PASSWORD: mikoto\n      POSTGRES_DB: misaka</code></pre></div>\n<p>composeUpのタスクを実行しますとログにsuccessfulが表示されます</p>\n<p><img src=\"/1274/3.png\" alt=\"画像\"></p>\n<p>SQLクライアントから繋いでみます</p>\n<p><img src=\"/1274/4.png\" alt=\"画像\"></p>\n<p>無事接続できればpostgreのコンテナが起動しています。</p>\n<p>Dockerアプリからも確認はできます。</p>\n<p><img src=\"/1274/5.png\" alt=\"画像\"></p>\n<p>レガシーな開発環境でやったことある人ならわかるかと思いますが、開発環境でも共通のDBサーバーに繋がないといけないような現場のストレスはとんでもないです。</p>\n<p>GradleとDockerを使えばコマンドで一撃起動できるので大変便利ですね。</p>","slug":"p1274"},"__N_SSG":true}