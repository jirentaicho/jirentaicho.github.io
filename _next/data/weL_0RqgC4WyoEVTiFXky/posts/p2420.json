{"pageProps":{"frontMatter":{"title":"トランザクションマネージャについて深く見る | Spring","date":"2022.05.20","description":"トランザクションマネージャについて深く見る | Spring","categories":["Spring"]},"content":"<p>トランザクションマネージャを利用することで、トランザクションの制御を細かく設定できる。またトランザクションの制御も複雑になっているので、その辺も確認する。</p>\n<p>トランザクションマネージャ3つの利用方法</p>\n<ul>\n<li>Bean定義する\n<ul>\n<li>PlatformTransactionManagerの実装クラスをBean定義する</li>\n<li>Adviceの設定をするどのようなメソッドの時に、どのような設定でトランザクションを行うかを記載\n<ul>\n<li>どのようなメソッドの時に、どのような設定でトランザクションを行うかを記載</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>アノテーションによる宣言的トランザクション\n<ul>\n<li>@Transactionalアノテーションを使う。一番使いやすい。</li>\n<li>アノテーションの要素にトランザクションの定義情報を記載できる</li>\n<li>Proxyを介してトランザクションが行われる</li>\n</ul>\n</li>\n<li>明示的トランザクション\n<ul>\n<li>ソースコード上でPlatformTransactionManagerから提供されるメソッドを利用してトランザクションの制御を行う</li>\n<li>同一クラス内の処理の一部でトランザクション処理を行いたい場合(Proxyを介さない)に対応できる通常は宣言的トランザクションを利用すれば良いです\n<ul>\n<li>通常は宣言的トランザクションを利用すれば良いです</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>今回は明示的トランザクションについて見ていきますが、軽くアノテーションを使う宣言的トランザクションも見ていきます。明示的トランザクションを見る理由は、APIの使い方がわかりやすいからです。※宣言的トランザクションの利用が推奨されているらしいです。</p>\n<h2>トランザクションマネージャの実装クラス</h2>\n<ul>\n<li>DataSourceTransactionManager\n<ul>\n<li>1つのデータソースに対してトランザクション制御を行う</li>\n</ul>\n</li>\n<li>HibernateTransactionManager\n<ul>\n<li>Hibernate用</li>\n</ul>\n</li>\n<li>JpaTransactionManager\n<ul>\n<li>JPAのEntityManagerに対してトランザクション制御を行う</li>\n</ul>\n</li>\n<li>JtaTransactionManager\n<ul>\n<li>JTA用</li>\n</ul>\n</li>\n</ul>\n<p>使用するデータアクセス技術に合わせて利用する。</p>\n<h2>PlatformTransactionManager</h2>\n<p>全てのトランザクションマネージャが実装しているインターフェースです。</p>\n<p>公開されているメソッド</p>\n<ul>\n<li>getTransaction</li>\n<li>commit</li>\n<li>rollback</li>\n</ul>\n<p>下の2つは想像通りの動きをすると思います。</p>\n<p>getTransactionは指定された伝搬動作に従って、現在アクティブなトランザクションを返すか、新しいトランザクションを返すそうです。以下は実装の一部で、見る限りトランザクションを開始してトランザクションを返しています</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span> <span class=\"token operator\">||</span>\n\t\tdef<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span> <span class=\"token operator\">||</span>\n\t\tdef<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NESTED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">SuspendedResourcesHolder</span> suspendedResources <span class=\"token operator\">=</span> <span class=\"token function\">suspend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>debugEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating new transaction with name [\"</span> <span class=\"token operator\">+</span> def<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]: \"</span> <span class=\"token operator\">+</span> def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">startTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">,</span> debugEnabled<span class=\"token punctuation\">,</span> suspendedResources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Error</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> suspendedResources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>パラメータのdefinitionは、伝搬の動作、分離レベル、タイムアウトなどを記述したTransactionDefinition のインスタンス (デフォルトでは NULL も可能)。とのことなので、TransactionDefinitionこそが</li>\n<li>伝搬動作\n<ul>\n<li>この3つの伝搬動作はトランザクションを開始する動作を表しています。</li>\n</ul>\n</li>\n</ul>\n<h2>伝搬動作</h2>\n<p>トランザクション制御に利用している伝搬動作は重要なのが2つあります</p>\n<ul>\n<li>伝搬属性</li>\n<li>独立性レベル</li>\n</ul>\n<h3>伝搬属性</h3>\n<p>上記コードにも出てきましたが、TransactionDefinition.PROPAGATION_REQUIREDなどが伝搬属性です。どれもトランザクションを開始するという意味ですが、別のトランザクションから呼ばれた時の振る舞いが異なります。</p>\n<ul>\n<li>PROPAGATION_REQUIRED\n<ul>\n<li>トランザクションを開始する</li>\n<li>ただし別のトランザクションから呼ばれた時は、そのトランザクションに参加する</li>\n</ul>\n</li>\n<li>PROPAGATION_REQUIRES_NEW\n<ul>\n<li>トランザクションを開始する</li>\n<li>ただし別のトランザクションから呼ばれた時は、新しいトランザクションを開始する</li>\n</ul>\n</li>\n<li>PROPAGATION_NESTED\n<ul>\n<li>トランザクションを開始する</li>\n<li>ただし別のトランザクションから呼ばれた時は、部分的なトランザクションを開始する</li>\n</ul>\n</li>\n<li>PROPAGATION_MANDATORY\n<ul>\n<li>例外を投げる</li>\n<li>ただし別のトランザクションから呼ばれた時は、そのトランザクションに参加する</li>\n</ul>\n</li>\n</ul>\n<p>例えば採番処理なんかは、多くの機能から呼ばれることになるので常に新しいトランザクションを開始(PROPAGATION_REQUIRES_NEW)を選択しても良いでしょう。</p>\n<p>また在庫更新などは、出荷や受注などの機能と同時に呼ばれることが前提になるのでPROPAGATION_MANDATORYを選択するべきです。</p>\n<p>他にもトランザクションを開始しない(PROPAGATION_SUPPORTS)などの伝搬属性があります。</p>\n<p>PROPAGATION_SUPPORTSは正確には、トランザクションを行わないが、他のトランザクションから呼ばれた時は、そのトランザクションに参加します。</p>\n<p>完全にトランザクションを開始しない場合はPROPAGATION_NOT_SUPPORTEDを利用します。</p>\n<h2>独立性レベル</h2>\n<p>簡単に言うと「別のトランザクションが更新したけどコミットしてないデータの扱い方」みたいなものだと思います。</p>\n<p>更新したけどコミットしていないということは、のちにロールバックされる可能性がある=不確定な状態ということです。</p>\n<p>そういった不確定な状態のデータを矛盾なく処理を行う性質が独立性です。</p>\n<p>デフォルトがISOLATION_DEFAULT(データベースに依存する)ということになっています。</p>\n<p>データ矛盾が生じる状態</p>\n<ul>\n<li>Dirty Read\n<ul>\n<li>他のトランザクションが変更してコミットしていないデータを読み出すことDirty = 汚い\n<ul>\n<li>Dirty = 汚い</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unrepeatable Read\n<ul>\n<li>トランザクションが同じデータを複数回読み出す時に、他のトランザクションが途中でそのデータを更新すると、以前と違うデータを読み出してしまうことUnrepeatable = 繰り返し不可能\n<ul>\n<li>Unrepeatable = 繰り返し不可能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Phantom Read\n<ul>\n<li>トランザクションが同じデータを複数回読み出す時に、他のトランザクションが途中でレコードを追加すると、以前は存在しなかったレコードを読み出してしまうことPhantom = 幽霊\n<ul>\n<li>Phantom = 幽霊</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>下に行くほど独立性レベルが強く矛盾を許さない。独立性レベルが強くなるとパフォーマンスが悪くなる。処理対象のレコードやテーブルにロックをかけて他方のトランザクションの処理を持たせることで独立性を確保することが多い（データベースによって異なる）</p>\n<p>ソースのコメントAI翻訳すると以下のようになりました</p>\n<ul>\n<li>ISOLATION_READ_UNCOMMITTED\n<ul>\n<li>ダーティリード、非再現性リード、ファントムリードが発生する可能性があることを示します。このレベルでは、あるトランザクションで変更された行を、その行の変更がコミットされる前に別のトランザクションで読み取ることができます（”ダーティリード”）。変更のいずれかがロールバックされると、2番目のトランザクションは無効な行を取得したことになります。</li>\n</ul>\n</li>\n<li>READ_COMMITTED\n<ul>\n<li>ダーティな読み取りが防止されることを示します。繰り返し不可能な読み取りやファントム・リードは発生する可能性があります。このレベルは、トランザクションがコミットされていない変更のある行を読み取ることを禁止するだけです。</li>\n</ul>\n</li>\n<li>ISOLATION_REPEATABLE_READ\n<ul>\n<li>ダーティリードと非再現性リードが禁止されていることを示しますが、ファントムリードが発生する可能性があります。このレベルでは、トランザクションがコミットされていない変更のある行を読み取ることを禁止します。また、あるトランザクションが行を読み取り、2番目のトランザクションがその行を変更し、最初のトランザクションが行を再読み取りして2回目に異なる値を取得するという状況（「非再現性読み取り」）も禁止されます。</li>\n</ul>\n</li>\n<li>ISOLATION_SERIALIZABLE\n<ul>\n<li>ダーティリード、非再現性リード、ファントム・リードが防止されていることを示します。このレベルはISOLATION_REPEATABLE_READの禁止事項を含み、さらに、あるトランザクションがWHERE条件を満たすすべての行を読み取り、2番目のトランザクションがそのWHERE条件を満たす行を挿入し、最初のトランザクションが同じ条件で再読み取りし、2番目の読み取りで追加の「ファントム」行を取得するという状況を禁止している。</li>\n</ul>\n</li>\n</ul>\n<p>デフォルトで困ったら考えればいいのかな？これで思い出したけど、トランザクションかかってんだからデータを読み出せないじゃん！ってなったことがあったけど、独立性をいじれば良かったのか？（フレームワークで設定してていじれなかったと思うのですが・・・）完全に独り言です。すみません。。。</p>\n<h3>他のトランザクション定義情報</h3>\n<ul>\n<li>タイムアウト\n<ul>\n<li>トランザクションがキャンセルされるタイムアウトの時間(秒単位)</li>\n</ul>\n</li>\n<li>読み取り専用\n<ul>\n<li>トランザクション内の処理が読み取り専用かどうか</li>\n</ul>\n</li>\n<li>ロールバック対象例外\n<ul>\n<li>どの例外の時にロールバックするか設定できる。デフォルトでは実行時例外の場合。検査例外が投げられてもロールバックされない明示的トランザクションの場合はExceptionでもロールバックされました。\n<ul>\n<li>検査例外が投げられてもロールバックされない明示的トランザクションの場合はExceptionでもロールバックされました。</li>\n<li>明示的トランザクションの場合はExceptionでもロールバックされました。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>コミット対象例外\n<ul>\n<li>どの例外の時にコミットするか設定できる。デフォルトでは検査例外が投げられた際はコミットが行われる。</li>\n</ul>\n</li>\n</ul>\n<h2>明示的トランザクションを利用する</h2>\n<p>前提知識が多かったですが、ようやく実装に入りたいと思います。今回はSpringBoot環境で実装を行っていきます。</p>\n<p>全体のソースは以下のブランチにあげております。</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/dev01</p>\n<p>以下のようなテーブルを利用します</p>\n<p><img src=\"/2420/1.png\" alt=\"画像\"></p>\n<p>処理説明</p>\n<ul>\n<li>acceptを登録します\n<ul>\n<li>accpetで登録するstockをstocksから取得します</li>\n<li>stockのcountをacceptのcountだけ減算しますacceptのcountは100を想定しています</li>\n<li>stockのcountがマイナス値の場合は例外になりますstockの件数が100以下なら例外になります</li>\n<li>acceptレコードの追加処理を行います</li>\n<li>stockレコードの更新処理を行います。\n<ul>\n<li>acceptのcountは100を想定しています</li>\n<li>stockの件数が100以下なら例外になります</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AcceptServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AcceptService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AcceptRepository</span> acceptRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ItemRepository</span> itemRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockRepository</span> stockRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactionManager</span> txManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createAccept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AcceptController<span class=\"token punctuation\">.</span>RegistAcceptModel</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//定義情報を作成します</span>\n        <span class=\"token class-name\">DefaultTransactionDefinition</span> def <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// トランザクションを開始します</span>\n        <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> txManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ドメインモデルの作成</span>\n            <span class=\"token class-name\">Accept</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>itemId<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">.</span>customerName<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 受注の登録をする</span>\n            <span class=\"token comment\">// わかりやすくロールバックを確認するためここで永続化します</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acceptRepository<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 在庫の取得</span>\n            <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 在庫を減らす(本当の業務なら実在庫を減らすことはせず予定在庫を減らすなど)</span>\n            stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫の整合性を確認する</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 適当な例外投げてます</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 在庫の更新をする</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 例外が発生した時にロールバックする</span>\n            txManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// コミットする</span>\n        txManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>PlatformTransactionManagerをインジェクションすることでトランザクションマネージャを利用できます</li>\n<li>new DefaultTransactionDefinition();\n<ul>\n<li>定義情報を作成して、定義情報を設定していきます</li>\n</ul>\n</li>\n<li>txManager.getTransaction(def);\n<ul>\n<li>定義情報を元にトランザクションを取得(開始)します</li>\n</ul>\n</li>\n</ul>\n<h3>TransactionTemplateを利用する</h3>\n<p>もう一つのやり方としてTransactionTemplateを利用する方法があります。</p>\n<p>ソースコードは以下のブランチにあげています。</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/dev-template</p>\n<p>こちらはcommitやrollbackのメソッドの呼び出しを隠蔽してくれます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AcceptServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AcceptService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AcceptRepository</span> acceptRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ItemRepository</span> itemRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockRepository</span> stockRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactionManager</span> txManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createAccept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AcceptController<span class=\"token punctuation\">.</span>RegistAcceptModel</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">TransactionTemplate</span> tm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionTemplate</span><span class=\"token punctuation\">(</span>txManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tm<span class=\"token punctuation\">.</span><span class=\"token function\">setPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tm<span class=\"token punctuation\">.</span><span class=\"token function\">setIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tm<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tm<span class=\"token punctuation\">.</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tm<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ドメインモデルの作成</span>\n            <span class=\"token class-name\">Accept</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>itemId<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">.</span>customerName<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 受注の登録をする</span>\n            <span class=\"token comment\">// わかりやすくロールバックを確認するためここで永続化します</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acceptRepository<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫の取得</span>\n            <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫を減らす(本当の業務なら実在庫を減らすことはせず予定在庫を減らすなど)</span>\n            stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫の整合性を確認する</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 適当な例外投げてます</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 在庫の更新をする</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">DataAccessStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     * return nullの代用</span>\n<span class=\"token doc-comment comment\">     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DataAccessStatus</span><span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">ERROR</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>TransactionTemplateを作成する際にトランザクションマネージャを渡しています</li>\n<li>execute内にトランザクション内の処理を記載すれば、自動的にロールバックもコミットもしてくれます。</li>\n<li>executeメソッドの引数に渡すラムダ式は、戻り値が特にない場合はreturn null;をしている例もありましたが、あまり好きじゃないので形式的なenumを返しています。</li>\n<li>TransactionCallbackWithoutResultをオーバーライドした戻り値なしのケースも作成できます。\n<ul>\n<li>ただ、今回の例ではスコープの問題等で実装していません。</li>\n<li>ラムダを使った方が圧倒的に良いです。</li>\n</ul>\n</li>\n</ul>\n<h2>伝搬属性の確認</h2>\n<p>次に伝搬属性について見ていきます。あまり無いケースかと思いますが、サービスからサービスを呼出して無理矢理トランザクション内からトランザクション処理を呼び出します。</p>\n<h3>REQUIRES_NEW</h3>\n<p>このパターンは新しいトランザクションを開始するパターンです。</p>\n<p>全体のソースコードは以下のブランチにあげております。</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/req_new</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createAccept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AcceptController<span class=\"token punctuation\">.</span>RegistAcceptModel</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">DefaultTransactionDefinition</span> def <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> txManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 別のトランザクション処理の呼出しを行う</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// ドメインモデルの作成</span>\n            <span class=\"token class-name\">Accept</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>itemId<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">.</span>customerName<span class=\"token punctuation\">,</span>model<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 受注の登録をする</span>\n            <span class=\"token comment\">// わかりやすくロールバックを確認するためここで永続化します</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acceptRepository<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫の取得</span>\n            <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫を減らす(本当の業務なら実在庫を減らすことはせず予定在庫を減らすなど)</span>\n            stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在庫の整合性を確認する</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 適当な例外投げてます</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 在庫の更新をする</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            txManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        txManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>先ほどのトランザクションから別のトランザクション処理を呼びます</li>\n<li>別のトランザクションの処理が完了後、呼び出し元のトランザクションでロールバックを起こします。</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StockServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StockService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockRepository</span> stockRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactionManager</span> txManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//　あくまでトランザクション確認用のメソッドです。</span>\n        <span class=\"token class-name\">DefaultTransactionDefinition</span> def <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//新規トランザクションを開始</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> txManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            txManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        txManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>id=2のstockのcountを10減算して更新します</li>\n</ul>\n<p>現在のデータベースのレコードは以下のようになっています。</p>\n<p><img src=\"/2420/2.png\" alt=\"画像\"></p>\n<p>処理を実行します</p>\n<p><img src=\"/2420/3.png\" alt=\"画像\"></p>\n<p>呼び出し元のトランザクションでロールバックしているのに、countが10減っています。</p>\n<p>これはdef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)として、呼び出し元のトランザクションに参加せず、新しいトランザクションを開始しているためです。</p>\n<h3>PROPAGATION_REQUIRED</h3>\n<p>全体のソースを以下のブランチにあげております</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/required※チェリーピックしているので他のコミットコメントが入ってます。</p>\n<p>REQUIRES_NEWで行ったことと同じことを、PROPAGATION_REQUIREDにして実行します。こっちは呼び出し元のトランザクションに参加しますので、呼び出し元でロールバックされるとデータのコミットが行われません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//　あくまでトランザクション確認用のメソッドです。</span>\n        <span class=\"token class-name\">DefaultTransactionDefinition</span> def <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//既存トランザクションに参加</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        def<span class=\"token punctuation\">.</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> txManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            txManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        txManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>データベースの状態も同じです</p>\n<p><img src=\"/2420/4.png\" alt=\"画像\"></p>\n<p>実行します</p>\n<p><img src=\"/2420/5.png\" alt=\"画像\"></p>\n<p>呼び出し元のトランザクションでロールバックが呼ばれると、レコードの更新は行われませんでした。</p>\n<h2>宣言的トランザクションの利用</h2>\n<p>ソースは以下のブランチにあげています</p>\n<p>https://github.com/jirentaicho/springboot-transaction-sample/tree/dev02</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AcceptServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AcceptService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AcceptRepository</span> acceptRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ItemRepository</span> itemRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockRepository</span> stockRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>\n            propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">,</span>\n            isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">,</span>\n            timeout <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createAccept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AcceptController<span class=\"token punctuation\">.</span>RegistAcceptModel</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ドメインモデルの作成</span>\n        <span class=\"token class-name\">Accept</span> accept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>itemId<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>customerName<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 受注の登録をする</span>\n        <span class=\"token comment\">// わかりやすくロールバックを確認するためここで永続化します</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acceptRepository<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 在庫の取得</span>\n        <span class=\"token class-name\">Stock</span> stock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findStockByItemId</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 在庫を減らす(本当の業務なら実在庫を減らすことはせず予定在庫を減らすなど)</span>\n        stock<span class=\"token punctuation\">.</span><span class=\"token function\">subCount</span><span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 在庫の整合性を確認する</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">.</span><span class=\"token function\">isMinus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 適当な例外投げてます</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 在庫の更新をする</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stockRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>アノテーションを利用したトランザクションの場合はコードがスッキリします</li>\n<li>定義情報は@Transactionalアノテーションに付与できます</li>\n<li>throw new Exception();のように例外を起こした場合はロールバックされません。\n<ul>\n<li>RuntimeException、およびそのサブクラスならロールバックされます</li>\n</ul>\n</li>\n</ul>\n<h3>その他</h3>\n<ul>\n<li>No EntityManager with actual transaction available for current thread – cannot reliably process ‘persist’ call</li>\n</ul>\n<p>トランザクションが開始されていない場合に起こりますので、トランザクションを開始する必要があります。</p>\n<ul>\n<li>メモ程度ですが、伝搬属性PROPAGATION_REQUIRES_NEWと.PROPAGATION_NESTEDのコード上の違いについて</li>\n</ul>\n<p>getTransactionを呼出したときに、おそらくここに流れる</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isExistingTransaction</span><span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Existing transaction found -> check propagation behavior to find out how to behave.</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">handleExistingTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">,</span> debugEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このhandleExistingTransactionメソッドで処理の振り分けをしている</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>debugEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Suspending current transaction, creating new transaction with name [\"</span> <span class=\"token operator\">+</span>\n\t\t\t\tdefinition<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">SuspendedResourcesHolder</span> suspendedResources <span class=\"token operator\">=</span> <span class=\"token function\">suspend</span><span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">startTransaction</span><span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">,</span> debugEnabled<span class=\"token punctuation\">,</span> suspendedResources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Error</span> beginEx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">resumeAfterBeginException</span><span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">,</span> suspendedResources<span class=\"token punctuation\">,</span> beginEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> beginEx<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">.</span><span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NESTED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNestedTransactionAllowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NestedTransactionNotSupportedException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token string\">\"Transaction manager does not allow nested transactions by default - \"</span> <span class=\"token operator\">+</span>\n\t\t\t\t<span class=\"token string\">\"specify 'nestedTransactionAllowed' property with value 'true'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>debugEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating nested transaction with name [\"</span> <span class=\"token operator\">+</span> definition<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">useSavepointForNestedTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Create savepoint within existing Spring-managed transaction,</span>\n\t\t<span class=\"token comment\">// through the SavepointManager API implemented by TransactionStatus.</span>\n\t\t<span class=\"token comment\">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span>\n\t\t<span class=\"token class-name\">DefaultTransactionStatus</span> status <span class=\"token operator\">=</span>\n\t\t\t\t<span class=\"token function\">prepareTransactionStatus</span><span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> debugEnabled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstatus<span class=\"token punctuation\">.</span><span class=\"token function\">createAndHoldSavepoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Nested transaction through nested begin and commit/rollback calls.</span>\n\t\t<span class=\"token comment\">// Usually only for JTA: Spring synchronization might get activated here</span>\n\t\t<span class=\"token comment\">// in case of a pre-existing JTA transaction.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">startTransaction</span><span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">,</span> debugEnabled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>参考</h2>\n<ul>\n<li>［改訂新版］Spring入門 ――Javaフレームワーク・より良い設計とアーキテクチャ\n<ul>\n<li>この本、すごく気に入ってます。と、ミサカは遠回しにオススメします。</li>\n</ul>\n</li>\n</ul>","slug":"p2420"},"__N_SSG":true}