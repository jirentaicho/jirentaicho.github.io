{"pageProps":{"frontMatter":{"title":"TypeScriptでブラウザ版の座席表を作成した","date":"2022.01.19","description":"TypeScriptでブラウザ版の座席表を作成した","categories":["TypeScript"]},"content":"<p>ソース github</p>\n<p>TypeScriptではブラウザで動くゲームを作るプロジェクトを作成したことがあります（言い回しがくどい）それに関してもソースを公開しています。</p>\n<p>ソース github</p>\n<p>今回は座席表を作るアプリを作ってみました。開発期間も2日ほどで完成しました。</p>\n<p>デモ</p>\n<p>今回は技術的なことを書いていきます。</p>\n<p><a href=\"https://t.co/TJkt1s5QLr\">参考</a></p>\n<p>使用した言語はTypeScriptです。前回初めて触ってからとっても気に入りました。kotlinに出会った時と同じ感覚です。</p>\n<h2>座席の描画</h2>\n<p>今回の主役は座席です。これが持っているものとしては</p>\n<ul>\n<li>座標</li>\n<li>大きさ</li>\n<li>文字列（名前）</li>\n</ul>\n<p>しかし、いきなり実装するのではなくて画面に描画するオブジェクトに対するインターフェースを考えました。</p>\n<p>これを用意しておけば、画面に描画する必要があるものは一気に描画することができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Draw</span><span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     * どのような物を、どのように描画するのかは、実装クラスに任せる</span>\n<span class=\"token doc-comment comment\">     */</span>\n    <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Layerクラスで描画対象となるオブジェクトを登録できるようにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**\n     * Canvasに描画するオブジェクトを登録します。\n     * \n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">child</span> 描画オブジェクト\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>child<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&#x3C;</span>Draw<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n        child<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// タッチ判定できるものcanTouchsに格納する</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ViewRect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTouhcs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>あとはそれぞれの実装クラスに従って描画処理を走らせるだけです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**\n     * Canvasをクリアしてから、登録されている描画オブジェクトを全て描画します。&#x3C;br />\n     * 何も登録されていない場合は処理をしません。\n     * \n     * <span class=\"token keyword\">@returns</span> \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">drawNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// TODO message = array is empty</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>描画処理は座標とサイズに合わせて描画を行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 利用するパラメータはスタック変数に置いておく</span>\n        <span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>タッチイベント</h2>\n<p>タッチイベントは関数を登録する必要があります。canvasに対してmousedownなどのイベントを登録するのですが、関数を登録する関数を用意しておけば扱いやすいです</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**\n     * \n     * 発火イベントに対する関数を登録します\n     * \n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">func</span> 実行する関数 \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">addDownEvent</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>prm<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> Canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">;</span>\n\n        canvas<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        canvas<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=></span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>登録する</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">controller<span class=\"token punctuation\">.</span><span class=\"token function\">addDownEvent</span><span class=\"token punctuation\">(</span>Logic<span class=\"token punctuation\">.</span>moveDownRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">addUpEvent</span><span class=\"token punctuation\">(</span>Logic<span class=\"token punctuation\">.</span>moveUpRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">addMoveEvent</span><span class=\"token punctuation\">(</span>Logic<span class=\"token punctuation\">.</span>drawMoveObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>TypeScriptの型</h2>\n<p>今回はanyを使わないようにしました。TypeScriptではnullチェックなどが簡単にできないようになっています。</p>\n<p>nullの場合があるものはエラーになるからです。</p>\n<p>となるとMaybeとかOptionalのようなものが欲しいのですが、その辺はわからなかったので以下のようなものを使いました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">MaybeRect</span> <span class=\"token operator\">=</span> ViewRect <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>もっと良い方法でT型とかできるのでしょうが、ここは要勉強なところですね。</p>\n<p>instanceofを使うことで上位クラスまで型を絞ることができるので頼ってしまいました。多分良くないですねこれ。</p>\n<p>これも要勉強な箇所です</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> viewRect <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span><span class=\"token function\">getRect</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>viewRect <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Seat</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   layer<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>viewRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>座標</h2>\n<p>座席を画面中の好きな位置に配置できると問題が起きます。</p>\n<p>座席表作成ソフトとして有名なExcelでは、文字通りセルを利用するため綺麗に並びます。言ったらばGridのようなものですね。</p>\n<p>好きな場所に配置できると(234,653)のような場所に配置もできるので、座席を綺麗に並べるのが大変です。</p>\n<p>なのでゲーム開発の知見を活かして画面は10pxのグリッド状であるかのように、座席移動できるようにしました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     * Grid移動変換させます。</span>\n<span class=\"token doc-comment comment\">     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">toGrid</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Point<span class=\"token punctuation\">{</span>\n        <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">         * (1,1)(2,1)(3,1)</span>\n<span class=\"token doc-comment comment\">         * (1,2)(2,2)(3,2)</span>\n<span class=\"token doc-comment comment\">         * (1,3)(2,3)(3,3)</span>\n<span class=\"token doc-comment comment\">         * </span>\n<span class=\"token doc-comment comment\">         * mouseのポジションから座標を取得して</span>\n<span class=\"token doc-comment comment\">         * 座標に1マス分の長さをかけてあげれば良い。</span>\n<span class=\"token doc-comment comment\">         * </span>\n<span class=\"token doc-comment comment\">         * 例：１マス１６ｐｘの座標で考える場合</span>\n<span class=\"token doc-comment comment\">         * </span>\n<span class=\"token doc-comment comment\">         * マウス座標(340,560) → グリッド座標 割り算して余りを切り捨て</span>\n<span class=\"token doc-comment comment\">         * １マスぶんでかける</span>\n<span class=\"token doc-comment comment\">         * </span>\n<span class=\"token doc-comment comment\">         * 大きめにとって見た目より操作性を重視します</span>\n<span class=\"token doc-comment comment\">         * </span>\n<span class=\"token doc-comment comment\">         */</span>\n        <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>カクカクと動きますが綺麗に並べることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> Converter<span class=\"token punctuation\">.</span><span class=\"token function\">toPoint</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vecPoint <span class=\"token operator\">=</span> Converter<span class=\"token punctuation\">.</span><span class=\"token function\">toGrid</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>こんな感じでTypeScriptで超絶お洒落な渋谷系ブラウザ座席表が作れました。</p>","slug":"p900"},"__N_SSG":true}