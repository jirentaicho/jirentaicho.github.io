{"pageProps":{"frontMatter":{"title":"Laravelのモデルマッパーを自作した","date":"2022.01.01","description":"Laravelのモデルマッパーを自作した","categories":["Laravel"]},"content":"<p>Laravelで作ったものはEloquentモデルとEntityと分けて作成しています。</p>\n<p>するとマッピングが面倒くさいです。JavaではModelMapperがあったのですが、PHPはあまり詳しくわからないので自分で作ってみました。</p>\n<p>以下のマッピングが可能です</p>\n<ul>\n<li>Eloquentモデル → 通常のクラス</li>\n<li>通常のクラス → 通常のクラス</li>\n</ul>\n<h2>リフレクション</h2>\n<p>この手の作業にはリフレクションを利用することになると思います。リフレクションは非常に強力な機能ですし、Javaの現場では多用されていました。</p>\n<p>Eloquentモデルから自作のEntityクラスへ変換できるのと、通常のクラスからクラスへと変換できる機能を作りました。</p>\n<p>privateな変数でも値を書き換えるようにしています。</p>\n<h2>使い方</h2>\n<p>使い方はこんな感じです。変数名を揃えていないとマッピングがされません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$product</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Product<span class=\"token punctuation\">::</span></span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$mapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$mapper</span><span class=\"token operator\">-></span><span class=\"token function\">eloquentMap</span><span class=\"token punctuation\">(</span><span class=\"token scope\">TestEntity<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$product</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>マッピングを除外したい変数がある場合は以下のようにexcluedを利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$product</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Product<span class=\"token punctuation\">::</span></span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$mapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$mapper</span><span class=\"token operator\">-></span><span class=\"token function\">exclued</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"arrival_day\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">eloquentMap</span><span class=\"token punctuation\">(</span><span class=\"token scope\">TestEntity<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$product</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>ソース</h2>\n<p>gistにソースはアップロードしています。</p>\n<p>eloquentモデルのマッピングは以下のようになっています。変換元が eloquentモデルになりますので、$origin[‘name’]のようにしてattributeにアクセスできるので、そこはリフレクションを使わずに行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n     * EloquentModelをマッピングします。\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$clazz</span> ターゲットクラス\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$origin</span> 変換元オブジェクト\n     * \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">eloquentMap</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$origin</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 存在しないattributeはnull判定</span>\n        <span class=\"token comment\">//dd($origin['naiume']);</span>\n\n        <span class=\"token comment\">// ターゲットクラスの結果オブジェクト</span>\n        <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$clazz</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ターゲットクラスのリフレクション</span>\n        <span class=\"token variable\">$targetRef</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$targetRef</span><span class=\"token operator\">-></span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prop</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 除外リストに入っている変数名はスキップする</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">inExclude</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// nullが入って代入エラーにならないようにスキップさせる</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$origin</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$origin</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>除外リストは以下のように制御します。除外変数名配列を用意しておいて、exclued関数ではその配列に引数で渡ってきた変数名を格納します。そして自分自身を返却することで、メソッドチェーンで利用できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// 除外リスト</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token variable\">$exclusion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * 除外したい変数名を設定します\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$args</span> 除外変数名\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\">ModelMapper</span> モデルマッパークラス\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">exclued</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-declaration\">string</span> <span class=\"token operator\">...</span><span class=\"token variable\">$args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">ModelMapper</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$args</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$arg</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">array_push</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">exclusion</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>除外リストチェック</h4>\n<p>チェックはin_arrayを利用しているだけです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     * 除外変数リストに変数名が入っているかどうか調べます。</span>\n<span class=\"token doc-comment comment\">     * 入っている場合はtrue</span>\n<span class=\"token doc-comment comment\">     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">inExclude</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">exclusion</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>通常のクラスと別のクラスにマッピングする例</h3>\n<p>通常のクラスと通常のクラスのマッピングはmapメソッドを利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$model</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$model</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"ZONe\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$model</span><span class=\"token operator\">-></span><span class=\"token property\">price</span> <span class=\"token operator\">=</span> <span class=\"token number\">165</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$model</span><span class=\"token operator\">-></span><span class=\"token property\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$mapper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$mapper</span><span class=\"token operator\">-></span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token scope\">TestEntity<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$model</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ソースは以下のようになっています</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token doc-comment comment\">/**\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$clazz</span> ターゲットクラス\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$origin</span> 変換元オブジェクト\n     * \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">map</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$origin</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ターゲットクラスの結果オブジェクト</span>\n        <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$clazz</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ターゲットクラスのリフレクション</span>\n        <span class=\"token variable\">$targetRef</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 変換元クラスのリフレクション</span>\n        <span class=\"token variable\">$originRef</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span>$<span class=\"token scope\">origin<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$targetRef</span><span class=\"token operator\">-></span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prop</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">inExclude</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 変換元に同一の変数名が存在しない場合はスキップ</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$originRef</span><span class=\"token operator\">-></span><span class=\"token function\">hasProperty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token variable\">$val</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$targetRef</span><span class=\"token operator\">-></span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$val</span><span class=\"token operator\">-></span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$val</span><span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$origin</span><span class=\"token operator\">-></span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>マッピングに利用したクラスは以下のようになっています</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TestEntity</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$price</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$count</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name type-declaration\">DateTime</span> <span class=\"token variable\">$arrival_day</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"execute method.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TestModel</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$price</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$count</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\">Schema<span class=\"token punctuation\">::</span></span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Blueprint</span> <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-></span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-></span><span class=\"token keyword type-declaration\">string</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-></span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-></span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'arrival_day'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-></span><span class=\"token function\">timestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>DBから取得する際に日付型にする</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Product</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">HasFactory</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$dates</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'created_at'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'updated_at'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'arrival_day'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>リフレクションの勉強記録</h2>\n<p>こんなクラスがあります</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TestEntity</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$price</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$count</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>リフレクションで上記のクラスを見ていきます。</p>\n<h3>getProperties</h3>\n<p>引数の$clazzはTestEntity::classです。</p>\n<p>プロパティの配列を取得します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">array(3) { [0]=&#x26;gt; object(ReflectionProperty)#304 (2) { [&#x26;quot;name&#x26;quot;]=&#x26;gt; string(4) &#x26;quot;name&#x26;quot; [&#x26;quot;class&#x26;quot;]=&#x26;gt; string(28) &#x26;quot;App\\Domain\\Entity\\TestEntity&#x26;quot; } [1]=&#x26;gt; object(ReflectionProperty)#305 (2) { [&#x26;quot;name&#x26;quot;]=&#x26;gt; string(5) &#x26;quot;price&#x26;quot; [&#x26;quot;class&#x26;quot;]=&#x26;gt; string(28) &#x26;quot;App\\Domain\\Entity\\TestEntity&#x26;quot; } [2]=&#x26;gt; object(ReflectionProperty)#306 (2) { [&#x26;quot;name&#x26;quot;]=&#x26;gt; string(5) &#x26;quot;count&#x26;quot; [&#x26;quot;class&#x26;quot;]=&#x26;gt; string(28) &#x26;quot;App\\Domain\\Entity\\TestEntity&#x26;quot; } }</code></pre></div>\n<p>publicに限定する</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token scope\">ReflectionProperty<span class=\"token punctuation\">::</span></span><span class=\"token constant\">IS_PUBLIC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">array(2) { [0]=&#x26;gt; object(ReflectionProperty)#304 (2) { [&#x26;quot;name&#x26;quot;]=&#x26;gt; string(4) &#x26;quot;name&#x26;quot; [&#x26;quot;class&#x26;quot;]=&#x26;gt; string(28) &#x26;quot;App\\Domain\\Entity\\TestEntity&#x26;quot; } [1]=&#x26;gt; object(ReflectionProperty)#305 (2) { [&#x26;quot;name&#x26;quot;]=&#x26;gt; string(5) &#x26;quot;count&#x26;quot; [&#x26;quot;class&#x26;quot;]=&#x26;gt; string(28) &#x26;quot;App\\Domain\\Entity\\TestEntity&#x26;quot; } }</code></pre></div>\n<h4>変数名を取得する</h4>\n<p>変数名だけを取得するにはループしてnameを取得すればよいです</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prop</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>変数にセットする</h4>\n<p>private変数にはアクセスができないですが、setAccessibleメソッドを利用すると強制的にアクセスできるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// 値をセットするクラスのインスタンス</span>\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$clazz</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 値をセットするクラスのリフレクションクラス</span>\n<span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prop</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// privateな変数はsetValueできないのでpublicとして扱う</span>\n    <span class=\"token comment\">// Cannot access non-public property App\\Domain\\Entity\\TestEntity::$price</span>\n    <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$prop</span><span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"/824/1.png\" alt=\"画像\"></p>\n<h4>getMethods</h4>\n<p>クラスのメソッドを配列で取得します</p>\n<p>メソッドを追加しておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">class TestEntity \n{\n    public string $name;\n\n    private int $price;\n\n    public static int $count;\n\n    public function execute()\n    {\n        echo(\"execute method.\");\n    }\n}\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">array(1) { [0]=&#x26;gt; object(ReflectionMethod)#304 (2) { [&#x26;quot;name&#x26;quot;]=&#x26;gt; string(7) &#x26;quot;execute&#x26;quot; [&#x26;quot;class&#x26;quot;]=&#x26;gt; string(28) &#x26;quot;App\\Domain\\Entity\\TestEntity&#x26;quot; } }</code></pre></div>\n<h4>関数名を取得する</h4>\n<p>配列をループしてnameを取得すれば関数名を取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$method</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$method</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>invoke</h4>\n<p>関数を起動します。参考</p>\n<p>まずReflectionMethodクラスのインスタンスを取得して、invokeメソッドの引数には対象のクラスのインスタンスを指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$ref</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ref</span><span class=\"token operator\">-></span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$method</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// クラス関数でない関数にはReflectionFunctionが用意されています</span>\n    <span class=\"token variable\">$method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionMethod</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$clazz</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$method</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$method</span><span class=\"token operator\">-></span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token variable\">$clazz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","slug":"p824"},"__N_SSG":true}