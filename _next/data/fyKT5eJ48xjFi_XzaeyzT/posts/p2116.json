{"pageProps":{"frontMatter":{"title":"Java | @Componentが登録されるまで","date":"2022.04.15","description":"Java | @Componentが登録されるまで","categories":["Spring"]},"content":"<p>@Componentアノテーションが付いたクラスはDIコンテナに登録されるが、それは@ComponentScanというアノテーションを元にSpringがパッケージ内の対象クラスを登録していくためです。</p>\n<p>今回はそこを少し深堀してみます。</p>\n<h2>@Component</h2>\n<p>@Componentアノテーションは以下のようになっている</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Indexed</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * The value may indicate a suggestion for a logical component name,\n\t * to be turned into a Spring bean in case of an autodetected component.\n\t * <span class=\"token keyword\">@return</span> the suggested component name, if any (or empty String otherwise)\n\t */</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>@Target(ElementType.TYPE)\n<ul>\n<li>アノテーション配置可能範囲Class,Interface,Enumに使用\n<ul>\n<li>Class,Interface,Enumに使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>@Retention(RetentionPolicy.RUNTIME)\n<ul>\n<li>利用可能タイミングJVMランタイムも保持\n<ul>\n<li>JVMランタイムも保持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>@Documented\n<ul>\n<li>JavaDocに含める</li>\n</ul>\n</li>\n</ul>\n<p>valueにてStringの値を受取ることができるようになっている。</p>\n<h2>@SpringBootApplication</h2>\n<p>アプリケーションのメインメソッドが定義されているクラスにはSpringBootApplicationアノテーションがついてます。これを見ると以下のようになっていて、@ComponentScanというアノテーションがあります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@SpringBootConfiguration</span>\n<span class=\"token annotation punctuation\">@EnableAutoConfiguration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CUSTOM</span><span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CUSTOM</span><span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SpringBootApplication</span> <span class=\"token punctuation\">{</span>\n</code></pre></div>\n<p>まさに先ほどの@Componentがスキャンされそうな名前ですね。もちろん@ComponentScanは@ComponentアノテーションのついたクラスをDIコンテナに登録します。</p>\n<p>つまりメインのクラスでコンポーネントスキャンが行われて、@ComponentがついたクラスはDIコンテナに登録されるということですね。</p>\n<p>Springの起動処理を追っていくとcreateApplicationContext()というメソッドに辿り着きます</p>\n<p><img src=\"/2116/1.png\" alt=\"画像\"></p>\n<p>AnnotationConfigServletWebServerApplicationContextという実装クラスを作成しています。</p>\n<p>このcontextのrefreshメソッドを追っていくとparseメソッドやらにいき、Componentからリンクされているorg.springframework.context.annotation.ClassPathBeanDefinitionScannerのdoScanが実行される。</p>\n<p>以下のようにコンポーネントを管理しています。HogeComponentというクラスの場合は先頭小文字になったものがコンポーネントIDになるようです（明示的に指定しない場合）</p>\n<p><img src=\"/2116/2.png\" alt=\"画像\"></p>\n<h2>@Serviceとかはどうなってる</h2>\n<p>@Component以外にもDIできるようになるアノテーションがあります。＠Serviceとか@Repositoryとかです</p>\n<p>これらは@Componentを定義しているので同じようにBeanとして登録されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * The value may indicate a suggestion for a logical component name,\n\t * to be turned into a Spring bean in case of an autodetected component.\n\t * <span class=\"token keyword\">@return</span> the suggested component name, if any (or empty String otherwise)\n\t */</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>参考サイト</h2>\n<p>https://k-ota.dev/springboot-sourcecode-reading-componentscan-01/</p>","slug":"p2116"},"__N_SSG":true}