{"pageProps":{"frontMatter":{"title":"良いコードを書く技術","date":"2022.03.29","description":"良いコードを書く技術","categories":["Java"]},"content":"<p>良いコードを書く技術という本が手元に来たので読んでみました。</p>\n<p>最初にザックリと眺めた書いてある内容</p>\n<ul>\n<li>変数名とかは適切なものを付ける</li>\n<li>変数のスコープは短くする</li>\n<li>メソッドの処理単位には気を付ける\n<ul>\n<li>メソッド抽出とクラス分割</li>\n</ul>\n</li>\n<li>よく使うメソッドはまとめる</li>\n<li>データの構造を意識する</li>\n<li>テストコードを書く</li>\n<li>抽象化\n<ul>\n<li>配列やリストにまとめて処理する</li>\n<li>同じような構造を持ったオブジェクトが並んでいる場合、同じインターフェースにしてまとめることができる</li>\n</ul>\n</li>\n<li>メタプログラミングについて</li>\n<li>フレームワークを作ってみる</li>\n</ul>\n<p>サンプルコードもあるので理解しやすいと思います</p>\n<p>とりあえず自分の興味のある所を優先的に読んでみました</p>\n<h2>コードの分割</h2>\n<p>まず最初に気になったのがDocumentBuilderFactoryです（これ知らなかったです）</p>\n<p>サンプルを書いてみました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParserConfigurationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransformerException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Documentオブジェクトの準備</span>\n        \n        <span class=\"token comment\">// Domオブジェクトツリーを生成するパーサーを取得するAPI</span>\n        <span class=\"token class-name\">DocumentBuilderFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">DocumentBuilderFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// DomDocumentインスタンスを取得するためのAPI</span>\n        <span class=\"token class-name\">DocumentBuilder</span> builder <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newDocumentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Documentはドキュメントツリーのルート</span>\n        <span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">newDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Element</span> rootNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        doc<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> rowIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Element</span> userNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userNode<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userNode<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"御坂美琴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>userNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Element</span> adminNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adminNode<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adminNode<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"管理者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>adminNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// DocumentオブジェクトをXML文字列へ変換</span>\n        <span class=\"token class-name\">TransformerFactory</span> transFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Transformer</span> transformer <span class=\"token operator\">=</span> transFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DOMSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMSource</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">StreamResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        transformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;?xml version=&#x26;quot;1.0&#x26;quot; encoding=&#x26;quot;UTF-8&#x26;quot; standalone=&#x26;quot;no&#x26;quot;?&#x26;gt;&#x26;lt;data&#x26;gt;&#x26;lt;user id=&#x26;quot;1&#x26;quot;&#x26;gt;御坂美琴&#x26;lt;/user&#x26;gt;&#x26;lt;admin id=&#x26;quot;2&#x26;quot;&#x26;gt;管理者&#x26;lt;/admin&#x26;gt;&#x26;lt;/data&#x26;gt;</code></pre></div>\n<p>上記のようにxml形式で出力ができました。そして以下のようにコードの分割を行いました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParserConfigurationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransformerException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">XmlBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"御坂美琴\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"管理者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 子ノードも格納されたrootNodeを取得する</span>\n        <span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">buildDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//　出力処理</span>\n        <span class=\"token function\">writeDocument</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XmlBuilder</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rowIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> adminName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">XmlBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> adminName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>adminName <span class=\"token operator\">=</span> adminName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Documentオブジェクトを取得します</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Document</span> <span class=\"token function\">newDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParserConfigurationException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">DocumentBuilderFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">DocumentBuilderFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">DocumentBuilder</span> builder <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newDocumentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">newDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Document</span> <span class=\"token function\">buildDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParserConfigurationException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token function\">newDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Element</span> rootNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            doc<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createUserNode</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createAdminNode</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> doc<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// ユーザーを作成する処理</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Element</span> <span class=\"token function\">createUserNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Element</span> userNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            userNode<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rowIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            userNode<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> userNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 管理者を作成する処理</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Element</span> <span class=\"token function\">createAdminNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Element</span> adminNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            adminNode<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rowIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            adminNode<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>adminName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> adminNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//出力処理はそのままメソッド抽出した</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeDocument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> doc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TransformerFactory</span> transFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Transformer</span> transformer <span class=\"token operator\">=</span> transFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DOMSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMSource</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StreamResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        transformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>大きく以下の処理に分かれています</p>\n<ul>\n<li>xmlの作成\n<ul>\n<li>XmlBuilderクラスの作成インクリメントしていたローカル変数をインスタンス変数にするユーザー、管理者の作成はメソッド化する\n<ul>\n<li>インクリメントしていたローカル変数をインスタンス変数にする</li>\n<li>ユーザー、管理者の作成はメソッド化する</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>xmlの出力</li>\n</ul>\n<h2>抽象化</h2>\n<p>Viewにフォルダ事のファイル一覧とサイズを表示するサンプル。ループで処理できるように抽象化（ここでは共通部分の抜き出し）を行う</p>\n<p>べた書きで以下を行っていた</p>\n<ul>\n<li>フォルダ事のファイル配列を取得する</li>\n<li>それぞれのサイズを算出する</li>\n<li>Viewに渡す</li>\n</ul>\n<p>以下にリファクタリング</p>\n<ul>\n<li>ファイルリストを管理する(ImageFiles)クラスを作成\n<ul>\n<li>ファイル配列</li>\n<li>合計サイズ</li>\n<li>パス</li>\n</ul>\n</li>\n<li>クラスを生成関数を作成する</li>\n<li>ファイル配列から合計サイズを算出するメソッドをUtileクラスに作成する</li>\n<li>処理\n<ul>\n<li>Listとしてリストで管理する</li>\n<li>フォルダの数だけループImageFIlesを生成する関数を呼び出してリストに突っ込む</li>\n<li>Viewに渡す\n<ul>\n<li>ImageFIlesを生成する関数を呼び出してリストに突っ込む</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>おそらくこの章のサンプルだけで以下ができている</p>\n<ul>\n<li>コードの分割</li>\n<li>コードの集約</li>\n<li>データの構造化</li>\n</ul>\n<p>この手の方法は意識しないで作っている場合のほうが多いと思います。みんなオブジェクト指向言語を学ぶと、クラスやインターフェースを使うようになるので、この例はそれだけで自然と解決されるような気もします。</p>\n<h2>メタプログラミング</h2>\n<p>人狼では毛嫌いされるメタです。</p>\n<p>メタプログラミングとは</p>\n<ul>\n<li>プログラムを生み出すプログラム\n<ul>\n<li>コードの自動生成自動生成されたコードはエラーが基本的にはない\n<ul>\n<li>自動生成されたコードはエラーが基本的にはない</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DSL\n<ul>\n<li>ドメイン特化言語外部DSLxmlなどの設定ファイルを読み込み内部DSLrailsのルーティングのようなホスト言語のみで実現するDSL\n<ul>\n<li>外部DSLxmlなどの設定ファイルを読み込み</li>\n<li>内部DSLrailsのルーティングのようなホスト言語のみで実現するDSL</li>\n<li>xmlなどの設定ファイルを読み込み</li>\n<li>railsのルーティングのようなホスト言語のみで実現するDSL</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>下記いい例だと思います</p>\n<p><a href=\"/posts/p1294\">リンク</a></p>\n<p>本の例では電文データのパースをやっています。</p>\n<p>例えば電文データの構造というのはどんなデータがやってくるのかによって変化します。この変化に対応するということは、電文データの仕様定義の変更に対応するということです。</p>\n<p>この電文データ仕様定義を外部から設定して処理が実行されるようにすれば良い。外部からデータ仕様定義を設定するということは、メインの処理を書かなくてもプログラムが書かれたかのように動作するということ</p>\n<ul>\n<li>電文データ解析\n<ul>\n<li>define(Field)</li>\n<li>define(Field)</li>\n<li>define(Field)</li>\n</ul>\n</li>\n<li>Field\n<ul>\n<li>名前</li>\n<li>文字数</li>\n<li>変換ルール</li>\n</ul>\n</li>\n</ul>\n<p>電文データはdefineしてしまえばいくらでも変更可能になる。</p>\n<h2>フレームワーク</h2>\n<ul>\n<li>フレームワークに使われていると危険らしい</li>\n<li>フレームワークを使わずにゼロから作ることも重要らしい</li>\n</ul>\n<p>フレームワークを作ろうという企画。ただサーブレットでってのが正直あんまり知らないので、整理してから再度読んでみることにします。</p>\n<p>追記：記事書きました</p>\n<p><a href=\"/posts/p1797\">リンク</a></p>\n<p>基本的には全てのリクエストを受け付けるクラスを作って、URLに応じて処理を振り分けることをしているぽいです。</p>\n<p>昔の記憶なので曖昧ですがドットインストールというサイトでも似たようなことを学べたかと思います</p>\n<p>https://dotinstall.com/lessons/sns_php_v3</p>\n<p>(久しぶりにこのサイト見たらコンテンツが増えててすごいサイトになってますね。またプレミアム会員になってみようかな。私は回し者ではありませんのでご安心ください)</p>","slug":"p1742"},"__N_SSG":true}