{"pageProps":{"frontMatter":{"title":"ゼロからのOS自作入門 | day05_1","date":"2021.12.08","description":"ゼロからのOS自作入門 | day05_1","categories":["OS"]},"content":"<p>少し空いてしまいましたが続きをやっていきます。</p>\n<p>実は面白い本を見つけました。「解析魔法少女美咲ちゃん マジカル・オープン！」という本です。</p>\n<p>「あなたの名前を入力してね」みたいなページがあるのだが、本に出てくる”お兄ちゃん”になれるのだ。しかし、そのお兄ちゃんの設定が”典型的なダメ兄で負け犬人生”ということで、なんとも複雑な感情になれる。</p>\n<p>本の内容はバイナリエディタを使って悪いこと自分のソフトを守ろうという内容。（まだあまり読んでない）アセンブラ初心者も楽しく勉強できそう？？</p>\n<h2>文字を書く</h2>\n<p>「頑張ると文字の形をした絵を描くこともできるはずです」文字の表示とはそういうことらしいです。</p>\n<h3>振り返り</h3>\n<p>ちょっとピクセルを描く処理についておさらいしておきます。</p>\n<p>まず描画に必要な情報を取得するにはGOP(Graphics Output Protocol)という機能を使います。</p>\n<p>必要な情報は以下です</p>\n<ul>\n<li>フレームバッファの先頭アドレス</li>\n<li>フレームバッファの表示と非表示領域</li>\n<li>１ピクセルのデータ形式。１ピクセルが何バイトか</li>\n</ul>\n<p>箇条書きですがざっくり振り返りを進めます</p>\n<ul>\n<li>定義したOpenGOPメソッドを介して変数gopにGOPを設定します。（詳細は省略されてます）</li>\n<li>このgopからgop->Mode->FrameBufferBaseのようにフレームバッファの情報を取得します。</li>\n<li>gop->Mode->FrameBufferBaseで取得したUINT8* frame_bufferの[n]に対して色を指定(例えば255)することでフレームバッファに描画を行います。</li>\n<li>白で塗りつぶすならばgop->Mode->FrameBufferSizeだけループさせる</li>\n<li>そしてカーネル側で、このframe_buffer_baseを引数で受け取り描画を行います。</li>\n<li>reinterpret_castを利用して整数をポインタに変換します。uinit64_tをreinterpret_cast&#x3C;uint8_t*>とする</li>\n</ul>\n<h3>第四章を振り返る</h3>\n<p>第四章ではクラスを分けて便利に描画できるようにしました。</p>\n<p>また箇条書きで描いていきます</p>\n<ul>\n<li>PixelWriterという抽象クラスを用意しました。こいつはフレームバッファーを受取ります。また、Writeメソッドを仮想関数として用意</li>\n<li>PixelAtメソッドでフレームバッファに描画する箇所を取得します</li>\n<li>オーバーライドするWritePixel関数でPixelAtで取得した箇所に1ピクセルを描画します</li>\n<li>1ピクセルは32ビット=4バイトなのでフレームバッファの先頭からバイト位置を計算するにはpixel_positionに4をかける</li>\n</ul>\n<h2>改めて文字を書く</h2>\n<p>都度都度振り返りを挟んで処理を理解しないといけないです。</p>\n<p>文字列を描画するには塗るか塗らないかという情報を用意しておいて、PixelWriterのWriteメソッドを呼び出します。</p>\n<p>このメソッドをWriteAsciiメソッドとしてコンポジションでWriteメソッドを呼び出します。→ピクセルの描画方法と切り離して変更に強い実装にする。</p>\n<p><img src=\"/468/1.png\" alt=\"画像\"></p>\n<h2>ヘッダーファイルの作成</h2>\n<p>C++では関数やクラスという単位でファイルに分割できる。今回はcppファイルを分割して、ヘッダファイルを宣言してincludeする</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">#include <span class=\"token string\">\"frame_buffer_config.hpp\"</span>\n#include <span class=\"token string\">\"graphics.hpp\"</span>\n#include <span class=\"token string\">\"font.hpp\"</span>\n</code></pre></div>\n<p>またMakefileに修正が入っているのでgitを確認する</p>\n<p><img src=\"/468/2.png\" alt=\"画像\"></p>\n<h2>フォントを増やす</h2>\n<p>hankaku.txtはgitからダウンロードしました。そしてそれをバイナリファイル→オブジェクトファイルに変換する※toolsもgitからダウンロードしておきました</p>\n<p>権限がバグってたので全部付与しました。→　chmod 777 makefont.py</p>\n<p>まずbinを作成して</p>\n<p><img src=\"/468/3.png\" alt=\"画像\"></p>\n<p>オブジェクトファイルを作成する</p>\n<p><img src=\"/468/4.png\" alt=\"画像\"></p>\n<p>オプション引数が -0に見えたが -O オーが正解です。</p>\n<p>そしてエラー</p>\n<p>こいつまじなんなの？</p>\n<p><img src=\"/468/5.png\" alt=\"画像\"></p>\n<p>しかも前回と同じことしても全くダメ</p>\n<p>仕方ないのでgitのブランチを切り替えてみます。せっかく手打ちしてんおに！！！</p>\n<p>結局変わらない＾＾＾＾＾＾＾＾；；；</p>\n<p>時間がもったいないので一旦ここで手を止めます。。。。。</p>\n<p>やったこと</p>\n<ul>\n<li>evalをつける</li>\n<li>evalをつけない</li>\n<li>source $HOME/osbook/devenv/buildenv.sh</li>\n<li>ブランチをday05cに変更</li>\n</ul>\n<p>↑ぜーんぶだめ</p>","slug":"p468"},"__N_SSG":true}