{"pageProps":{"frontMatter":{"title":"Javaの遅延評価","date":"2022.01.10","description":"Javaの遅延評価","categories":["Java"]},"content":"<p>Javaで遅延処理について学びました。</p>\n<p>参考サイト：第一級関数の使い方が分からないJavaディベロッパに教えたいその使いどころ：部分適用・遅延評価編</p>\n<p>参考書籍：Javaによる関数型プログラミング ―Java 8ラムダ式とStream</p>\n<p>参考書籍：Effective Java 第3版</p>\n<h2>Supplier</h2>\n<p>単に値を返すインターフェースとしてgetメソッドを定義していますが、この処理を他の関数に移動させることで処理を遅延させることができます。</p>\n<p>まさに参考サイト遅延評価の章のコードがわかりやすい。引数で渡すintの値をその場で評価するのか、それとも評価を後回しにするのかというので、大きな違いになります。</p>\n<p>単純に処理に10秒かけているので10秒差が出ています。</p>\n<p>メソッドに渡された引数は、メソッド呼出し前に評価</p>\n<p>このように、処理を遅延させることで不要な処理を行わない選択ができるようになります。</p>\n<h2>synchronized</h2>\n<p>遅延初期化を行うことで変数の初期化も遅らせることができます。</p>\n<p>これは「必要でなければするな」という遅延初期化の助言らしいです。</p>\n<p>多くの状況下では遅延初期化を必要ないようですが、もしも遅延初期化を利用する場合には、synchronizedというキーワードを使ってスレッドセーフになります。</p>\n<p>例えば以下のコードは遅延初期化を行っていて必要になった時にProductのインスタンスを生成するProductManagerのクラスです</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public class ProductManager {\n\t\n\tprivate Product product;\n\t\n\tpublic Product get()\n\t{\n\t\tif(product == null) {\n\t\t\tproduct = new Product();\n\t\t}\n\t\treturn product;\n\t}\n}\n</code></pre></div>\n<p>Productクラスは以下のようになっています</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public class Product {\n\n\tpublic Product() {\n\t\tSystem.out.println(\"製品が作成されました。\");\n\t}\n\t\n\tpublic void use(){\n\t\tSystem.out.println(\"製品を利用しました\");\n\t}\n\n}\n</code></pre></div>\n<p>想定では最初のnewのみが実行されるのですが、マルチスレッドでは上手くいきません</p>\n<p>UserクラスではProductManagerからProductを取得してuseします</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">@Override\n\tpublic void run() {\n\t\tfor(int i = 0; i &#x3C; 100; i ++) {\n\t\t\tProduct p = this.pm.get();\n\t\t\tp.use();\n\t\t\tSystem.out.println(\"ユーザーID : \" + this.id + \"処理ID : \" + i);\n\t\t}\n\t}\n</code></pre></div>\n<p>そしてこれを複数のスレッドで同時に利用すると以下のようなログになります</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public static void main(String[] args) {\n\t\tProductManager pm = new ProductManager();\n\t\tList<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>User</span><span class=\"token punctuation\">></span></span> users = List.of(\n\t\t\t\tnew User(1,pm),\n\t\t\t\tnew User(2,pm),\n\t\t\t\tnew User(3,pm),\n\t\t\t\tnew User(4,pm),\n\t\t\t\tnew User(5,pm));\n\n\t\tfor(User user : users)\n\t\t{\n\t\t\tThread t = new Thread(user);\n\t\t\tt.start();\n\t\t}\n\n\t}\n}\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ユーザーが作成されました。 ID : 1\nユーザーが作成されました。 ID : 2\nユーザーが作成されました。 ID : 3\nユーザーが作成されました。 ID : 4\nユーザーが作成されました。 ID : 5\n製品が作成されました。\n製品が作成されました。\n製品を利用しました\n製品が作成されました。\n製品を利用しました\n製品が作成されました。\n製品を利用しました\nユーザーID : 1処理ID : 0\n製品を利用しました\n製品が作成されました。\n製品を利用しました\nユーザーID : 2処理ID : 0\n製品を利用しました</code></pre></div>\n<p>製品が何度も作成されていて、想定の挙動になっていません。これは同時にアクセスした場合に簡単に破られてしまいますので、ここでsynchronizedの出番です。メソッドにsynchronizedキーワードをつけて実行してみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public synchronized Product get()\n\t{\n\t\tif(product == null) {\n\t\t\tproduct = new Product();\n\t\t}\n\t\treturn product;\n\t}\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">ユーザーが作成されました。 ID : 1\nユーザーが作成されました。 ID : 2\nユーザーが作成されました。 ID : 3\nユーザーが作成されました。 ID : 4\nユーザーが作成されました。 ID : 5\n製品が作成されました。\n製品を利用しました\n製品を利用しました\n製品を利用しました\nユーザーID : 1処理ID : 0\n製品を利用しました\n製品を利用しました\nユーザーID : 4処理ID : 0\n製品を利用しました\n</code></pre></div>\n<p>一度の生成処理しか行われていないことがわかります。</p>\n<p>synchronizedについては、現場で使っているコードを見たことがあったのですが、よくわかりませんでした。たしかクラスに付与していたので、もしかしたらパフォーマンスとか改善できたかもしれません。</p>\n<p>余談はさておき、上記のコードではメソッドにアクセスする度にロックがかかってしまい、場合によっては処理が止まってしまいます。</p>\n<p>以下のようにするとロックが必要な時（変数がnullの時）だけロックをするようにできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public Product get()\n\t{\n\t\tif(product != null) {\n\t\t\treturn product;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif(product == null) {\n\t\t\t\tproduct = new Product();\n\t\t\t}\n\t\t\treturn product;\n\t\t}\n\t}\n</code></pre></div>\n<h2>Supplierとsynchronized</h2>\n<p>Supplierを使って並列処理でロックをかけるようにしてみます。</p>\n<p>ソースコードはJavaによる関数型プログラミング ―Java 8ラムダ式とStreamを参考に作成しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">public class ProductManager {\n\t\n\tprivate Supplier<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Product</span><span class=\"token punctuation\">></span></span> product = () -> createProduct();\n\n\tpublic ProductManager() {\n\t\tSystem.out.println(\"プロダクトマネージャーを初期化しました。\");\n\t}\n\t\n\tpublic Product getProduct() {\n\t\treturn product.get();\n\t}\n\t\n\tprivate Product createProduct() {\n\n\t\tclass ProductFactory implements Supplier<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Product</span><span class=\"token punctuation\">></span></span> {\n\t\t\tprivate final Product productInstance = new Product();\n\t\t\t@Override\n\t\t\tpublic Product get() {\n\t\t\t\treturn productInstance;\n\t\t\t}\t\n\t\t}\n\t\t\n\t\tif(ProductFactory.class.isInstance(product))\n\t\t{\n\t\t\treturn product.get();\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif(!ProductFactory.class.isInstance(product)) {\n\t\t\t\tproduct = new ProductFactory();\n\t\t\t}\n\t\t\treturn product.get();\n\t\t}\n\t}\n\n}\n</code></pre></div>\n<p>ちょっと複雑ですね。</p>","slug":"p854"},"__N_SSG":true}