{"pageProps":{"frontMatter":{"title":"Rust – Bevyでノベルゲームを作る 次の文字を表示","date":"2022.09.10","description":"Rust – Bevyでノベルゲームを作る 次の文字を表示","categories":["Rust"]},"content":"<p>右キーを押下したら次の文字を表示させようと思います。changeTextみたいなのがあればいいのですが、なさそう？</p>\n<p>テキストの更新を行っているサンプルを見つけましたので、こちらを参考に実装してみます</p>\n<p>https://bevyengine.org/examples/ui/text/</p>\n<h2>次のメッセージの表示</h2>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(next_message) //定義した関数を追加する\n    .run();\n}\n\n// メッセージというコンポーネントを定義する\n#[derive(Component)]\nstruct Message;\n\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // 枠の生成\n    command.spawn_bundle(NodeBundle{\n                style: Style {\n                    size: Size::new(Val::Percent(100.0), Val::Percent(50.0)),\n                    margin: UiRect::all(Val::Px(0.0)),\n                    align_items: AlignItems::FlexEnd,\n                    ..default()\n                },\n                color: Color::BLACK.into(),\n                ..default()\n    })\n    .with_children(|parent| {\n            parent.spawn_bundle(TextBundle::from_section(\n                &#x26;quot;Bevy | Rust&#x26;quot;,\n                TextStyle {\n                    font: font.clone(),\n                    font_size: 60.0,\n                    color: Color::rgb(0.9, 0.9, 0.9)\n                })\n            )\n            //メッセージの登録\n            .insert(Message);\n        }\n    );\n    \n}\n\n// キーイベントを受け取り、右キーを押下していたらテキストを書き換える\nfn next_message(\n    key_input: Res&#x26;lt;Input&#x26;lt;KeyCode&#x26;gt;&#x26;gt;,\n    mut query: Query&#x26;lt;&#x26;amp;mut Text, With&#x26;lt;Message&#x26;gt;&#x26;gt;\n){\n    if key_input.pressed(KeyCode::Right) {\n        let text = query.get_single_mut();\n        text.unwrap().sections[0].value = &#x26;quot;this is next message.&#x26;quot;.to_string();\n    }\n}</code></pre></div>\n<p><img src=\"/3716/1.png\" alt=\"画像\"></p>\n<p>テキストの更新が行えましたが、実装については駆け足になっています。</p>\n<h2>複数のメッセージを表示する</h2>\n<p>次のメッセージが一つしかないのは流石にお粗末なので、複数のメッセージを表示できるようにします。</p>\n<p>まずはどうやって複数のメッセージを管理するのか考えたのですが、以下のようにしてみました。</p>\n<ul>\n<li>Message構造体にmessagesというベクタを定義</li>\n<li>イベントが発生したらmessagesからpopする</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(next_message) //定義した関数を追加する\n    .run();\n}\n\n// メッセージというコンポーネントを定義する\n// い\n#[derive(Component)]\nstruct Message{\n    messages: Vec&#x26;lt;String&#x26;gt;,\n}\n\n\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // 枠の生成\n    command.spawn_bundle(NodeBundle{\n                style: Style {\n                    size: Size::new(Val::Percent(100.0), Val::Percent(50.0)),\n                    margin: UiRect::all(Val::Px(0.0)),\n                    align_items: AlignItems::FlexEnd,\n                    ..default()\n                },\n                color: Color::BLACK.into(),\n                ..default()\n    })\n    .with_children(|parent| {\n            parent.spawn_bundle(TextBundle::from_section(\n                &#x26;quot;Bevy | Rust&#x26;quot;,\n                TextStyle {\n                    font: font.clone(),\n                    font_size: 60.0,\n                    color: Color::rgb(0.9, 0.9, 0.9)\n                })\n            )\n            //メッセージの登録\n            .insert(Message{\n                messages: [\n                    &#x26;quot;hello&#x26;quot;.to_string(),\n                    &#x26;quot;rust novel game&#x26;quot;.to_string()\n                ].to_vec()\n            });\n        }\n    );\n    \n}\n\n// キーイベントを受け取り、右キーを押下していたらテキストを書き換える\nfn next_message(\n    key_input: Res&#x26;lt;Input&#x26;lt;KeyCode&#x26;gt;&#x26;gt;,\n    mut query: Query&#x26;lt;(&#x26;amp;mut Text, &#x26;amp;mut Message)&#x26;gt;\n){\n    if key_input.pressed(KeyCode::Right) {\n        let result = query.get_single_mut();\n        // クエリの結果からタプルを取り出す\n        let tuple = result.unwrap();\n        // Text部分\n        let mut text = tuple.0;\n        // Message部分\n        let mut message = tuple.1;\n        // 書き換える\n        text.sections[0].value = &#x26;quot;this is next message.&#x26;quot;.to_string();\n        // Messageのmessagesから1件取り出す\n        let get_message = message.messages.pop();\n        // 取り出したOptionをmatchにかける\n        match get_message {\n           Some(x) =&#x26;gt; println!(&#x26;quot;{}&#x26;quot;, x),\n           None =&#x26;gt; println!(&#x26;quot;結果がNoneです&#x26;quot;) \n        }\n    }\n}</code></pre></div>\n<p><img src=\"/3716/2.png\" alt=\"画像\"></p>\n<p>messagesで設定した値を正しくpopしていることは確認できますが、一度キーを押しただけなのにすぐに結果がNoneですというログが表示されてしまっていますので、その辺を含めて修正していきます。</p>\n<h4>余談</h4>\n<p>この複数のメッセージを表示するっていうのに苦戦しました。最初はイテレータでnext呼べばいいでしょう？となったが、ごちゃごちゃしまくって断念。</p>\n<p>その後も配列とカウンタで～とかやってもコンパイルが通らず断念。</p>\n<p>結果的には構造体が持つVecをpopして順番に取り出すというのに落ち着きました。</p>\n<h2>just_released</h2>\n<p>キーイベントはワンプッシュでも毎フレーム呼ばれるので、popが一気に呼ばれてしまいます。代わりにjust_releasedというメソッドでイベントの監視を行います。</p>\n<ul>\n<li>pressed\n<ul>\n<li>キーを押して離す間イベントがtureになる</li>\n</ul>\n</li>\n<li>just_released\n<ul>\n<li>キーを話した時の1フレームがtrueになる</li>\n</ul>\n</li>\n</ul>\n<p>詳細 https://bevy-cheatbook.github.io/input/mouse.html?highlight=button#mouse-buttons</p>\n<p>なのでnext_messageメソッドを以下のように修正します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">fn next_message(\n    key_input: Res&#x26;lt;Input&#x26;lt;KeyCode&#x26;gt;&#x26;gt;,\n    mut query: Query&#x26;lt;(&#x26;amp;mut Text, &#x26;amp;mut Message)&#x26;gt;\n){\n    // キーを離した時に呼ばれる\n    if key_input.just_released(KeyCode::Right) {\n\n        let result = query.get_single_mut();\n        // クエリの結果からタプルを取り出す\n        let tuple = result.unwrap();\n        // Text部分\n        let mut text = tuple.0;\n        // Message部分\n        let mut message = tuple.1;\n        \n        // Messageのmessagesから1件取り出す\n        let get_message = message.messages.pop();\n        // 取り出したOptionをmatchにかける\n        match get_message {\n           Some(x) =&#x26;gt; {\n                // ここで書き換える\n                text.sections[0].value = x;\n           },\n           None =&#x26;gt; println!(&#x26;quot;結果がNoneです&#x26;quot;)  // ここでメッセージが空になったときのイベントを行う\n        }\n    }\n}</code></pre></div>\n<p><img src=\"/3716/3.png\" alt=\"画像\"></p>\n<p>右キーを話すと画面のテキストが変更されます。</p>\n<p>現在はpopメソッドを使っているので、感覚的には設定するメッセージを後ろから設定していく必要がありますが、ここは次回修正します。</p>\n<h2>シリーズ記事</h2>\n<p>◆Rust – Bevyでノベルゲームを作る 文字の表示</p>\n<p><a href=\"/posts/p3690\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 枠の表示</p>\n<p><a href=\"/posts/p3702\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 次の文字を表示</p>\n<p><a href=\"/posts/p3716\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る キャラクターを表示する</p>\n<p><a href=\"/posts/p3731\">リンク</a></p>","slug":"p3716"},"__N_SSG":true}