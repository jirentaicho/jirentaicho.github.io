{"pageProps":{"frontMatter":{"title":"Spring | @RequestBodyでパラメータをformで受け取る","date":"2022.04.13","description":"Spring | @RequestBodyでパラメータをformで受け取る","categories":["未分類"]},"content":"<p>画面などから登録処理を行う場合、そのリクエストの内容をコントローラーで受け取ってDBなどに登録します。大きいシステムになるとリクエストに含まれる情報が大きくなってきます。</p>\n<p>@RequestBodyを使ってリクエストの内容とFormクラスを紐づけて処理することで、リクエストの内容をわかりやすく処理できるだけでなく、事前にバリデーションを行うこともできます。</p>\n<h2>コントローラーの作成</h2>\n<p>以下のようなsave処理を作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Store</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">StoreForm</span> storeForm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Store</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstore<span class=\"token punctuation\">.</span><span class=\"token function\">setDistrict</span><span class=\"token punctuation\">(</span>storeForm<span class=\"token punctuation\">.</span><span class=\"token function\">getDistrict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>saveメソッドの引数のStoreFormは@ReqeustBodyが付与されています。これによってリクエストの内容をStoreFormとして処理できるようになります。</p>\n<p>StoreFormクラスは以下のようになっています。今回リクエストで受け取るデータが格納できるようになっています。また、@Getterはlombokのアノテーションで、getterメソッドが付与されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoreForm</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> district<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>リクエスト送信する</h2>\n<p>Postmanというアプリを使ってリクエストを送信します。BodyはJSON形式にして、StoreFormとして必要な情報を設定して送信します。</p>\n<p><img src=\"/2073/1.png\" alt=\"画像\"></p>\n<p>リクエストの内容がStoreFormにマッピングされているのがわかります。</p>\n<p><img src=\"/2073/2.png\" alt=\"画像\"></p>\n<p>このように@RequestBodyを使うことでリクエストの内容をクラスに紐づけて処理しやすくできます。</p>\n<h2>事前にバリデーションをかける</h2>\n<p>事前にバリデーションをかければ、煩わしいロジックを追い出すことができます。</p>\n<p>別途記事にしております。</p>\n<p><a href=\"/posts/p2083\">リンク</a></p>","slug":"p2073"},"__N_SSG":true}