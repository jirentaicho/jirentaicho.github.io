{"pageProps":{"frontMatter":{"title":"SpringSecurityの認証処理を行う流れ","date":"2022.06.03","description":"SpringSecurityの認証処理を行う流れ","categories":["Spring"]},"content":"<p>この記事ではSpringSecurityが認証処理を行う流れをざっくりと確認するのが目的です。</p>\n<p>ざっくり書くと認証処理は以下のように流れていきます</p>\n<ul>\n<li>UsernamePasswordAuthenticationFilter#attemptAuthentication</li>\n<li>AuthenticationManager(ProviderManager)#authenticate</li>\n<li>DaoAuthenticationProvider(AbstractUserDetailsAuthenticationProvider)#authenticate</li>\n<li>UserDetailsService(JdbcUserDetailsManager)#loadUserByUsername</li>\n</ul>\n<p>また流れを確認する上で前回の記事で作成したJDBC認証を使うようにしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetailsManager</span> <span class=\"token function\">userDetailsService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 既存User : misaka/mikoto</span>\n    <span class=\"token class-name\">JdbcUserDetailsManager</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcUserDetailsManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>UsernamePasswordAuthenticationFilter</h2>\n<p>フォーム画面でログインした場合にUsernamePasswordAuthenticationFilterが呼ばれます。</p>\n<p>ログインボタンを押して実際の認証処理が走る時には、一般的にはこのフィルターが利用されるということですね。</p>\n<h3>実際の認証処理</h3>\n<p>どういったことをしているのか見てみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postOnly <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationServiceException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authentication method not supported: \"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token function\">obtainUsername</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tusername <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>username <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token function\">obtainPassword</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>password <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> password <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>\n\t\t\tpassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Allow subclasses to set the \"details\" property</span>\n\t<span class=\"token function\">setDetails</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> authRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>リクエストの内容からusernameとpasswordを取得しています</li>\n<li>UsernamePasswordAuthenticationTokenというものを作成して、AuthenticationManager#authenticateを呼出しているのがわかります</li>\n</ul>\n<p>この時利用されるAuthenticationManagerがProviderManagerというものであることがわかります</p>\n<p><img src=\"/2727/1.png\" alt=\"画像\"></p>\n<p>そもそもAuthenticationManagerというのはAuthenticationを返すauthenticateメソッドのみを持ったインターフェースです</p>\n<p>つまり実際の認証処理というのはAuthenticationManagerが担当しているようです。引用文にもあるようにauthenticateメソッドの引数はAuthenticationで、戻り値もAuthenticationです。</p>\n<p>UsernamePasswordAuthenticationFilterで作成したUsernamePasswordAuthenticationTokenというのは、Authenticationの実装クラスです</p>\n<p><img src=\"/2727/2.png\" alt=\"画像\"></p>\n<ul>\n<li>misaka/mikotoでログイン</li>\n<li>また認可の情報などは取得されていない</li>\n</ul>\n<p>ここまでを一旦整理すると</p>\n<ul>\n<li>UsernamePasswordAuthenticationFilterがログインすると呼ばれる</li>\n<li>AuthenticationManager#authenticateメソッドを呼び出す</li>\n<li>AuthenticationManagerはProviderManagerという実装クラスが処理を行っている</li>\n</ul>\n<h2>AuthenticationManager</h2>\n<p>UsernamePasswordAuthenticationFilterから呼ばれたAuthenticationManager#authenticateは、ProviderManagerという実装クラスが処理を行います。このauthenticateメソッドは以下のように説明されています</p>\n<p>authenticateメソッドの中では以下のようにprovider.authenticateを呼出して、戻り値であるAuthenticationを設定しています</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Authentication</span><span class=\"token punctuation\">></span></span> toTest <span class=\"token operator\">=</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">AuthenticationException</span> lastException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">AuthenticationException</span> parentException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Authentication</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Authentication</span> parentResult <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> currentPosition <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationProvider</span> provider <span class=\"token operator\">:</span> <span class=\"token function\">getProviders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>toTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authenticating request with %s (%d/%d)\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tprovider<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>currentPosition<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">copyDetails</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>(1)がそのprovider.authenticate</li>\n</ul>\n<p>このproviderはDaoAuthenticationProviderというクラスであることがわかりますDaoAuthenticationProviderにはauthenticateメソッドは定義されておらず、基底クラスのAbstractUserDetailsAuthenticationProviderに処理が移ります</p>\n<p><img src=\"/2727/3.png\" alt=\"画像\"></p>\n<p>AbstractUserDetailsAuthenticationProvider#authenticateメソッドでは、UserDetailsを作成していることがわかります。</p>\n<p><img src=\"/2727/4.png\" alt=\"画像\"></p>\n<p>UserDetailsというのはユーザー名やパスワード、そしてユーザーが有効かどうか(enabled)などの情報が格納されており、AuthenticationオブジェクトのgetPrincipalメソッドから取得可能です</p>\n<p>ここで呼出すretrieveUserは抽象メソッドになっているためDaoAuthenticationProviderがその実装を行っています</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">retrieveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authentication<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">prepareTimingAttackProtection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">UserDetails</span> loadedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUserDetailsService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadedUser <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalAuthenticationServiceException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token string\">\"UserDetailsService returned null, which is an interface contract violation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> loadedUser<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>UserDetailsServiceのloadUserByUsernameメソッドを呼び出しています。たまにDB認証する際にはUserDetailsServiceの実装クラスを作ってloadUserByUsernameメソッドをオーバーライドします。というのを見かけますが、やっているのはココですね。</p>\n<p>UserDetailsServiceの実体が何者か確認してみると</p>\n<p><img src=\"/2727/5.png\" alt=\"画像\"></p>\n<p>Bean登録したJdbcUserDetailsManagerです。</p>\n<p>ここまでを一旦整理すると</p>\n<ul>\n<li>AuthenticationManager(ProviderManager)#authenticateが、DaoAuthenticationProvider#authenticateを呼出す</li>\n<li>基底クラスのAbstractUserDetailsAuthenticationProvider#authenticateが呼ばれる</li>\n<li>基底クラスから抽象メソッドretrieveUserを呼出してUserDetailsを作成する</li>\n<li>DaoAuthenticationProviderがretrieveUserメソッドでUserDetailsServiceのloadUserByUsernameメソッドを呼出してUserDetailsを作成する</li>\n<li>UserDetailsServiceの実装はBean登録したJdbcUserDetailsManagerです</li>\n</ul>\n<h2>UserDetailsService</h2>\n<p>DaoAuthenticationProviderから、UserDetailsServiceのloadUserByUsernameが呼ばれてUserDetailsを取得しようとしていました。</p>\n<p>そしてUserDetailsServiceの実体がBean登録したJdbcUserDetailsManagerでした。</p>\n<p>JdbcUserDetailsManagerを見てみると、loadUserByUsernameメソッドは定義されておらず、基底クラスのJdbcDaoImplに定義があります</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserDetails</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> <span class=\"token function\">loadUsersByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query returned no results for user '\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JdbcDaoImpl.notFound\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Username {0} not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">UserDetails</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// contains no GrantedAuthority[]</span>\n\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> dbAuthsSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enableAuthorities<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> dbAuthsSet<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadUserAuthorities</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enableGroups<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tdbAuthsSet<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadGroupAuthorities</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> dbAuths <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>dbAuthsSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">addCustomAuthorities</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dbAuths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dbAuths<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User '\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">\"' has no authorities and will be treated as 'not found'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JdbcDaoImpl.noAuthority\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"User {0} has no GrantedAuthority\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">createUserDetails</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> dbAuths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>(1)でデータベースからレコードを取得しています</li>\n<li>(2)でデータベースから認可を取得しています</li>\n</ul>\n<p>(1)loadUsersByUsernameメソッド</p>\n<p><img src=\"/2727/6.png\" alt=\"画像\"></p>\n<p>(2)loadUserAuthoritiesメソッド</p>\n<p><img src=\"/2727/7.png\" alt=\"画像\"></p>\n<p>(3)最終的にはUserDetailsを作成して返します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">createUserDetails</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDetails</span> userFromUserQuery<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> combinedAuthorities<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> returnUsername <span class=\"token operator\">=</span> userFromUserQuery<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usernameBasedPrimaryKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treturnUsername <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>returnUsername<span class=\"token punctuation\">,</span> userFromUserQuery<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userFromUserQuery<span class=\"token punctuation\">.</span><span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tuserFromUserQuery<span class=\"token punctuation\">.</span><span class=\"token function\">isAccountNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userFromUserQuery<span class=\"token punctuation\">.</span><span class=\"token function\">isCredentialsNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tuserFromUserQuery<span class=\"token punctuation\">.</span><span class=\"token function\">isAccountNonLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> combinedAuthorities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>UserというのはUserDetailsの実装クラスです</li>\n</ul>\n<p>こうやってデータベースからレコードを取得して認証ユーザーを取得しているんですね。</p>\n<p>ここまでを一旦整理すると</p>\n<ul>\n<li>UserDetailsService(JdbcUserDetailsManager)のloadUserByUsernameメソッドは、基底クラスのJdbcDaoImplが実装しています</li>\n<li>loadUserByUsernameメソッドで実際にSQLを発行してデータベースからレコードを取得している</li>\n<li>また認可などの情報もここでSQLを発行して取得している</li>\n<li>最終的にUserDetailsを作成して返却する</li>\n</ul>\n<p>これでデータベースからレコードを取得しているのがわかりました。</p>\n<p>しかしユーザー取得のSQLを見ると理解できないことが起きています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">DEF_USERS_BY_USERNAME_QUERY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select username,password,enabled \"</span>\n\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"from users \"</span>\n\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"where username = ?\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>なんとパスワードのチェックをしていません</p>\n<h2>認証情報のチェック</h2>\n<p>AbstractUserDetailsAuthenticationProvider#authenticateメソッドは、辿っていくとUserDetailsSerivceからUserDetailsを取得していましたね</p>\n<p><img src=\"/2727/8.png\" alt=\"画像\"></p>\n<p>このAbstractUserDetailsAuthenticationProvider#authenticateメソッドはAuthenticationManager(ProviderManager)のauthenticateメソッドから呼ばれていて、戻り値としてAuthenticationを返却しています。</p>\n<p>ここまでDBから取得したのはUserDetailsであるため、この後の処理でAuthenticationを返却することになります。このメソッドを見ると以下のようになっています</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AbstractUserDetailsAuthenticationProvider.onlySupports\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token string\">\"Only UsernamePasswordAuthenticationToken is supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token function\">determineUsername</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">boolean</span> cacheWasUsed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">UserDetails</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userCache<span class=\"token punctuation\">.</span><span class=\"token function\">getUserFromCache</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcacheWasUsed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> user <span class=\"token operator\">=</span> <span class=\"token function\">retrieveUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span> authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernameNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to find user '\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hideUserNotFoundExceptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AbstractUserDetailsAuthenticationProvider.badCredentials\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bad credentials\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"retrieveUser returned null - a violation of the interface contract\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preAuthenticationChecks<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">additionalAuthenticationChecks</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span> authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">createSuccessAuthentication</span><span class=\"token punctuation\">(</span>principalToReturn<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>(1)ではUserDetailsSerivceからUserDetailsを取得してきます</li>\n<li>(2)でadditionalAuthenticationChecksということをしています</li>\n<li>(3)で成功認証情報の作成をして返却しています</li>\n</ul>\n<p>(1)については上述してきた処理です。</p>\n<p>(2)のadditionalAuthenticationChecksは抽象メソッドになっていますので、継承先のクラスにて実装されているはずです。その実装はDaoAuthenticationProviderでしたね</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">additionalAuthenticationChecks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDetails</span> userDetails<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to authenticate since no credentials provided\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AbstractUserDetailsAuthenticationProvider.badCredentials\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bad credentials\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">String</span> presentedPassword <span class=\"token operator\">=</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>presentedPassword<span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to authenticate since password does not match stored value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AbstractUserDetailsAuthenticationProvider.badCredentials\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bad credentials\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>ここでパスワードの整合性をチェックしていることがわかります</li>\n<li>presentedPasswordは入力時のパスワード</li>\n<li>userDetails.getPassword()はDBから取得したUserDetailsのパスワード</li>\n<li>presentedPasswordとuserDetails.getPassword()がマッチしていない場合はエラーになる</li>\n</ul>\n<p>引数のauthenticationというのは、UsernamePasswordAuthenticationFilterのattemptAuthenticationメソッドで作成されたUsernamePasswordAuthenticationTokenでしたね</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>(3)は抽象メソッドではないのですが、DaoAuthenticationProviderにてオーバーライドされています。オーバーライド先では最終的にsuperを呼び出しています</p>\n<p>最終的には以下のような形のAuthenticationオブジェクトが返却されていました</p>\n<p><img src=\"/2727/9.png\" alt=\"画像\"></p>\n<p>ここまでを一旦整理すると</p>\n<ul>\n<li>AuthenticationManagerから呼ばれるAuthenticationProviderの実装クラスAbstractUserDetailsAuthenticationProviderがパスワードのチェックを行う</li>\n<li>パスワードの整合性はadditionalAuthenticationChecksメソッドで行う</li>\n<li>最終的にはAuthenticationオブジェクトを返却する</li>\n</ul>","slug":"p2727"},"__N_SSG":true}