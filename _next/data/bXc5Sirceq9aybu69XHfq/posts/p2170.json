{"pageProps":{"frontMatter":{"title":"Java | プロクシクラス","date":"2022.04.19","description":"Java | プロクシクラス","categories":["Java"]},"content":"<p>パーフェクトJavaのリフレクション章にあるプロクシクラスについて勉強します。業務で使っているところを見たことがありませんので完全に初見です。</p>\n<p>プロクシクラスは既存メソッドを変更せずに、メソッド呼出しの前後などに独自処理を書き足せる。メソッドを呼ぶ側から透過に使える。デコレテータパータンの自動生成。のような機能らしいです。これを聞いたら真っ先にAOPだなと思います。</p>\n<p>デコレータパターンについては以前記事にしております</p>\n<p><a href=\"/posts/p1460\">リンク</a></p>\n<h2>プロクシクラス</h2>\n<p>以下の手順で利用します</p>\n<ul>\n<li>InvocationHandlerを実装したプロクシクラスを作成する\n<ul>\n<li>メソッドの前後の割り込みたい処理をオーバーライドしたinvokeメソッドに記載する</li>\n</ul>\n</li>\n<li>Proxy.newProxyInstanceでプロキシインスタンスを取得する</li>\n<li>取得したプロキシインスタンスでメソッドを実行する</li>\n</ul>\n<p>以下のクラスの処理の前後に、プロクシクラスを利用して処理を差し込んでみます。実装については参考書籍を元に作成しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RegisterService</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegisterServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RegisterService</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"セーブしました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>プロクシクラスを作成します。前後に処理を挟み込みたいクラスを保持するためにObject型でtargetとして保持しておきます。あらゆる処理に対してログ出力などの同様の処理を割り込ませることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegisterServiceProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\">// レシーバオブジェクトを保持する</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RegisterServiceProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登録処理を行うためのログ出力をします\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Object</span> ret <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// レシーバオブジェクトのメソッド呼出し</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登録処理を行ったため結果をログ出力します\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>クラスを利用するときProxy.newProxyInstanceを戻り値で、ラップされたオブジェクトを得ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">RegisterService</span> service <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegisterService</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">RegisterService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegisterServiceProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegisterServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tservice<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ログ</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">登録処理を行うためのログ出力をします\r\r\nセーブしました\r\r\n登録処理を行ったため結果をログ出力します\r</code></pre></div>\n<h2>参考書籍</h2>\n<p>改訂2版　パーフェクトJava</p>","slug":"p2170"},"__N_SSG":true}