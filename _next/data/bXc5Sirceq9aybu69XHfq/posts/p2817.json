{"pageProps":{"frontMatter":{"title":"SpringBootで動的に作ったCSVファイルをダウンロードさせる","date":"2022.06.22","description":"SpringBootで動的に作ったCSVファイルをダウンロードさせる","categories":["Spring"]},"content":"<p>CSVデータを動的に作成してダウンロードさせるため、JacksonのCsvMapperを利用してCSV形式のファイルを作成します。</p>\n<p>私の好きな書籍「現場至上主義 Spring Boot2徹底活用」の一部分です。が、ダウンロードされるcsvファイルが空ファイルになっていました。(抜けてる箇所があったらすみません。そのまま動かしたのでなく、参考に自分の作ったコードで動かした時の挙動です)</p>\n<p>該当箇所</p>\n<p>https://github.com/miyabayt/spring-boot-doma2-sample/blob/master/sample-web-base/src/main/java/com/sample/web/base/view/CsvView.java</p>\n<p>結果的にはwriteToResponseを使ってファイルの出力に成功しました</p>\n<p>ソース</p>\n<p>https://github.com/jirentaicho/BookOhFoo/blob/main/src/main/java/com/volkruss/BookOhFoo/system/controller/CsvDownLoadView.java</p>\n<p>今回はまず、前提知識としてファイルに文字列を書き込むってどうやるの？ってところから、</p>\n<h2>ファイルに書き込むってどうやるの？</h2>\n<p>そもそもOutputStreamWriterとBufferedOutputStreamみたいなのがあるけど何をどうすればファイルに文字を書き込めるのか？関連記事(記事下部)にもあるように、基本的にはバッファリングを使いまとめて読み書きしてしまうことが多いです。</p>\n<p>バッファリングをする機能は以下です</p>\n<ul>\n<li>BufferedOutputStream\n<ul>\n<li>バイトストリーム</li>\n</ul>\n</li>\n<li>BufferedWriter\n<ul>\n<li>文字ストリーム</li>\n</ul>\n</li>\n</ul>\n<h3>とりあえずファイルに文字を書き込んでみます</h3>\n<p>よくあるサンプルコードはtry文とかで見た目は複雑になっているが、try-with-resourcesを使うことでとてもシンプルになります。</p>\n<p>以下はcolor.txtというファイルにwhiteという文字列を書き込むだけのコードです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sell/sample\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileWriter</span> fileWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>OutputStreamWriterとBufferedOutputStreamじゃなくてFileWriterじゃねーか！と思ったかもしれませんが、これはOutputStreamWriterを継承しているだけなので基本的には同じようなものだと考えましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileWriter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OutputStreamWriter</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> append<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>省略\n</code></pre></div>\n<p><img src=\"/2817/1.png\" alt=\"画像\"></p>\n<p>OutputStreamWriterというのは文字列をそのまま処理できます。これは文字ストリーム(文字の連続)をバイトストリーム(バイトの連続)に変換してくれます。そのためfileWriter.write(“white”);のように書き込みが可能です。</p>\n<h3>BufferedOutputStreamを使ってみよう</h3>\n<p>次はBufferedOutputStreamを使ってみます。これはバイトストリームを扱うので文字列を書き込むことはできません。</p>\n<p>コンストラクタにOutputStreamが必要です。ここでFileOutputStreamをnewして渡してあげます。FileOutputStreamは引数にファイル名を受取ります</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sell/sample\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedOutputStream</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"BLACK\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 文字列をバイトに変換する</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"/2817/2.png\" alt=\"画像\"></p>\n<p>書き込むときには文字列でなくバイトを渡しています。なので以下の違いがあるのがわかります</p>\n<ul>\n<li>OutputStreamWriter\n<ul>\n<li>文字列を書き込める</li>\n</ul>\n</li>\n<li>BufferedOutputStream\n<ul>\n<li>バイトを書き込める</li>\n<li>文字列は書き込めない</li>\n</ul>\n</li>\n</ul>\n<h3>BufferedWriterを使ってみる</h3>\n<p>ここまでくるとなんとなくどうやって書くのかわかるかと思います。以下のようにしてBufferedWriterを利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sell/sample\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can i break it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"/2817/3.png\" alt=\"画像\"></p>\n<h2>CSVファイルをダウンロードする</h2>\n<p>ここからはCSVファイルをダウンロードするコードについて見ていきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">CsvSchema</span> schema <span class=\"token operator\">=</span> csvMapper<span class=\"token punctuation\">.</span><span class=\"token function\">schemaFor</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ByteArrayOutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token function\">createTemporaryOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Writer</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Windows-31J\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    csvMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writer</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValue</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">writeToResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>createTemporaryOutputStreamは一時的なOutputStreamを作成してくれます。戻り値はByteArrayOutputStreamです。これはファイルなどでなくバイト配列を出力先にするものです。</p>\n<p>http://www.kab-studio.biz/Programing/JavaA2Z/Word/00000901.html</p>\n<p>そしてcsvMapper.writer(schema).writeValue(writer, data);でwriteしているのでしょう。</p>\n<p>何となく動きはわかると思います。Writerを使ってバイト配列にcsvの内容を書き込んでいるということが。</p>\n<p>さて、これはエラー無く動くのですが書き込んだ奴はどこいったのか・・・</p>\n<p>そこでwriteToResponse(response,out);を使いました。</p>\n<p>これだけだとurlに応じたファイル名でファイルがダウンロードされますが、しっかりcsvが書き込まれています。※画像はヘッダのみ</p>\n<p><img src=\"/2817/4.png\" alt=\"画像\"></p>\n<h3>ファイル名の指定など</h3>\n<p>ファイル名などを指定する際にはレスポンスのヘッダーを設定してあげます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> filename <span class=\"token operator\">=</span> <span class=\"token string\">\"csv.csv\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> encodedFilename <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> contentDisposition <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"attachment; filename*=UTF-8''%s\"</span><span class=\"token punctuation\">,</span> encodedFilename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONTENT_DISPOSITION</span><span class=\"token punctuation\">,</span> contentDisposition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>一応、ダウンロードさせることを明示して、文字コードやファイル名を指定しています。このattachmentというのがダウンロードすべきであることを示していて、Webページとして表示したいよって時はinlineを使います</p>\n<p>https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition</p>\n<p>ただcsvファイルはinlineにしていもダウンロードされてしまいました。</p>\n<h2>関連記事</h2>\n<p><a href=\"/posts/p1951\">リンク</a></p>\n<p><a href=\"/posts/p492\">リンク</a></p>\n<h2>参考記事</h2>\n<p>https://zenn.dev/kawakawaryuryu/articles/8924849b88590cda4e22</p>","slug":"p2817"},"__N_SSG":true}