{"pageProps":{"frontMatter":{"title":"Javaとデザインパターン","date":"2022.03.08","description":"Javaとデザインパターン","categories":["Java"]},"content":"<p>前回の記事に関連しています</p>\n<p><a href=\"/posts/p1460\">リンク</a></p>\n<p>ファイルの入出力をする際に、Java.ioパッケージのクラスを利用する時、インスタンス化したオブジェクトを渡しまくっていますが、あれって何でしょうか？ってお話です。</p>\n<p>記事の内容は独自の検証ロジック(?)で見ているので間違っている可能性もあります。</p>\n<h2>InputStream | デコレーター</h2>\n<ul>\n<li>FileInputStreamクラスはInputStreamという抽象クラスのサブクラスです。\n<ul>\n<li>この時点でデコレーターパターンの臭いがプンプンしますね（なわけない）</li>\n</ul>\n</li>\n<li>InputStreamReaderクラスはReaderクラスのサブクラスです。\n<ul>\n<li>重要なのが引数でInputStream型のオブジェクトを受取っていることです</li>\n</ul>\n</li>\n</ul>\n<p>以下のようにインスタンス化してメソッドを利用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 色々省いています</span>\n<span class=\"token class-name\">FileInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InputStreamReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SJIS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nin<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>何気なくこういうもんだと思って使っていましたが、これはデコレーターパターンを利用しています。</p>\n<p>この場合の責務が</p>\n<ul>\n<li>FileInputStreamがファイルの読み取りでバイトストリームを扱う(InputStream)</li>\n<li>InputStreamReaderがバイトストリームを文字ストリームとして扱う(Reader)</li>\n</ul>\n<p>のようになるかと思います。</p>\n<p>InputStreamReaderで受け取ったFileInputStreamのインスタンスはStreamDecoderのコンストラクタに渡っていきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">StreamDecoder</span> <span class=\"token function\">forInputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">,</span>\n                                                     <span class=\"token class-name\">Object</span> lock<span class=\"token punctuation\">,</span>\n                                                     <span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> csn <span class=\"token operator\">=</span> charsetName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>csn <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            csn <span class=\"token operator\">=</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSupported</span><span class=\"token punctuation\">(</span>csn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamDecoder</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> lock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>csn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalCharsetNameException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">(</span>csn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>InputStreamReaderのreadメソッドは変数で保持しているStreamDecoderのreadメソッドに処理を委譲します。</p>\n<p>StreamDecoderのreadメソッドではバイト変換を行いますが、FileInputStream（先ほどコンストラクタで受け取った）のreadメソッドもコールしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        bb<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Read from the channel</span>\n            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Read from the input stream, and then update the buffer</span>\n            <span class=\"token keyword\">int</span> lim <span class=\"token operator\">=</span> bb<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> bb<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&#x3C;=</span> lim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&#x3C;=</span> lim <span class=\"token operator\">?</span> lim <span class=\"token operator\">-</span> pos <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">assert</span> rem <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// inがInputStreamReaderのインスタンス</span>\n            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bb<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> rem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Underlying input stream returned zero bytes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&#x3C;=</span> rem<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"n = \"</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">+</span> <span class=\"token string\">\", rem = \"</span> <span class=\"token operator\">+</span> rem<span class=\"token punctuation\">;</span>\n            bb<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Flip even when an IOException is thrown,</span>\n        <span class=\"token comment\">// otherwise the stream will stutter</span>\n        bb<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> rem <span class=\"token operator\">=</span> bb<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span>rem <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> rem<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> rem<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは処理が取外し可能になっているデコレーターパターンの素晴らしい例ですね。こんなもの作れって言われたら私には絶対無理なんですが。。。</p>\n<h2>BufferedReader | アダプター</h2>\n<p>コンソールから文字列を受取って表示するみたいなことをすると以下のような記載をします</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedReader</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>BufferedReaderはReaderを利用しますが、System.inはInputStreamです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>そのためInputStreamReaderを介してインターフェースを合わせています。これはアダプターパターンです</p>\n<p>InputStreamReaderがAdapterで、System.inがAdapteeで、BufferedReaderがTargetです</p>","slug":"p1494"},"__N_SSG":true}