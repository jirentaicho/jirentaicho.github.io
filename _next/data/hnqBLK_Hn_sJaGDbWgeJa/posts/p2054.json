{"pageProps":{"frontMatter":{"title":"Spring | MyBatisでリポジトリの実装をxmlに書く","date":"2022.04.13","description":"Spring | MyBatisでリポジトリの実装をxmlに書く","categories":["Spring"]},"content":"<p>前回マイクロサービスに軽く触れたのですが、そのプロジェクトでMyBatisを利用してデータベースにアクセスするといった処理詳細をxmlで書いてみようと思います。</p>\n<p>プロジェクト（ここのStoreが対応）</p>\n<p>https://github.com/jirentaicho/spring-micro-service-test</p>\n<p>今回は単純に以下を実施します</p>\n<ul>\n<li>データベースから全てのレコードを取得</li>\n<li>データベースから特定のレコードを取得</li>\n</ul>\n<p>参考</p>\n<p>https://qiita.com/NagaokaKenichi/items/380c1316383b2020a1e7</p>\n<p>https://mybatis.org/spring/ja/mappers.html</p>\n<h2>DB</h2>\n<p>こんなテーブルを利用します</p>\n<p><img src=\"/2054/1.png\" alt=\"画像\"></p>\n<h2>ザックリ実装の流れ</h2>\n<ul>\n<li>依存関係を解決する</li>\n<li>アプリケーションクラスに@MapperScanアノテーションを付与する</li>\n<li>コントローラーを作成する</li>\n<li>エンティティを作成する</li>\n<li>リポジトリインターフェースを作成する</li>\n<li>application.ymlを修正する</li>\n<li>mapperのxmlファイルを作成する</li>\n</ul>\n<h2>依存の追加</h2>\n<p>不要なものもありますが、mybatisとlombok、そして接続するデータベース(今回はPostgre)に関する依存を解決しておきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">dependencies {\n\timplementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\n\timplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'\n\tcompileOnly 'org.projectlombok:lombok'\n\truntimeOnly 'org.postgresql:postgresql'\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n</code></pre></div>\n<h2>アプリケーションクラスに@MapperScanアノテーションを付与する</h2>\n<p>MapperScanアノテーションを利用することでBeanとして登録することができます。リポジトリに関してはインターフェースのみを容易して実際の処理はxmlにて定義します。MapperScanには容易するインターフェースのある階層を指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.volkruss.demo.repository\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//DI可能にする</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoreApplication</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StoreApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>他にもリポジトリインターフェースに対して@Mapperアノテーションを付与しても動作します。その場合は、srcとresourcesで同じフォルダ構成にxmlファイルを配置します。今回はxmlファイルをmappingフォルダに全て格納する方針なのでMapperScanを利用しています。</p>\n<h2>コントローラーを作成する</h2>\n<p>今回の処理は2つなので2つのメソッドを容易しました。また、リポジトリに関しては先ほども記載した通り、Bean登録してあるのでAutowiredが可能になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoreHandler</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">StoreRepository</span> storeRepository<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/all\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Store</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Store</span><span class=\"token punctuation\">></span></span> stores <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> stores<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Store</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Store</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>エンティティを作成する</h2>\n<p>今回はただのDTOです。一応データベースの構造と紐づいています</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> district<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>リポジトリインターフェースを作成する</h2>\n<p>後回しになってしまいましたが、リポジトリのインターフェースを作成します。実装は全てxmlで書くので楽です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\"> * ここで@Mapperをつけると、同じ階層のリソースフォルダにあるxmlファイルを読込ます</span>\n<span class=\"token comment\"> * 今回はsqlを全てmappingフォルダに格納しているためapplication.ymlにてxmlファイルとのバインド設定を記述しています。</span>\n<span class=\"token comment\"> * </span>\n<span class=\"token comment\"> * 今回はMapperScanをApplicationクラスにて付与しています。</span>\n<span class=\"token comment\"> * これによってBeanが登録されます。</span>\n<span class=\"token comment\"> * また@Mapperを付けた場合でもBean登録されます。</span>\n<span class=\"token comment\"> * </span>\n<span class=\"token comment\"> */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StoreRepository</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Store</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Store</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>application.ymlを修正する</h2>\n<p>データベースの設定とmybatisの設定を行います</p>\n<div class=\"remark-highlight\"><pre class=\"language-JSON\"><code class=\"language-JSON\">spring:\n  application:\n    name: store-service\n  datasource:\n    driver-class-name: org.postgresql.Driver\n    url: jdbc:postgresql://192.168.11.13:5432/misaka\n    username: misaka\n    password: mikoto\nmybatis:\n  mapper-locations: classpath*:/mapping/*.xml\n  type-aliases-package: com.volkruss.demo.entity</code></pre></div>\n<p>mapper-locationsは、今回はxmlのパスがjavaクラスと紐づいてないので必須になります。</p>\n<h2>mapperのxmlファイルを作成する</h2>\n<p>パッケージやクラスの指定をミスるとアプリケーションが起動しないので、しっかり見直す必要があります。</p>\n<p>大事な所はコメントしてあります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token prolog\">&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.volkruss.demo.repository.StoreRepository<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&#x3C;!-- idには対応するメソッド名を記述します --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.volkruss.demo.entity.Store<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&#x3C;!-- 正しく指定しないと起動時エラーになります --></span>\n\t\tselect * from stores\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>select</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&#x3C;!-- 処理がselectなのでselectタグで囲います --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.volkruss.demo.entity.Store<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\tselect name,district from stores where id = #{id}\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>select</span><span class=\"token punctuation\">></span></span>\n\t\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>mapper</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>idなどwhere条件は#{id}として実際に渡ってくる変数名を指定してあげれば自動的に埋め込まれるようです。</p>\n<h2>確認</h2>\n<ul>\n<li>全件取得</li>\n</ul>\n<p><img src=\"/2054/2.png\" alt=\"画像\"></p>\n<ul>\n<li>1件取得</li>\n</ul>\n<p><img src=\"/2054/3.png\" alt=\"画像\"></p>\n<p>取得してないidは初期値0が設定されています。</p>\n<p>MyBatisは簡単で良いですね。domaもやってみたのですが、感覚的にはMyBatisのほうが使いやすいです</p>","slug":"p2054"},"__N_SSG":true}