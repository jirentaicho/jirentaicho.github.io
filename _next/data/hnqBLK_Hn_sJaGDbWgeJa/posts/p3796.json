{"pageProps":{"frontMatter":{"title":"Swaggerが少しわかったになれる記事","date":"2022.10.02","description":"Swaggerが少しわかったになれる記事","categories":["Swagger"]},"content":"<p>最初にSwaggerを知ったのは「現場至上主義 Spring Boot2 徹底活用」という本です。しかしよくわからないので飛ばしていたので、今回はそこをやり直しました。</p>\n<p>Swaggerについてよくわからないという人が、少しわかったになれるを目標にします。</p>\n<p>ちなみにSwaggerはOpenAPI準拠ということで、API管理のデファクトスタンダードと呼ばれるほどらしいです。</p>\n<h2>Swaggerどうやる</h2>\n<p>yamlファイルで記述したAPI仕様に基づいて、SwaggerUIがAPI定義を表示してくれます。SwaggerUIではリクエストパラメータの詳細やContent-Type、戻値の確認などできます。そしてCodegenがAPI定義に基づいてサーバー側とクライアント側のコードを自動生成してくれます。</p>\n<p>今回はサーバー側のコードを自動生成してSpringで起動します。クライアント側はPostmanで代用して試していきます。</p>\n<h2>いきなりSwaggerを試す</h2>\n<p>まずは以下のサイトにアクセスします</p>\n<p><img src=\"/3796/1.png\" alt=\"画像\"></p>\n<ul>\n<li>左側がyamlでAPI仕様を書くエディタです</li>\n<li>右側がSwaggerUIです</li>\n<li>画面上部のリンクのGenetateとあるのがCodegenです</li>\n</ul>\n<p>左で書いた内容を元に、他のツールが機能する感じですね。つまり左側のyamlファイルさえ記述できればあとはなんとかなる！ということですが、yamlファイルは超シンプルにします。</p>\n<p>まずはAPIの情報を定義します</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">openapi<span class=\"token operator\">:</span> <span class=\"token number\">3.0</span><span class=\"token number\">.0</span>\ninfo<span class=\"token operator\">:</span>\n  title<span class=\"token operator\">:</span> Item <span class=\"token constant\">API</span>\n  description<span class=\"token operator\">:</span> Item <span class=\"token constant\">API</span> sample study\n  version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token number\">.0</span>\n\n</code></pre></div>\n<p><img src=\"/3796/2.png\" alt=\"画像\"></p>\n<p>書いた内容で右側のUIが更新されます。これはItemAPIであることをyamlにて宣言しているだけです。</p>\n<p>次にサーバー情報を追記しておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">openapi<span class=\"token operator\">:</span> <span class=\"token number\">3.0</span><span class=\"token number\">.0</span>\ninfo<span class=\"token operator\">:</span>\n  title<span class=\"token operator\">:</span> Item <span class=\"token constant\">API</span>\n  description<span class=\"token operator\">:</span> Item <span class=\"token constant\">API</span> sample study\n  version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token number\">.0</span>\nservers<span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> url<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>volkruss<span class=\"token punctuation\">.</span>com\n  <span class=\"token operator\">-</span> url<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>volkruss2<span class=\"token punctuation\">.</span>com\n</code></pre></div>\n<p><img src=\"/3796/3.png\" alt=\"画像\"></p>\n<p>右側にServersというドロップダウンが表示されました。これがサーバーのアドレスを指定します。というのもSwaggerUIでは実際にリクエストを投げることができるのです。なのでちゃんとしたサーバーを指定すれば、実際のAPIの結果を受け取ることができます。</p>\n<p>自分のローカルにSwagerUIを作っておけば、ローカルホストで動いてるアプリケーション挙動が確認できるということです。（今回はブラウザでSwaggerUIを試しているのでできません）</p>\n<p>次はルーティング情報を定義します。ここが一番重要なポイントで、どのURLに対してどのアクションで、どんな結果を返すのかを定義しています。</p>\n<p>少し長いですが、一部を除いてすぐに理解できると思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">openapi<span class=\"token operator\">:</span> <span class=\"token number\">3.0</span><span class=\"token number\">.0</span>\ninfo<span class=\"token operator\">:</span>\n  title<span class=\"token operator\">:</span> Item <span class=\"token constant\">API</span>\n  description<span class=\"token operator\">:</span> Item <span class=\"token constant\">API</span> sample study\n  version<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token number\">.0</span>\nservers<span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> url<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>volkruss<span class=\"token punctuation\">.</span>com\n  <span class=\"token operator\">-</span> url<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>volkruss2<span class=\"token punctuation\">.</span>com\npaths<span class=\"token operator\">:</span>\n  <span class=\"token operator\">/</span>items<span class=\"token operator\">:</span>\n    get<span class=\"token operator\">:</span>\n      summary<span class=\"token operator\">:</span> Get Item\n      description<span class=\"token operator\">:</span> <span class=\"token keyword\">get</span> all item info\n      responses<span class=\"token operator\">:</span>\n        <span class=\"token string-property property\">'200'</span><span class=\"token operator\">:</span>\n          description<span class=\"token operator\">:</span> <span class=\"token keyword\">get</span> Json Items\n          content<span class=\"token operator\">:</span>\n            application<span class=\"token operator\">/</span>json<span class=\"token operator\">:</span>\n              schema<span class=\"token operator\">:</span>\n                type<span class=\"token operator\">:</span> array\n                items<span class=\"token operator\">:</span>\n                  $ref<span class=\"token operator\">:</span> <span class=\"token string\">\"#/components/schemas/Item\"</span>\n                example<span class=\"token operator\">:</span> \n                  <span class=\"token operator\">-</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n                    name<span class=\"token operator\">:</span> 洗剤\n                  <span class=\"token operator\">-</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n                    name<span class=\"token operator\">:</span> 柔軟剤\n</code></pre></div>\n<ul>\n<li>/itemsのGETアクションに関して定義しています</li>\n<li>レスポンスがステータス200の時json形式で配列を返します\n<ul>\n<li>配列以外にもいろいろ書けます</li>\n<li>配列の型はcomponentで定義します(これから書きます)</li>\n</ul>\n</li>\n<li>exampleはサンプルとして返す具体的な値を定義していますが、今回の場合はItemという型がidとnameという変数を持っている想定で書いています。</li>\n</ul>\n<p>これで/itemsに対するAPI定義がされています。</p>\n<p><img src=\"/3796/4.png\" alt=\"画像\"></p>\n<p>こんな戻り値が返ってくるよとサンプルの内容も反映されているのがわかりますね。</p>\n<p>しかし、これではエラーが残っているのと$refってなにという疑問も残ります</p>\n<p><img src=\"/3796/5.png\" alt=\"画像\"></p>\n<p>$refが参照失敗しているというのと、Itemsというのが解決できないというエラーで怒られています。</p>\n<p>この$refではcomponentで定義した内容を参照します。今回のコードの場合はcomponentに対してItemを定義してあげる必要があります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">openapi</span><span class=\"token operator\">:</span> <span class=\"token number\">3.0</span><span class=\"token number\">.0</span>\n<span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Item</span> <span class=\"token constant\">API</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Item</span> <span class=\"token constant\">API</span> sample study\n  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token number\">.0</span>\n<span class=\"token literal-property property\">servers</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> url<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>volkruss<span class=\"token punctuation\">.</span><span class=\"token property-access\">com</span>\n  <span class=\"token operator\">-</span> url<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>volkruss2<span class=\"token punctuation\">.</span><span class=\"token property-access\">com</span>\n<span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">/</span>items<span class=\"token operator\">:</span>\n    <span class=\"token literal-property property\">get</span><span class=\"token operator\">:</span>\n      <span class=\"token literal-property property\">summary</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Get</span> <span class=\"token maybe-class-name\">Item</span>\n      <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token keyword\">get</span> all item info\n      <span class=\"token literal-property property\">responses</span><span class=\"token operator\">:</span>\n        <span class=\"token string-property property\">'200'</span><span class=\"token operator\">:</span>\n          <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token keyword\">get</span> <span class=\"token maybe-class-name\">Json</span> <span class=\"token maybe-class-name\">Items</span>\n          <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span>\n            application<span class=\"token operator\">/</span>json<span class=\"token operator\">:</span>\n              <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> array\n                <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span>\n                  <span class=\"token literal-property property\">$ref</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#/components/schemas/Item\"</span>\n                <span class=\"token literal-property property\">example</span><span class=\"token operator\">:</span> \n                  <span class=\"token operator\">-</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n                    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> 洗剤\n                  <span class=\"token operator\">-</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n                    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> 柔軟剤\n<span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span>\n  <span class=\"token literal-property property\">schemas</span><span class=\"token operator\">:</span>\n    <span class=\"token literal-property property\">Item</span><span class=\"token operator\">:</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> object\n      <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> integer\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> string\n</code></pre></div>\n<p>Itemはid(integer)とname(string)を持ったオブジェクトであることを定義しました。これでUIのほうでもエラーがなくなっています。</p>\n<h2>SpringApplicationとして動かす</h2>\n<p>このAPI定義に基づいてコードを自動生成します。</p>\n<p>画面上部のGeneateServerからspringを選択するとzipファイルがダウンロードされます</p>\n<p><img src=\"/3796/6.png\" alt=\"画像\"></p>\n<p>解凍したファイルをstsなどでインポートします</p>\n<p>まず依存関係を追加しておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>groupId</span><span class=\"token punctuation\">></span></span>jakarta.xml.bind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>artifactId</span><span class=\"token punctuation\">></span></span>jakarta.xml.bind-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>version</span><span class=\"token punctuation\">></span></span>2.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>参考</p>\n<p><a href=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fuga-box.hatenablog.com%2Fentry%2F2021%2F02%2F10%2F000000\">参考</a></p>\n<p>少し自動生成されたファイルを見てみます</p>\n<p>まずはmodel/Item.javaです</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span>   <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>componentで定義した内容が定義されているのがわかります。</p>\n<p>次にapi/ItemsApi.javaです</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">@javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">Generated</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"io.swagger.codegen.v3.generators.java.SpringCodegen\"</span><span class=\"token punctuation\">,</span> date <span class=\"token operator\">=</span> <span class=\"token string\">\"2022-10-01T09:48:15.864Z[GMT]\"</span><span class=\"token punctuation\">)</span>\n@Validated\npublic interface ItemsApi <span class=\"token punctuation\">{</span>\n\n    @<span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>summary <span class=\"token operator\">=</span> <span class=\"token string\">\"Get Item\"</span><span class=\"token punctuation\">,</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"get all item info\"</span><span class=\"token punctuation\">,</span> tags<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token function\">ApiResponses</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n        @<span class=\"token function\">ApiResponse</span><span class=\"token punctuation\">(</span>responseCode <span class=\"token operator\">=</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">,</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"get Json Items\"</span><span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> @<span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>mediaType <span class=\"token operator\">=</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span> array <span class=\"token operator\">=</span> @<span class=\"token function\">ArraySchema</span><span class=\"token punctuation\">(</span>schema <span class=\"token operator\">=</span> @<span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span>implementation <span class=\"token operator\">=</span> Item<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token function\">RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/items\"</span><span class=\"token punctuation\">,</span>\n        produces <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n        method <span class=\"token operator\">=</span> RequestMethod<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n    ResponseEntity<span class=\"token operator\">&#x3C;</span>List<span class=\"token operator\">&#x3C;</span>Item<span class=\"token operator\">>></span> <span class=\"token function\">itemsGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>/itemsに対してListのResponseEntityを返すというitemsGetメソッドが定義されたインターフェースになっていることがわかります。</p>\n<p>次にこのクラスの実装クラスであるapi/ItemsApiController.javaを見てみます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@javax.annotation.Generated</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"io.swagger.codegen.v3.generators.java.SpringCodegen\"</span><span class=\"token punctuation\">,</span> date <span class=\"token operator\">=</span> <span class=\"token string\">\"2022-10-01T09:48:15.864Z[GMT]\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemsApiController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ItemsApi</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ItemsApiController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@org.springframework.beans.factory.annotation.Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ItemsApiController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectMapper <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">itemsGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> accept <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accept <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> accept<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ {\\n  \\\"id\\\" : 1,\\n  \\\"name\\\" : \\\"洗剤\\\"\\n}, {\\n  \\\"id\\\" : 2,\\n  \\\"name\\\" : \\\"柔軟剤\\\"\\n} ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_IMPLEMENTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't serialize response for content type application/json\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_IMPLEMENTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>オーバーライドしているitemsGetメソッドはObjectMapperを利用してItemクラスを生成して、ResponseEntityを返しているのがわかります。</p>\n<p>しかし、これはステータスコードは501になっているのでOKの200に修正しておきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">return new ResponseEntity&#x26;lt;List&#x26;lt;Item&#x26;gt;&#x26;gt;(objectMapper.readValue(&#x26;quot;[ {\\n  \\&#x26;quot;id\\&#x26;quot; : 1,\\n  \\&#x26;quot;name\\&#x26;quot; : \\&#x26;quot;洗剤\\&#x26;quot;\\n}, {\\n  \\&#x26;quot;id\\&#x26;quot; : 2,\\n  \\&#x26;quot;name\\&#x26;quot; : \\&#x26;quot;柔軟剤\\&#x26;quot;\\n} ]&#x26;quot;, List.class), HttpStatus.OK);</code></pre></div>\n<p>これでSpringBootAppとして実行します。</p>\n<p>次にPostmanからリクエストを送信します</p>\n<p><img src=\"/3796/7.png\" alt=\"画像\"></p>\n<p>Acceptというkeyに対してapplication/jsonというValueを指定してSendします</p>\n<p><img src=\"/3796/8.png\" alt=\"画像\"></p>\n<p>ステータスコード200で、サンプルで定義したItemが取得できていることがわかりました。</p>\n<p>これでなんとなくSwaggerがわかったかと思います。APIを定義してコードの自動生成までやってしまう化け物です。</p>\n<p>他にもAPI定義書をドキュメントとして生成したり、Springではspringfoxを利用することでSwaggerと連携できたりします。</p>\n<p>その辺はまた今度やっていきます。</p>","slug":"p3796"},"__N_SSG":true}