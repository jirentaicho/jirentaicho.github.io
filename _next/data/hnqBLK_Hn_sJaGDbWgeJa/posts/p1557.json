{"pageProps":{"frontMatter":{"title":"Spring boot でAPI開発","date":"2022.03.16","description":"Spring boot でAPI開発","categories":["Spring"]},"content":"<p>簡単なAPIを作りました。</p>\n<ul>\n<li>ガチャを引く</li>\n<li>ガチャを引く石をプラスする</li>\n</ul>\n<p>これだけです。</p>\n<p><a href=\"https://t.co/cCmV6QbeO8\">参考</a></p>\n<p>ソースは以下にあります</p>\n<p>https://github.com/jirentaicho/spring-api-gacha</p>\n<p>フロントはTypeScriptで作ってます</p>\n<p>https://github.com/jirentaicho/use-gahca-api-typescript</p>\n<h2>リクエスト</h2>\n<p>json形式でリクエストを受取ります。※ 認証機能は入れてないのでuser_idもリクエストに入れてます。</p>\n<p><img src=\"/1557/1.png\" alt=\"画像\"></p>\n<ul>\n<li>コントローラーに@RequestMappingのproducesを設定してjsonでリクエストを受取ることを明示します。</li>\n<li>メソッド引数に@RequestBodyを付けて受け取る形をクラスで指定します。</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>produces <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GachaController</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">GachaServiceFacade</span> gachaServiceFacade<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/get\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@CrossOrigin</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">playGacha</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">UserGachaCommand</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> gachaServiceFacade<span class=\"token punctuation\">.</span><span class=\"token function\">playGacha</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">getUser_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>UserGachaCommandはシンプルですがアクセサメソッドは付与しておきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserAddGachaCommand</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>エラーハンドリング</h2>\n<p>エラーが起きたとき（今回のケースではガチャ石が足りない時）には処理を中断してエラーメッセージを返却しています。</p>\n<p>以下の手順でエラーハンドリングを行っています</p>\n<ul>\n<li>@RestControllerAdviceを付与したクラスを作成する\n<ul>\n<li>ResponseEntityExceptionHandlerを継承する</li>\n<li>@ExceptionHandlerに対象とするクラスを指定するメソッドの作成戻り値はMapにする(簡単にする場合)\n<ul>\n<li>戻り値はMapにする(簡単にする場合)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>対象クラスはRuntimeExceptionを継承する</li>\n<li>対象クラスをスローする</li>\n</ul>\n<p>以下の場合はNotEnoughExceptionがスローされた時に、errorMapが返却されます。NotEnoughExceptionクラスはスローさえできればいいので実装は不要です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestControllerAdvice</span><span class=\"token punctuation\">(</span>annotations <span class=\"token operator\">=</span> <span class=\"token class-name\">RestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiExceptionHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseEntityExceptionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 個別のカスタムエラークラスをハンドリングする</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotEnoughException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleNotEnoughException</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebRequest</span> webRequest\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> errorMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        errorMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ガチャ石が足りません。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> errorMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"/1557/2.png\" alt=\"画像\"></p>\n<h2>レスポンス</h2>\n<p>DTOクラスを用意して、それを返却すれば自動的にjson形式で扱えました。ただしゲッターメソッドは必須です</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * クラスをJSONとして返却する際には、Getterが必要になります。</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterDTO</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> lank<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>データアクセスには@Entityアノテーションを持ったクラスを容易しています。これらはメソッドもあるのでDTOに変換してgetterのみを持ったオブジェクトにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@javax.persistence.Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"userdatas\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserData</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Entity</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserData</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> user_id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stone</span> stone<span class=\"token punctuation\">;</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * ガチャ石がマイナスにならない場合はガチャ石を使用します\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">sub</span>\n     * <span class=\"token keyword\">@return</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stone<span class=\"token punctuation\">.</span><span class=\"token function\">canGacha</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stone <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stone<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserData</span> <span class=\"token function\">addStone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stone <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stone<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>amt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStoneAmt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stone<span class=\"token punctuation\">.</span><span class=\"token function\">getAmt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>DTO</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDataDTO</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> amt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>MapperクラスはModelMapperなど使わずに作りました</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDataDTOMapper</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDataDTO</span> <span class=\"token function\">toDTO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserData</span> userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDataDTO</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">.</span><span class=\"token function\">getStoneAmt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ちなみにリストはstreamを使うとあっさり書けます</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterDTOMapper</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharacterDTO</span> <span class=\"token function\">toDTO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span> character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span><span class=\"token function\">getLank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>character<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> character<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">CharacterDTO</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toDTOList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> characters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> characters<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">toDTO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>データベース</h2>\n<p>データベースはdockerで用意しています。別途記事があるのでそのまんまです</p>\n<p><a href=\"/posts/p1274\">リンク</a></p>\n<h2>余談</h2>\n<p>なんか最近プログラミングの吸収力が上がった気がします(気がしてるだけです)以下の原因が考えられると思う（根拠はないので感覚です）</p>\n<ul>\n<li>デザインパターンについて考えた\n<ul>\n<li>実際にサンプルをいくつか自分で作る</li>\n</ul>\n</li>\n<li>他人のソースをコードリーディングした\n<ul>\n<li>自分なりに改造して動かす</li>\n<li>何が起きてるのかまとめる</li>\n</ul>\n</li>\n</ul>\n<p>参考にしていた本とURL</p>\n<ul>\n<li>オブジェクト指向のこころ</li>\n<li>オブジェクト指向における再利用のためのデザインパターン</li>\n<li>ddd-java</li>\n<li>dddsample</li>\n</ul>\n<p>オブジェクト指向のこころとかは古いソースになってしまいますが、デザインパターンとかの裏側を知るにはとても良いと思います。</p>","slug":"p1557"},"__N_SSG":true}