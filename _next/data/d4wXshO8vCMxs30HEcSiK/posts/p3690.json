{"pageProps":{"frontMatter":{"title":"Rust – Bevyでノベルゲームを作る 文字の表示","date":"2022.09.10","description":"Rust – Bevyでノベルゲームを作る 文字の表示","categories":["Rust"]},"content":"<p>今回もBevyに関する記事です。前回はBevyを触ってみてどんな感じで動くのかを確認しました。</p>\n<p><a href=\"/posts/p3555\">リンク</a></p>\n<p>以前、TypeScriptとC#(WPF)でノベルゲームとノベルゲームメーカーを作りました</p>\n<p><a href=\"/posts/p120\">リンク</a></p>\n<p>今回はもう少し簡単なノベルゲームをBevyで作成していきます。</p>\n<h1>テキストを表示する</h1>\n<p>プロジェクトを作成して、最小単位のBevyアプリのコードを定義します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-Python\"><code class=\"language-Python\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .run();\n}</code></pre></div>\n<p>ここにテキストの表示処理を実装していきます。</p>\n<h3>フォントの用意</h3>\n<p>フォントを用意するですが、サンプルにあるフォントを利用します</p>\n<p>https://github.com/bevyengine/bevy/tree/main/assets/fonts</p>\n<p>この「FiraMono-Medium.ttf」をassets/fontsフォルダに格納しておきます。</p>\n<h3>テキストの生成</h3>\n<p>以下のコードを記載します</p>\n<div class=\"remark-highlight\"><pre class=\"language-Python\"><code class=\"language-Python\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .run();\n}\n\n\n// Systemは関数で定義する\n// 引数として受け取れる特別なパラメータ\n//   - Res ResMut\n//   - Query\n//   - Commands\n//   - EventWriter EventReader\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // テキストの生成\n    command.spawn_bundle(TextBundle::from_section(\n        &#x26;quot;Hello Wolrd&#x26;quot;,\n        TextStyle {\n            font: font.clone(), //取得したフォント\n            font_size: 60.0,\n            color: Color::rgb(0.9, 0.9, 0.9)\n        })\n        .with_style(Style{\n            margin: UiRect::all(Val::Px(50.0)), // ウインドウの左下を起点に(50.0)のマージンを取る\n            ..default()\n        }),\n    );\n}</code></pre></div>\n<p>実行すると以下のようにBevy | Rustという文字が表示されます。</p>\n<p><img src=\"/3690/1.png\" alt=\"画像\"></p>\n<p>テキストの表示にTextBundleを利用しました。</p>\n<h2>用語と機能</h2>\n<h3>System</h3>\n<p>自分で関数を定義してゲームロジックを実装します。この時に引数としてコメントに書いたような特別なパラメータを受け取ることができます。\nアプリビルダーを経由してBevyに登録します</p>\n<h3>Commands</h3>\n<p>エンティティの生成や削除、またエンティティに対してコンポーネントの追加削除、リソース管理を行います。</p>\n<h3>Res</h3>\n<p>リソースの共有借用。ファイルからアセットを読み込むにはAssetServerリソースを利用します</p>\n<h3>エンティティ</h3>\n<p>ゲームの内のオブジェクトを表します。シンプルな識別子くらいのものにしか持っていません。spawnを利用して生成します</p>\n<h3>コンポーネント</h3>\n<p>エンティティに関連するデータ。   #[derive(Component)]を利用して、構造体またはenumを定義して利用します</p>\n<h2>シリーズ記事</h2>\n<p>◆Rust – Bevyでノベルゲームを作る 文字の表示</p>\n<p><a href=\"/posts/p3690\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 枠の表示</p>\n<p><a href=\"/posts/p3702\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 次の文字を表示</p>\n<p><a href=\"/posts/p3716\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る キャラクターを表示する</p>\n<p><a href=\"/posts/p3731\">リンク</a></p>","slug":"p3690"},"__N_SSG":true}