{"pageProps":{"frontMatter":{"title":"Rust – Bevyでノベルゲームを作る キャラクターを表示する","date":"2022.09.10","description":"Rust – Bevyでノベルゲームを作る キャラクターを表示する","categories":["Rust"]},"content":"<p>テキストの表示ができたので、キャラクターを表示してみます。ここまでやれば大分ノベルゲームっぽくなります。</p>\n<h2>キャラクターの表示</h2>\n<p>とりあえずキャラクターを表示させてみます。コードを以下のように記載します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(next_message) //定義した関数を追加する\n    .run();\n}\n\n#[derive(Component)]\nstruct Message{\n    messages: Vec&#x26;lt;String&#x26;gt;,\n}\n\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // キャラクターの表示\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        transform: Transform { \n            scale: Vec3::new(0.1, 0.1,1.0),\n            ..Default::default()\n        },\n        ..default()\n    });\n    // 枠の生成\n    command.spawn_bundle(NodeBundle{\n                style: Style {\n                    size: Size::new(Val::Percent(100.0), Val::Percent(50.0)),\n                    margin: UiRect::all(Val::Px(0.0)),\n                    align_items: AlignItems::FlexEnd,\n                    ..default()\n                },\n                color: Color::BLACK.into(),\n                ..default()\n    })\n    .with_children(|parent| {\n            parent.spawn_bundle(TextBundle::from_section(\n                &#x26;quot;Bevy | Rust&#x26;quot;,\n                TextStyle {\n                    font: font.clone(),\n                    font_size: 60.0,\n                    color: Color::rgb(0.9, 0.9, 0.9)\n                })\n            )\n            .insert(Message{\n                messages: [\n                    &#x26;quot;hello&#x26;quot;.to_string(),\n                    &#x26;quot;rust novel game&#x26;quot;.to_string()\n                ].to_vec()\n            });\n        }\n    );\n}\n\nfn next_message(\n    key_input: Res&#x26;lt;Input&#x26;lt;KeyCode&#x26;gt;&#x26;gt;,\n    mut query: Query&#x26;lt;(&#x26;amp;mut Text, &#x26;amp;mut Message)&#x26;gt;\n){\n    if key_input.just_released(KeyCode::Right) {\n        let result = query.get_single_mut();\n\n        let tuple = result.unwrap();\n\n        let mut text = tuple.0;\n        let mut message = tuple.1;\n\n        let get_message = message.messages.pop();\n        match get_message {\n           Some(x) =&#x26;gt; {\n                text.sections[0].value = x;\n           },\n           None =&#x26;gt; println!(&#x26;quot;結果がNoneです&#x26;quot;)\n        }\n    }\n}</code></pre></div>\n<p><img src=\"/3731/1.png\" alt=\"画像\"></p>\n<p>キャラクターは表示されますが、メッセージエリアと被っているのでキャラクターが隠れています。</p>\n<h2>透過処理</h2>\n<p>NodeBundleを生成しているところの、colorをrgbaメソッドを利用して透明度まで指定できるようにします</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">// 枠の生成\ncommand.spawn_bundle(NodeBundle{\n            style: Style {\n                size: Size::new(Val::Percent(100.0), Val::Percent(50.0)),\n                margin: UiRect::all(Val::Px(0.0)),\n                align_items: AlignItems::FlexEnd,\n                ..default()\n            },\n            color: Color::rgba(0.0, 0.0, 0.0, 0.6).into(),\n            // color: Color::BLACK.into(),\n            ..default()\n})</code></pre></div>\n<p><img src=\"/3731/2.png\" alt=\"画像\"></p>\n<p>それらしくなりました</p>\n<h2>画像の位置を修正する</h2>\n<p>画面中央にある画像を、少しだけ上に配置します。SpriteBundleのtransformはtranslationにて位置を設定できます。中央を起点にしますので、y座標だけ少し値を設定してあげます</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">// キャラクターの表示\ncommand.spawn_bundle(SpriteBundle {\n    texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n    transform: Transform { \n        scale: Vec3::new(0.1, 0.1,1.0),\n        translation: Vec3::new(0.0, 70.0, 0.0),\n        ..Default::default()\n    },\n    ..default()\n});</code></pre></div>\n<p><img src=\"/3731/3.png\" alt=\"画像\"></p>\n<h2>VecDeque</h2>\n<p>現在はVec#popメソッドを使っているので最後に追加されたメッセージから出力されています。\nこれは感覚的ではないので修正します。\nVecDequeにはpop_frontというメソッドがあり、先頭の要素から取得できます。これを利用するように修正します</p>\n<div class=\"remark-highlight\"><pre class=\"language-rs\"><code class=\"language-rs\">use std::collections::VecDeque;\n\nuse bevy::prelude::*;\n\nfn main() {\n    App::new()\n    .add_plugins(DefaultPlugins)\n    .add_startup_system(setup)\n    .add_system(next_message) //定義した関数を追加する\n    .run();\n}\n\n#[derive(Component)]\nstruct Message{\n    // VecDequeに変更する\n    messages: VecDeque&#x26;lt;String&#x26;gt;,\n}\n\nfn setup(\n    mut command: Commands,\n    asset_server: Res&#x26;lt;AssetServer&#x26;gt;\n){\n    // フォントの取得\n    let font = asset_server.load(&#x26;quot;fonts/FiraMono-Medium.ttf&#x26;quot;);\n    // カメラの生成\n    command.spawn_bundle(Camera2dBundle::default());\n    // キャラクターの表示\n    command.spawn_bundle(SpriteBundle {\n        texture: asset_server.load(&#x26;quot;images/chara.png&#x26;quot;),\n        transform: Transform { \n            scale: Vec3::new(0.1, 0.1,1.0),\n            translation: Vec3::new(0.0, 70.0, 0.0),\n            ..Default::default()\n        },\n        ..default()\n    });\n    // 枠の生成\n    command.spawn_bundle(NodeBundle{\n                style: Style {\n                    size: Size::new(Val::Percent(100.0), Val::Percent(50.0)),\n                    margin: UiRect::all(Val::Px(0.0)),\n                    align_items: AlignItems::FlexEnd,\n                    ..default()\n                },\n                color: Color::rgba(0.0, 0.0, 0.0, 0.6).into(),\n                ..default()\n    })\n    .with_children(|parent| {\n            parent.spawn_bundle(TextBundle::from_section(\n                &#x26;quot;Bevy | Rust&#x26;quot;,\n                TextStyle {\n                    font: font.clone(),\n                    font_size: 60.0,\n                    color: Color::rgb(0.9, 0.9, 0.9)\n                })\n            )\n            // ここをVecDequeに変更する\n            .insert(Message{\n                messages: VecDeque::from([\n                    &#x26;quot;hello&#x26;quot;.to_string(),\n                    &#x26;quot;Do You Like Rust?&#x26;quot;.to_string()\n                ])\n            });\n        }\n    );\n}\n\nfn next_message(\n    key_input: Res&#x26;lt;Input&#x26;lt;KeyCode&#x26;gt;&#x26;gt;,\n    mut query: Query&#x26;lt;(&#x26;amp;mut Text, &#x26;amp;mut Message)&#x26;gt;\n){\n    if key_input.just_released(KeyCode::Right) {\n        let result = query.get_single_mut();\n\n        let tuple = result.unwrap();\n\n        let mut text = tuple.0;\n        let mut message = tuple.1;\n\n        // pop_frontメソッドに変更\n        let get_message = message.messages.pop_front();\n        match get_message {\n           Some(x) =&#x26;gt; {\n                text.sections[0].value = x;\n           },\n           None =&#x26;gt; println!(&#x26;quot;結果がNoneです&#x26;quot;)\n        }\n    }\n}</code></pre></div>\n<p>これでメッセージも管理しやすくなりました</p>\n<p><img src=\"/3731/4.png\" alt=\"画像\"></p>\n<p>これでかなりノベルゲームっぽくなりました。ゲーム要素はないですが。</p>\n<h2>シリーズ記事</h2>\n<p>◆Rust – Bevyでノベルゲームを作る 文字の表示</p>\n<p><a href=\"/posts/p3690\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 枠の表示</p>\n<p><a href=\"/posts/p3702\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る 次の文字を表示</p>\n<p><a href=\"/posts/p3716\">リンク</a></p>\n<p>◆Rust – Bevyでノベルゲームを作る キャラクターを表示する</p>\n<p><a href=\"/posts/p3731\">リンク</a></p>","slug":"p3731"},"__N_SSG":true}