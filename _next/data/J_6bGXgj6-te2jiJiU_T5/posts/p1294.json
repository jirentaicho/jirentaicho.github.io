{"pageProps":{"frontMatter":{"title":"ソースコードジェネレータ | 現場至上主義 Spring Boot2 徹底活用","date":"2022.07.29","description":"ソースコードジェネレータ | 現場至上主義 Spring Boot2 徹底活用","categories":["Spring"]},"content":"<p>正直、私がこの本で一番興味があったのがソースコードジェネレータの箇所です。</p>\n<p>ソースコードの自動生成はやったことがあります。画面もそうですが、DB定義からdaoとかを自動生成したりするものもあります（S2JDBC-Gen）</p>\n<p>本の内容としては実装詳細は省かれていたので、こちらも調べつつ実装してみます。基本的にはテンプレートとなるtxtファイルを用意しておいて、そこに値を埋め込んでソースコードを作成するようです。</p>\n<p>どうやって値を埋め込むかというとThymeleafを利用します。</p>\n<p>ソースとしてはここら辺が該当します</p>\n<p>https://github.com/miyabayt/spring-boot-doma2-sample/tree/master/buildSrc/src/main</p>\n<p>参考サイト</p>\n<p>http://gradle.monochromeroad.com/docs/userguide/custom_tasks.html</p>\n<p>https://qiita.com/niwasawa/items/5f0f5c08fbcedd2221a7</p>\n<p>この記事をブラッシュアップした記事を投稿しました</p>\n<p><a href=\"/posts/p3149\">リンク</a></p>\n<h2>Gradle</h2>\n<p>gradleについて詳しくないので調べつつやっていきます</p>\n<p>とりあえずGthubソースのgradleバージョンが低いため、compileはimplementationに置き換える必要がある。</p>\n<p>またプロジェクトルートのgradleはcom.ドメイン名を省略しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">apply plugin: CodeGenPlugin</code></pre></div>\n<p>フォルダ構成は参考のGithubに合わせて作成します</p>\n<p><img src=\"/1294/1.png\" alt=\"画像\"></p>\n<p>build.gradleの内容は記事の終わりに記載しています。</p>\n<h2>空タスクの作成</h2>\n<p>とりあえず自作のタスクを作りますが、そこのひな型は完全に書籍を参考にしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>volkruss\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>Plugin\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>Project\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CodeGenPlugin</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Plugin<span class=\"token operator\">&#x3C;</span>Project<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Override</span></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Project project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        project<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen\"</span><span class=\"token punctuation\">,</span> CodeGenPluginExtension<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> GenerateTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>volkruss\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>DefaultTask\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>TaskAction\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GenerateTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultTask</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TaskAction</span></span>\n    def <span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"called!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>volkruss\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CodeGenPluginExtension</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>認識されれば以下のようにタスクとして追加されます</p>\n<p><img src=\"/1294/2.png\" alt=\"画像\"></p>\n<p>実行するとcalled!と出力されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;gt; Task :codegen\ncalled!\n</code></pre></div>\n<h2>引数とエクステンションの読み取り</h2>\n<p>引数を受取ってみます。引数を渡すには -P引数名としてあげれば良さそうです。受取るにはprojectオブジェクトを利用します。</p>\n<p>簡単な例で引数の動きを確認します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenerateTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultTask</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TaskAction</span></span>\n    def <span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"called!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">hasProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misakaが設定されていません\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span>misaka<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----end-----\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">PS D:\\work\\misaka\\misaka&#x26;gt; gradle codegen -Pmisaka=mikoto\nStarting a Gradle Daemon, 1 busy and 2 incompatible Daemons could not be reused, use --status for details\n\n&#x26;gt; Task :codegen\ncalled!\nmikoto-----end-----\n\n\nPS D:\\work\\misaka\\misaka&#x26;gt; gradle codegen -Pkuroko=sirai\n\n&#x26;gt; Task :codegen\ncalled!\nmisakaが設定されていません\n\n</code></pre></div>\n<p>次にエクステンションから値を取得します。</p>\n<p>エクステンションから値を受取るには以下のようにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">project.extensions.findByType(Class)</code></pre></div>\n<p>簡単な例でエクステンションから値を受取ってみます。</p>\n<p>まずはエクステンションにnameプロパティを追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CodeGenPluginExtension</span> <span class=\"token punctuation\">{</span>\n    String name <span class=\"token operator\">=</span> <span class=\"token string\">\"Misaka Mikoto\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次にタスクからエクステンションの値を取得します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">TaskAction</span></span>\n    def <span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"called!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">hasProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misaka\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"misakaが設定されていません\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span>misaka<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----end-----\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">//エクステンションから値を読み込む</span>\n        def ext <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>CodeGenPluginExtension<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">PS D:\\work\\misaka\\misaka&#x26;gt; gradle codegen -Pmisaka=mikoto\n\n&#x26;gt; Task :codegen\ncalled!\nmikoto-----end-----Misaka Mikoto\n</code></pre></div>\n<p>ここまでの知識があればサンプルのソースコードは理解できるようになると思います。</p>\n<h2>テンプレートの作成</h2>\n<p>次にtxtファイルからテンプレートとなるひな形を取得して、Thymeleafを利用して値を埋め込みます。今回は参考GithubからDto.txtを利用します。</p>\n<p><img src=\"/1294/3.png\" alt=\"画像\"></p>\n<p>少しだけtxtファイルは修正しました。※パッケージ箇所commonDtoPackageNameは利用しないため除去します。そのため継承も削除します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span>domainBaseName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span>dtoPackageName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span>subSystem<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>seasar<span class=\"token punctuation\">.</span>doma<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"[[${lowerFuncName}]]s\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//現状ではyでもysになる</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span>upperFuncName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"[[${lowerFuncName}]]_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>$<span class=\"token punctuation\">{</span>lowerFuncName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>エクステンションファイルは以下のように修正します。いらない設定もありますが拡張性を考慮して残しておきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CodeGenPluginExtension</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> srcDirName <span class=\"token operator\">=</span> <span class=\"token string\">\"src/main/java/\"</span>\n    <span class=\"token class-name\">String</span> testDirName <span class=\"token operator\">=</span> <span class=\"token string\">\"src/test/groovy/\"</span>\n    <span class=\"token class-name\">String</span> sqlDirName <span class=\"token operator\">=</span> <span class=\"token string\">\"src/main/resources/META-INF/\"</span>\n    <span class=\"token class-name\">String</span> htmlDirName <span class=\"token operator\">=</span> <span class=\"token string\">\"src/main/resources/templates/modules/\"</span>\n    <span class=\"token class-name\">String</span> domainProjectName <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\work\\\\misaka\\\\misaka\"</span>\n    <span class=\"token class-name\">String</span> webProjectName\n\n    <span class=\"token class-name\">String</span> daoPackageName\n    <span class=\"token class-name\">String</span> dtoPackageName <span class=\"token operator\">=</span> <span class=\"token string\">\"domain.dto\"</span>\n    <span class=\"token class-name\">String</span> commonDtoPackageName\n    <span class=\"token class-name\">String</span> repositoryPackageName\n    <span class=\"token class-name\">String</span> servicePackageName\n    <span class=\"token class-name\">String</span> commonServicePackageName\n    <span class=\"token class-name\">String</span> exceptionPackageName\n    <span class=\"token class-name\">String</span> webBasePackageName\n    <span class=\"token class-name\">String</span> baseControllerPackageName\n    <span class=\"token class-name\">String</span> controllerPackageName\n    <span class=\"token class-name\">String</span> baseValidatorPackageName\n    <span class=\"token comment\">//　追加</span>\n    <span class=\"token class-name\">String</span> domainBaseName <span class=\"token operator\">=</span> <span class=\"token string\">\"com.volkruss.misaka\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>タスクの実装は参考Githubを元に以下のように作成します</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenerateTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultTask</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@TaskAction</span>\n    def <span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 利用例</span>\n        <span class=\"token comment\">// gradle codegen -Ptarget=dto -PsubSystem=expenses -Pfunc=salary</span>\n\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----start-----\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 必須項目チェック / subSystem</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">hasProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subSystem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subSystem must not be null\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 必須項目チェック / func</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">hasProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func must not be null\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 今回はdtoのみだが、今後作るものによっては判別できる</span>\n        def target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">hasProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            target <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//　エクステンションの取得</span>\n        def ext <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CodeGenPluginExtension</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 利用変数定義</span>\n        def subSystem <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">lowerCase</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span>subSystem<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        def func <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">capitalize</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        def lowerFunc <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">lowerCase</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Thymeleafに渡す変数を格納したMap</span>\n        def objects <span class=\"token operator\">=</span> <span class=\"token function\">extensionsToMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 機能名</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subSystem\"</span><span class=\"token punctuation\">,</span> subSystem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// クラス名</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upperFuncName\"</span><span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// テーブル及び、カラムのプレフィックス名</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lowerFuncName\"</span><span class=\"token punctuation\">,</span> lowerFunc<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">//　出力先のフォルダパス</span>\n        def domainTarget <span class=\"token operator\">=</span> <span class=\"token string\">\"${ext.domainProjectName}/${ext.srcDirName}/${ext.domainBaseName}\"</span>\n\n        <span class=\"token comment\">// 今回はdtoを受けたらない場合は作成しない</span>\n        <span class=\"token comment\">// if (target == null || target.equals(\"dto\")) {</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// テキストファイル</span>\n            <span class=\"token comment\">// dtoファイルの出力パス</span>\n            <span class=\"token comment\">// Mapオブジェクト</span>\n            <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"templates/src/Dto.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getTargetPath</span><span class=\"token punctuation\">(</span>domainTarget<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/${ext.dtoPackageName}/${subSystem}/${func}\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 出力先のディレクトリ（エクステンション）</span>\n    <span class=\"token comment\">// ファイル名（引数）</span>\n    <span class=\"token comment\">// 拡張子（固定値）</span>\n\n    <span class=\"token comment\">// 完全なパスを返します。</span>\n    <span class=\"token comment\">// パスの想定 domain/dto/{sales}</span>\n    <span class=\"token class-name\">Path</span> <span class=\"token function\">getTargetPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> _target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> _fileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        def target <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n        def sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n        def fileName <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>_fileName<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"${fileName}${suffix}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//　Thymeleafにて取得したStringの内容を、設定したパスにUTF-8で書き込む</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> template<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Path</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        def body <span class=\"token operator\">=</span> <span class=\"token function\">processTemplate</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">)</span>\n        def f <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">toFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>parentFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">processTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> template<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        def resolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoaderTemplateResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        resolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateMode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TEXT\"</span><span class=\"token punctuation\">)</span>\n        resolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span>\n\n        def templateEngine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        templateEngine<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateResolver</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">)</span>\n\n        def context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 引数で受取った値を元に設定したMapから変数を設定する</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objects <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            objects<span class=\"token punctuation\">.</span>each <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> value <span class=\"token operator\">-></span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">setVariable</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 指定したテンプレート（テキストデータ）に対してcontextの内容を埋め込んでStringを返す（Modelのような感じ）</span>\n        <span class=\"token keyword\">return</span> templateEngine<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">extensionsToMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        def ext <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CodeGenPluginExtension</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commonDtoPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>commonDtoPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtoPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>dtoPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daoPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>daoPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"repositoryPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>repositoryPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"servicePackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>servicePackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commonServicePackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>commonServicePackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exceptionPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>exceptionPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webBasePackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>webBasePackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baseControllerPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>baseControllerPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"controllerPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>controllerPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baseValidatorPackageName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>baseValidatorPackageName<span class=\"token punctuation\">)</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"domainBaseName\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span>domainBaseName<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> objects\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以下の用に引数を設定して実行します</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">gradle codegen -Ptarget=dto -PsubSystem=expenses -Pfunc=salary\n</code></pre></div>\n<p>成功すると対象フォルダにSalary.javaが作成されています。</p>\n<p><img src=\"/1294/4.png\" alt=\"画像\"></p>\n<p>出力されたファイルは問題なさそうです。※yをiesにすることは別途対応できそうです。※依存を入れてないパッケージがあるのでエラーになっていますが、依存関係を解決すればエラーも消えるでしょう</p>\n<p><img src=\"/1294/5.png\" alt=\"画像\"></p>\n<p>ソースコードジェネレータと聞いて、何か特別なプラグインとかがあるのかと最初は思ったのですが、Thymeleafを利用しますが割と原始的な方法ですね。</p>\n<p>これで面倒なファイル作成、およびパッケージ構成のルール定義が解決できます。</p>\n<h2>build.gradle</h2>\n<p>最後になりますがbuild.gradleを掲載しておきます。</p>\n<p>buildSrc/build.gradle</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">buildscript <span class=\"token punctuation\">{</span>\n    ext <span class=\"token punctuation\">{</span>\n        springBootVersion <span class=\"token operator\">=</span> <span class=\"token string\">\"2.0.6.RELEASE\"</span>\n        groovyVersion <span class=\"token operator\">=</span> <span class=\"token string\">\"2.5.3\"</span>\n    <span class=\"token punctuation\">}</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    dependencies <span class=\"token punctuation\">{</span>\n        classpath <span class=\"token string\">\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token operator\">:</span> <span class=\"token string\">'groovy'</span>\napply plugin<span class=\"token operator\">:</span> <span class=\"token string\">\"io.spring.dependency-management\"</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mavenLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndependencyManagement <span class=\"token punctuation\">{</span>\n    imports <span class=\"token punctuation\">{</span>\n        mavenBom org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">.</span>SpringBootPlugin<span class=\"token punctuation\">.</span><span class=\"token constant\">BOM_COORDINATES</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ndependencies <span class=\"token punctuation\">{</span>\n    implementation <span class=\"token function\">gradleApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    implementation <span class=\"token function\">localGroovy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    implementation <span class=\"token string\">\"org.apache.commons:commons-lang3\"</span>\n    implementation <span class=\"token string\">\"org.thymeleaf:thymeleaf\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>プロジェクトルート/build.gradle</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>volkruss<span class=\"token punctuation\">.</span>CodeGenPlugin\n\nbuildscript <span class=\"token punctuation\">{</span>\n\text <span class=\"token punctuation\">{</span>\n\t\tdockerComposePluginVersion <span class=\"token operator\">=</span> <span class=\"token string\">\"0.15.0\"</span>\n\t<span class=\"token punctuation\">}</span>\n\trepositories <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tdependencies <span class=\"token punctuation\">{</span>\n\t\tclasspath <span class=\"token string\">\"com.avast.gradle:gradle-docker-compose-plugin:${dockerComposePluginVersion}\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nplugins <span class=\"token punctuation\">{</span>\n\tid <span class=\"token string\">'org.springframework.boot'</span> version <span class=\"token string\">'2.6.3'</span>\n\tid <span class=\"token string\">'io.spring.dependency-management'</span> version <span class=\"token string\">'1.0.11.RELEASE'</span>\n\tid <span class=\"token string\">'java'</span>\n<span class=\"token punctuation\">}</span>\n\ngroup <span class=\"token operator\">=</span> <span class=\"token string\">'com.volkruss'</span>\nversion <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.1-SNAPSHOT'</span>\nsourceCompatibility <span class=\"token operator\">=</span> <span class=\"token string\">'11'</span>\n\nconfigurations <span class=\"token punctuation\">{</span>\n\tcompileOnly <span class=\"token punctuation\">{</span>\n\t\textendsFrom annotationProcessor\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n\timplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span>\n\tcompileOnly <span class=\"token string\">'org.projectlombok:lombok'</span>\n\tdevelopmentOnly <span class=\"token string\">'org.springframework.boot:spring-boot-devtools'</span>\n\tannotationProcessor <span class=\"token string\">'org.projectlombok:lombok'</span>\n\ttestImplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token operator\">:</span> <span class=\"token string\">\"docker-compose\"</span>\napply plugin<span class=\"token operator\">:</span> CodeGenPlugin <span class=\"token comment\">// ここを追加</span>\n\n\ndockerCompose <span class=\"token punctuation\">{</span>\n\tuseComposeFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"docker/docker-compose.yml\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span><span class=\"token function\">named</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useJUnitPlatform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreetingPlugin</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Plugin<span class=\"token operator\">&#x3C;</span>Project<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Override</span></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Project project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tproject<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">doLast</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Gradle!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\napply plugin<span class=\"token operator\">:</span> GreetingPlugin\n</code></pre></div>","slug":"p1294"},"__N_SSG":true}